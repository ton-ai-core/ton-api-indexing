name: TON Blockchain Indexer

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: 'Duration to run indexer (minutes)'
        required: false
        default: '9'
        type: string

permissions:
  contents: write

concurrency:
  group: ton-indexer
  cancel-in-progress: false

jobs:
  index:
    runs-on: ubuntu-latest

    steps:
    # ------------------------------------------------------------------
    # 1. Checkout repository ‚Äî –±–µ–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ data –∏ –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö blob'–æ–≤
    # ------------------------------------------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1            # —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
        persist-credentials: true # –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è push
        filter: "blob:none"       # partial-clone (–±–µ–∑ blob-–æ–±—ä–µ–∫—Ç–æ–≤)
        sparse-checkout: |
          /*
          !/data                  # –∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é data
        sparse-checkout-cone-mode: false

    # ------------------------------------------------------------------
    # 2. Runtime setup
    # ------------------------------------------------------------------
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure Git
      run: |
        git config --global user.name  "TON Indexer Bot"
        git config --global user.email "indexer@github-actions.local"

    # ------------------------------------------------------------------
    # 3. Prepare environment and folders
    # ------------------------------------------------------------------
    - name: Create .env file
      run: |
        cat <<EOF > .env
        TONAPI_KEY=AFPJTKEBPOX3AIYAAAAKA2HWOTRNJP5MUCV5DMDCZAAOCPSAYEYS3CILNQVLF2HWKED6USY
        LOG_LEVEL=info
        LOG_PRETTY=false
        MAX_CONCURRENT_REQUESTS=3
        ACCOUNTS_PER_PAGE=50
        REQUEST_DELAY_MS=100
        EOF

    - name: Ensure data directory exists
      run: mkdir -p data

    # ------------------------------------------------------------------
    # 4. Run indexer (timed)
    # ------------------------------------------------------------------
    - name: Run TON Indexer (timed mode)
      run: |
        DURATION=${{ github.event.inputs.duration_minutes || '9' }}
        echo "üöÄ Starting TON indexer for ${DURATION} minutes‚Ä¶"
        npm run build
        timeout $((DURATION * 60)) node dist/index.js timed "${DURATION}" \
          || echo "‚è∞ Indexer finished (timeout or graceful exit)"

    # ------------------------------------------------------------------
    # 5. Stage changes
    # ------------------------------------------------------------------
    - name: Stage changes
      id: changes
      run: |
        git add data/ cursor.txt
        if git diff --staged --quiet; then
          echo "has_changes=false" >> "$GITHUB_OUTPUT"
          echo "üìù No changes to commit"
        else
          echo "has_changes=true"  >> "$GITHUB_OUTPUT"
          echo "üìù Changes detected"
        fi

    # ------------------------------------------------------------------
    # 6. Commit, clean untracked, rebase, push
    # ------------------------------------------------------------------
    - name: Commit ‚Üí clean ‚Üí rebase ‚Üí push
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        # ---------- commit ----------
        DATA_FILES=$(find data -name '*.json' | wc -l)
        NEW_FILES=$(git diff --staged --name-only --diff-filter=A | wc -l)
        CURSOR_UPDATED=$(git diff --staged --name-only | grep -c cursor.txt)
        TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')

        COMMIT_MSG=$(
          echo "ü§ñ Automated indexing: ${TIMESTAMP}"
          echo
          echo "üìä Stats:"
          echo "- Total contract files: ${DATA_FILES}"
          echo "- New contracts this run: ${NEW_FILES}"
          echo "- Cursor updated: $([ ${CURSOR_UPDATED} -eq 1 ] && echo 'Yes' || echo 'No')"
          echo
          echo "Generated by GitHub Actions workflow"
        )
        git commit -m "$COMMIT_MSG"

        # ---------- ensure clean working tree ----------
        git clean -fd           # —É–¥–∞–ª—è–µ–º –≤—Å–µ untracked (–≤ —Ç.—á. .env), –∏–Ω–∞—á–µ rebase –Ω–µ –Ω–∞—á–Ω—ë—Ç—Å—è

        # ---------- integrate upstream ----------
        git pull --rebase --autostash origin main

        # ---------- push ----------
        git push --force-with-lease

    # ------------------------------------------------------------------
    # 7. Summary (–≤—Å–µ–≥–¥–∞)
    # ------------------------------------------------------------------
    - name: Indexing summary
      if: always()
      run: |
        echo "üìà Indexing Summary:"
        echo "- Total JSON files: $(find data -name '*.json' | wc -l || echo 0)"
        echo "- Data directory size: $(du -sh data 2>/dev/null | cut -f1 || echo '0B')"
        echo "- Cursor file exists: $([ -f cursor.txt ] && echo 'Yes' || echo 'No')"
        [ -f cursor.txt ] && echo "- Current cursor: $(cat cursor.txt)"
