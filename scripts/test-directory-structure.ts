#!/usr/bin/env tsx

import { 
  calculateOptimalDirectoryLevels,
  analyzeDirectoryDistribution,
  getDirectoryPath,
  createMigrationScript,
  DIRECTORY_CONSTANTS 
} from '../src/utils/directoryStructure';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 */
function demonstrateScalability() {
  console.log('üî¢ –ê–ù–ê–õ–ò–ó –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–ò –ê–õ–ì–û–†–ò–¢–ú–ê\n');
  
  const testCases = [
    { files: 1000, description: '1K —Ñ–∞–π–ª–æ–≤' },
    { files: 10000, description: '10K —Ñ–∞–π–ª–æ–≤' },
    { files: 100000, description: '100K —Ñ–∞–π–ª–æ–≤' },
    { files: 489915, description: '–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (489K —Ñ–∞–π–ª–æ–≤)' },
    { files: 1000000, description: '1M —Ñ–∞–π–ª–æ–≤' },
    { files: 10000000, description: '10M —Ñ–∞–π–ª–æ–≤' },
    { files: 100000000, description: '100M —Ñ–∞–π–ª–æ–≤' },
  ];
  
  console.log('| –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ | –£—Ä–æ–≤–Ω–∏ | –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π | –§–∞–π–ª–æ–≤/–ø–∞–ø–∫—É | –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å |');
  console.log('|------------------|--------|------------|--------------|-------------------|');
  
  testCases.forEach(({ files, description }) => {
    const levels = calculateOptimalDirectoryLevels(files);
    const totalDirs = Math.pow(256, levels);
    const filesPerDir = Math.ceil(files / totalDirs);
    const performance = filesPerDir <= 1000 ? '‚úÖ –û—Ç–ª–∏—á–Ω–æ' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π';
    
    console.log(`| ${description.padEnd(16)} | ${levels.toString().padEnd(6)} | ${totalDirs.toLocaleString().padEnd(10)} | ${filesPerDir.toString().padEnd(12)} | ${performance.padEnd(17)} |`);
  });
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π
 */
function demonstratePathGeneration() {
  console.log('\nüóÇÔ∏è –ü–†–ò–ú–ï–†–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–£–¢–ï–ô\n');
  
  const sampleAddresses = [
    'EQCvxJy4eG8hyHBFsZ7eePxrRsUQSFE_jpptRAYBmcG_DOGS',
    'UQB1234567890abcdef1234567890abcdef1234567890abcdef',
    'kQC9876543210fedcba9876543210fedcba9876543210fedcba',
  ];
  
  [2, 3, 4].forEach(levels => {
    console.log(`\n--- ${levels} —É—Ä–æ–≤–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ---`);
    sampleAddresses.forEach(address => {
      const dirPath = getDirectoryPath(address, './data', levels);
      console.log(`${address.substring(0, 20)}... ‚Üí ${dirPath}`);
    });
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
 */
function showMathBehindAlgorithm() {
  console.log('\nüßÆ –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ê\n');
  
  console.log('–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:');
  console.log('‚Ä¢ MD5 —Ö–µ—à = 32 —Å–∏–º–≤–æ–ª–∞ (0-9, a-f)');
  console.log('‚Ä¢ –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å = 2 —Å–∏–º–≤–æ–ª–∞ = 256 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞–ø–æ–∫ (00-ff)');
  console.log('‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –ø–∞–ø–∫—É = 1000');
  console.log('');
  
  console.log('–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π:');
  console.log('‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 1: 256^1 = 256 –ø–∞–ø–æ–∫');
  console.log('‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 2: 256^2 = 65,536 –ø–∞–ø–æ–∫');  
  console.log('‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 3: 256^3 = 16,777,216 –ø–∞–ø–æ–∫');
  console.log('‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 4: 256^4 = 4,294,967,296 –ø–∞–ø–æ–∫');
  console.log('‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 5: 256^5 = 1,099,511,627,776 –ø–∞–ø–æ–∫');
  console.log('‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 6: 256^6 = 281,474,976,710,656 –ø–∞–ø–æ–∫');
  console.log('');
  
  console.log('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ë–º–∫–æ—Å—Ç—å:');
  for (let level = 1; level <= 6; level++) {
    const maxDirs = Math.pow(256, level);
    const maxFiles = maxDirs * 1000;
    console.log(`‚Ä¢ ${level} —É—Ä–æ–≤–µ–Ω—å: –¥–æ ${maxFiles.toLocaleString()} —Ñ–∞–π–ª–æ–≤`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´ –ü–ê–ü–û–ö TON –ò–ù–î–ï–ö–°–ê–¢–û–†–ê\n');
    console.log('='.repeat(80));
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏
    demonstrateScalability();
    
    // –ü—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π
    demonstratePathGeneration();
    
    // –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
    showMathBehindAlgorithm();
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ò–• –î–ê–ù–ù–´–•\n');
    try {
      const stats = await analyzeDirectoryDistribution('./data');
      
      if (stats.totalFiles > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.totalFiles.toLocaleString()}`);
        console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${stats.totalDirectories.toLocaleString()}`);
        console.log(`üìÑ –°—Ä–µ–¥–Ω–µ–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø–∞–ø–∫—É: ${stats.averageFilesPerDirectory.toFixed(2)}`);
        console.log(`üìà –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${stats.maxFilesInDirectory}`);
        console.log(`üìâ –ú–∏–Ω–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${stats.minFilesInDirectory}`);
        
        const recommended = calculateOptimalDirectoryLevels(stats.totalFiles);
        console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏: ${recommended}`);
        
        if (stats.maxFilesInDirectory > 1000) {
          console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–ø–∫–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç 1000 —Ñ–∞–π–ª–æ–≤!');
          console.log('üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –∫ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.');
        }
      } else {
        console.log('‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Å—Ç–∞');
      }
    } catch (error) {
      console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞)');
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüìù –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ú–ò–ì–†–ê–¶–ò–ò\n');
    try {
      const migrationScript = await createMigrationScript('./data');
      console.log('–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω:');
      console.log(migrationScript);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏');
    }
    
    console.log('\n' + '='.repeat(80));
    console.log('‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
} 