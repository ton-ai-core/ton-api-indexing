#!/usr/bin/env tsx

import { migrateToHierarchicalStructure, analyzeDirectoryDistribution } from '../src/utils/directoryStructure';

async function main() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ú–ò–ì–†–ê–¶–ò–ò –î–ê–ù–ù–´–• TON –ò–ù–î–ï–ö–°–ê–¢–û–†–ê');
  console.log('='.repeat(60));
  
  const sourceDir = './data';
  const targetDir = './data_new';
  
  try {
    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const initialStats = await analyzeDirectoryDistribution(sourceDir);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${initialStats.totalFiles.toLocaleString()}`);
    console.log(`üìÅ –¢–µ–∫—É—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${initialStats.totalDirectories}`);
    
    if (initialStats.totalFiles === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }
    
    // –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...');
    console.log('‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...');
    
    const startTime = Date.now();
    
    const result = await migrateToHierarchicalStructure(
      sourceDir,
      targetDir,
      500 // –ë–∞—Ç—á —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
    );
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log(`üì¶ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.migrated.toLocaleString()}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${result.errors.length}`);
    console.log(`üóÇÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —É—Ä–æ–≤–Ω–µ–π: ${result.optimalLevels}`);
    
    if (result.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      result.errors.slice(0, 10).forEach(error => console.log(`  ‚Ä¢ ${error}`));
      if (result.errors.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${result.errors.length - 10} –æ—à–∏–±–æ–∫`);
      }
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:');
    console.log(`üìÅ –í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: ${result.stats.totalDirectories.toLocaleString()}`);
    console.log(`üìÑ –°—Ä–µ–¥–Ω–µ–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø–∞–ø–∫—É: ${result.stats.averageFilesPerDirectory.toFixed(2)}`);
    console.log(`üìà –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${result.stats.maxFilesInDirectory}`);
    console.log(`üìâ –ú–∏–Ω–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${result.stats.minFilesInDirectory}`);
    
    // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const performance = result.stats.maxFilesInDirectory <= 1000 ? '–û–¢–õ–ò–ß–ù–ê–Ø' : '–¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò';
    console.log(`üéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${performance}`);
    
    console.log('\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ ./data_new');
    console.log('2. –ï—Å–ª–∏ –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
    console.log('   mv ./data ./data_old');
    console.log('   mv ./data_new ./data');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω–¥–µ–∫—Å–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
} 