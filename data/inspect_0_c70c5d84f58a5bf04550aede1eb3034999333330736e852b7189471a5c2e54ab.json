{
  "code": "b5ee9c72010214010003f1000114ff00f4a413f4bcf2c80b010201620203039ad001d0d3030171b0a301fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088545053036f04f86102f862db3c551adb3cf2e082c8f84301cc7f01ca0055a0db3cc9ed540c04050201200a0b01a40192307fe07021d749c21f953020d70b1fde20c00022d749c121b0925b7fe08210946a98b6ba8ea7d31f018210946a98b6baf2e081d33f0131c8018210aff90f5758cb1fcb3fc9f84201706ddb3c7fe030700601c0c8500bcf16c9500bccc85009cf16c95008ccc8c85008cf16c95007ccc85006cf16c95005ccc85004cf16c95003ccc8c85003cf16c958ccc85003cf16c958cc5820d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf16500309013a6d6d226eb3995b206ef2d0806f22019132e2102470030480425023db3c0701cac87101ca01500701ca007001ca02500520d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf165003fa027001ca68236eb3917f93246eb3e2973333017001ca00e30d216eb39c7f01ca0001206ef2d08001cc95317001ca00e2c901fb000800987f01ca00c87001ca007001ca00246eb39d7f01ca0004206ef2d0805004cc9634037001ca00e2246eb39d7f01ca0004206ef2d0805004cc9634037001ca00e27001ca00027f01ca0002c958cc005e20d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e088cf1614ca00c85003cf16c958ccc901ccc901cc0211bd78aed9e6d9e365dc0c0d020120101101f4ed44d0d401f863d200018e6dd401d001d401d001d401d0d401d001d401d001d401d001d430d0d401d001d401d001fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801d200d430d0109b109a6c1be00e0016547a98547a98547a9853a90122f828d70b0a8309baf2e089db3c0bd155090f00d6d401d001d401d001d401d0d401d001d401d001d401d001d430d0d401d001d401d001fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801fa400120d74981010bbaf2e08820d70b0a208104ffbaf2d0898309baf2e08801d200d430d0109b109a00b9bbbd182705cec3d5d2cae7b1e84ec39d64a851b6682709dd6352d2b647cb322d3af2dfdf1623982702055c01b80676394ce583aae4725b2c382701bd49def954596f1c753d3de0559c32682709d974e5ab34ecb733a0e966d9466e8a4802014812130011b0afbb5134348000600075b26ee3435697066733a2f2f516d594b556735613644733468685750756d7a5a3347623347507a383675646d7652647148376b77554e6e763474820",
  "code_hash": "fe05b9f31a4c200ef51036d05a7ce05fd4b024716c4a8bcbc56c603302e1e3a9",
  "methods": [],
  "compiler": "tact",
  "source": {
    "files": [
      {
        "name": "output/verifier_Metadata.headers.fc",
        "content": ";;\n;; Header files for Metadata\n;; NOTE: declarations are sorted for optimal order\n;;\n\n;; __tact_verify_address\nslice __tact_verify_address(slice address) inline;\n\n;; __tact_load_address\n(slice, slice) __tact_load_address(slice cs) inline;\n\n;; __tact_store_address\nbuilder __tact_store_address(builder b, slice address) inline;\n\n;; __tact_my_balance\nint __tact_my_balance() inline;\n\n;; __tact_not_null\nforall X -> X __tact_not_null(X x) inline;\n\n;; __tact_context_get\n(int, slice, int, slice) __tact_context_get() inline;\n\n;; __tact_context_get_sender\nslice __tact_context_get_sender() inline;\n\n;; __tact_store_bool\nbuilder __tact_store_bool(builder b, int v) inline;\n\n;; $Deploy$_load\n(slice, ((int))) $Deploy$_load(slice sc_0) inline;\n\n;; $DeployOk$_store\nbuilder $DeployOk$_store(builder build_0, (int) v) inline;\n\n;; $DeployOk$_store_cell\ncell $DeployOk$_store_cell((int) v) inline;\n\n;; $Metadata$_store\nbuilder $Metadata$_store(builder build_0, (slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) v) inline;\n\n;; $Metadata$_load\n(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice))) $Metadata$_load(slice sc_0) inline;\n\n;; $StateInit$_not_null\n((cell, cell)) $StateInit$_not_null(tuple v) inline;\n\n;; $MetadataState$_to_external\n(slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $MetadataState$_to_external(((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)) v) inline;\n\n;; $Metadata$init$_load\n(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice))) $Metadata$init$_load(slice sc_0) inline_ref;\n\n;; $Metadata$_contract_init\n(slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $Metadata$_contract_init(slice $avatar, slice $name, slice $about, slice $website, slice $terms, slice $telegram, slice $github, slice $jetton, slice $nft, int $hide, slice $dns) impure inline_ref;\n\n;; $Metadata$_contract_load\n(slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $Metadata$_contract_load() impure inline_ref;\n\n;; $Metadata$_contract_store\n() $Metadata$_contract_store((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) v) impure inline;\n\n;; $global_send\n() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;\n\n;; $MetadataState$_constructor_avatar_name_about_website_terms_telegram_github_jetton_nft_hide_dns\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)) $MetadataState$_constructor_avatar_name_about_website_terms_telegram_github_jetton_nft_hide_dns(slice avatar, slice name, slice about, slice website, slice terms, slice telegram, slice github, slice jetton, slice nft, int hide, slice dns) inline;\n\n;; $Metadata$_fun_state\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), (slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)) $Metadata$_fun_state((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self) impure inline_ref;\n\n;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data\n((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;\n\n;; $Metadata$_fun_forward\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), ()) $Metadata$_fun_forward((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;\n\n;; $Metadata$_fun_notify\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), ()) $Metadata$_fun_notify((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self, cell $body) impure inline;\n\n;; $DeployOk$_constructor_queryId\n((int)) $DeployOk$_constructor_queryId(int queryId) inline;\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "output/verifier_Metadata.stdlib.fc",
        "content": "global (int, slice, int, slice) __tact_context;\nglobal slice __tact_context_sender;\nglobal cell __tact_context_sys;\nglobal int __tact_randomized;\n\nslice __tact_verify_address(slice address) inline {\n    throw_unless(136, address.slice_bits() == 267);\n    var h = address.preload_uint(11);\n    throw_if(137, h == 1279);\n    throw_unless(136, h == 1024);\n    return address;\n}\n\n(slice, slice) __tact_load_address(slice cs) inline {\n    slice raw = cs~load_msg_addr();\n    return (cs, __tact_verify_address(raw));\n}\n\nbuilder __tact_store_address(builder b, slice address) inline {\n    return b.store_slice(__tact_verify_address(address));\n}\n\nint __tact_my_balance() inline {\n    return pair_first(get_balance());\n}\n\nforall X -> X __tact_not_null(X x) inline {\n    throw_if(128, null?(x)); return x;\n}\n\n(int, slice, int, slice) __tact_context_get() inline {\n    return __tact_context;\n}\n\nslice __tact_context_get_sender() inline {\n    return __tact_context_sender;\n}\n\nbuilder __tact_store_bool(builder b, int v) inline {\n    return b.store_int(v, 1);\n}\n\nforall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm \"2 UNTUPLE\";\n\n() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {\n    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;\n    builder $b = begin_cell();\n    $b = store_int($b, 1, 2);\n    $b = __tact_store_bool($b, $params'bounce);\n    $b = store_int($b, 0, 3);\n    $b = __tact_store_address($b, $params'to);\n    $b = store_coins($b, $params'value);\n    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));\n    if (( ((~ null?($params'code))) ? (true) : ((~ null?($params'data))) )) {\n        $b = __tact_store_bool($b, true);\n        builder $bc = begin_cell();\n        $bc = __tact_store_bool($bc, false);\n        $bc = __tact_store_bool($bc, false);\n        if ((~ null?($params'code))) {\n            $bc = __tact_store_bool($bc, true);\n            $bc = store_ref($bc, __tact_not_null($params'code));\n        } else {\n            $bc = __tact_store_bool($bc, false);\n        }\n        if ((~ null?($params'data))) {\n            $bc = __tact_store_bool($bc, true);\n            $bc = store_ref($bc, __tact_not_null($params'data));\n        } else {\n            $bc = __tact_store_bool($bc, false);\n        }\n        $bc = __tact_store_bool($bc, false);\n        $b = __tact_store_bool($b, true);\n        $b = store_ref($b, end_cell($bc));\n    } else {\n        $b = __tact_store_bool($b, false);\n    }\n    cell $body = $params'body;\n    if ((~ null?($body))) {\n        $b = __tact_store_bool($b, true);\n        $b = store_ref($b, __tact_not_null($body));\n    } else {\n        $b = __tact_store_bool($b, false);\n    }\n    cell $c = end_cell($b);\n    send_raw_message($c, $params'mode);\n}\n\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), ()) $Metadata$_fun_forward((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref {\n    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)) = $self;\n    var ($init) = $init;\n    cell $code = null();\n    cell $data = null();\n    if ((~ null?($init))) {\n        var ($init2'code, $init2'data) = $StateInit$_not_null($init);\n        $code = $init2'code;\n        $data = $init2'data;\n    }\n    if ((0 > 0)) {\n        var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();\n        int $balance = __tact_my_balance();\n        int $balanceBeforeMessage = ($balance - $ctx'value);\n        if (($balanceBeforeMessage < 0)) {\n            raw_reserve(0, 0);\n            $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, (128 + 2), $body, $code, $data));\n            return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), ());\n        }\n    }\n    $global_send($SendParameters$_constructor_bounce_to_value_mode_body_code_data($bounce, $to, 0, (64 + 2), $body, $code, $data));\n    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), ());\n}\n\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), ()) $Metadata$_fun_notify((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self, cell $body) impure inline {\n    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)) = $self;\n    ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)~$Metadata$_fun_forward(__tact_context_get_sender(), $body, false, null());\n    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), ());\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "output/verifier_Metadata.storage.fc",
        "content": ";;\n;; Type: StateInit\n;; TLB: _ code:^cell data:^cell = StateInit\n;;\n\n((cell, cell)) $StateInit$_not_null(tuple v) inline {\n    throw_if(128, null?(v));\n    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);\n    return (vvv'code, vvv'data);\n}\n\n;;\n;; Type: SendParameters\n;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters\n;;\n\n((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {\n    return (bounce, to, value, mode, body, code, data);\n}\n\n;;\n;; Type: Deploy\n;; Header: 0x946a98b6\n;; TLB: deploy#946a98b6 queryId:uint64 = Deploy\n;;\n\n(slice, ((int))) $Deploy$_load(slice sc_0) inline {\n    throw_unless(129, sc_0~load_uint(32) == 2490013878);\n    var v'queryId = sc_0~load_uint(64);\n    return (sc_0, (v'queryId));\n}\n\n;;\n;; Type: DeployOk\n;; Header: 0xaff90f57\n;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk\n;;\n\nbuilder $DeployOk$_store(builder build_0, (int) v) inline {\n    var (v'queryId) = v;\n    build_0 = store_uint(build_0, 2952335191, 32);\n    build_0 = build_0.store_uint(v'queryId, 64);\n    return build_0;\n}\n\ncell $DeployOk$_store_cell((int) v) inline {\n    return $DeployOk$_store(begin_cell(), v).end_cell();\n}\n\n((int)) $DeployOk$_constructor_queryId(int queryId) inline {\n    return (queryId);\n}\n\n;;\n;; Type: MetadataState\n;; TLB: _ avatar:^string name:^string about:^string website:^string terms:^string telegram:^string github:^string jetton:address nft:address hide:bool dns:^string = MetadataState\n;;\n\n(slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $MetadataState$_to_external(((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)) v) inline {\n    var (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide, v'dns) = v; \n    return (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide, v'dns);\n}\n\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)) $MetadataState$_constructor_avatar_name_about_website_terms_telegram_github_jetton_nft_hide_dns(slice avatar, slice name, slice about, slice website, slice terms, slice telegram, slice github, slice jetton, slice nft, int hide, slice dns) inline {\n    return (avatar, name, about, website, terms, telegram, github, jetton, nft, hide, dns);\n}\n\n;;\n;; Type: Metadata\n;;\n\nbuilder $Metadata$_store(builder build_0, (slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) v) inline {\n    var (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide, v'dns) = v;\n    build_0 = build_0.store_ref(begin_cell().store_slice(v'avatar).end_cell());\n    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());\n    var build_1 = begin_cell();\n    build_1 = build_1.store_ref(begin_cell().store_slice(v'about).end_cell());\n    build_1 = build_1.store_ref(begin_cell().store_slice(v'website).end_cell());\n    build_1 = build_1.store_ref(begin_cell().store_slice(v'terms).end_cell());\n    var build_2 = begin_cell();\n    build_2 = build_2.store_ref(begin_cell().store_slice(v'telegram).end_cell());\n    build_2 = build_2.store_ref(begin_cell().store_slice(v'github).end_cell());\n    build_2 = __tact_store_address(build_2, v'jetton);\n    build_2 = __tact_store_address(build_2, v'nft);\n    build_2 = build_2.store_int(v'hide, 1);\n    build_2 = build_2.store_ref(begin_cell().store_slice(v'dns).end_cell());\n    build_1 = store_ref(build_1, build_2.end_cell());\n    build_0 = store_ref(build_0, build_1.end_cell());\n    return build_0;\n}\n\n(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice))) $Metadata$_load(slice sc_0) inline {\n    var v'avatar = sc_0~load_ref().begin_parse();\n    var v'name = sc_0~load_ref().begin_parse();\n    slice sc_1 = sc_0~load_ref().begin_parse();\n    var v'about = sc_1~load_ref().begin_parse();\n    var v'website = sc_1~load_ref().begin_parse();\n    var v'terms = sc_1~load_ref().begin_parse();\n    slice sc_2 = sc_1~load_ref().begin_parse();\n    var v'telegram = sc_2~load_ref().begin_parse();\n    var v'github = sc_2~load_ref().begin_parse();\n    var v'jetton = sc_2~__tact_load_address();\n    var v'nft = sc_2~__tact_load_address();\n    var v'hide = sc_2~load_int(1);\n    var v'dns = sc_2~load_ref().begin_parse();\n    return (sc_0, (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide, v'dns));\n}\n\n(slice, ((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice))) $Metadata$init$_load(slice sc_0) inline_ref {\n    var v'avatar = sc_0~load_ref().begin_parse();\n    var v'name = sc_0~load_ref().begin_parse();\n    slice sc_1 = sc_0~load_ref().begin_parse();\n    var v'about = sc_1~load_ref().begin_parse();\n    var v'website = sc_1~load_ref().begin_parse();\n    var v'terms = sc_1~load_ref().begin_parse();\n    slice sc_2 = sc_1~load_ref().begin_parse();\n    var v'telegram = sc_2~load_ref().begin_parse();\n    var v'github = sc_2~load_ref().begin_parse();\n    var v'jetton = sc_2~__tact_load_address();\n    var v'nft = sc_2~__tact_load_address();\n    var v'hide = sc_2~load_int(1);\n    var v'dns = sc_2~load_ref().begin_parse();\n    return (sc_0, (v'avatar, v'name, v'about, v'website, v'terms, v'telegram, v'github, v'jetton, v'nft, v'hide, v'dns));\n}\n\n(slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $Metadata$_contract_load() impure inline_ref {\n    slice $sc = get_data().begin_parse();\n    __tact_context_sys = $sc~load_ref();\n    int $loaded = $sc~load_int(1);\n    if ($loaded) {\n        return $sc~$Metadata$_load();\n    } else {\n        ;; Allow only workchain deployments\n        throw_unless(137, my_address().preload_uint(11) == 1024);\n        (slice avatar, slice name, slice about, slice website, slice terms, slice telegram, slice github, slice jetton, slice nft, int hide, slice dns) = $sc~$Metadata$init$_load();\n        $sc.end_parse();\n        return $Metadata$_contract_init(avatar, name, about, website, terms, telegram, github, jetton, nft, hide, dns);\n    }\n}\n\n() $Metadata$_contract_store((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) v) impure inline {\n    builder b = begin_cell();\n    b = b.store_ref(__tact_context_sys);\n    b = b.store_int(true, 1);\n    b = $Metadata$_store(b, v);\n    set_data(b.end_cell());\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "output/verifier_Metadata.code.fc",
        "content": "#pragma version =0.4.3;\n#pragma allow-post-modification;\n#pragma compute-asm-ltr;\n\n#include \"verifier_Metadata.headers.fc\";\n#include \"verifier_Metadata.stdlib.fc\";\n#include \"verifier_Metadata.storage.fc\";\n\n;;\n;; Contract Metadata functions\n;;\n\n(slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $Metadata$_contract_init(slice $avatar, slice $name, slice $about, slice $website, slice $terms, slice $telegram, slice $github, slice $jetton, slice $nft, int $hide, slice $dns) impure inline_ref {\n    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)) = (null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null());\n    $self'avatar = $avatar;\n    $self'name = $name;\n    $self'about = $about;\n    $self'website = $website;\n    $self'terms = $terms;\n    $self'telegram = $telegram;\n    $self'github = $github;\n    $self'jetton = $jetton;\n    $self'nft = $nft;\n    $self'hide = $hide;\n    $self'dns = $dns;\n    return ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns);\n}\n\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), (slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)) $Metadata$_fun_state((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self) impure inline_ref {\n    var (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)) = $self;\n    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), $MetadataState$_constructor_avatar_name_about_website_terms_telegram_github_jetton_nft_hide_dns($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns));\n}\n\n;;\n;; Receivers of a Contract Metadata\n;;\n\n(((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)), ()) %$Metadata$_internal_empty((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self) impure inline {\n    var ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns) = $self;\n    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), ());\n}\n\n(((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice)), ()) $Metadata$_internal_binary_Deploy((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) $self, (int) $deploy) impure inline {\n    var ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns) = $self;\n    var ($deploy'queryId) = $deploy;\n    ($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns)~$Metadata$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));\n    return (($self'avatar, $self'name, $self'about, $self'website, $self'terms, $self'telegram, $self'github, $self'jetton, $self'nft, $self'hide, $self'dns), ());\n}\n\n;;\n;; Get methods of a Contract Metadata\n;;\n\n_ %state() method_id(77589) {\n    var self = $Metadata$_contract_load();\n    var res = self~$Metadata$_fun_state();\n    return $MetadataState$_to_external(res);\n}\n\n_ supported_interfaces() method_id {\n    return (\n        \"org.ton.introspection.v0\"H >> 128,\n        \"org.ton.abi.ipfs.v0\"H >> 128,\n        \"org.ton.deploy.lazy.v0\"H >> 128,\n        \"org.ton.debug.v0\"H >> 128,\n        \"org.ton.chain.workchain.v0\"H >> 128\n    );\n}\n\n_ get_abi_ipfs() method_id {\n    return \"ipfs://QmYKUg5a6Ds4hhWPumzZ3Gb3GPz86udmvRdqH7kwUNnv4t\";\n}\n\n_ lazy_deployment_completed() method_id {\n    return get_data().begin_parse().load_int(1);\n}\n\n;;\n;; Routing of a Contract Metadata\n;;\n\n((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice), int) $Metadata$_contract_router_internal((slice, slice, slice, slice, slice, slice, slice, slice, slice, int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {\n    ;; Handle bounced messages\n    if (msg_bounced) {\n        return (self, true);\n    }\n    \n    ;; Parse incoming message\n    int op = 0;\n    if (slice_bits(in_msg) >= 32) {\n        op = in_msg.preload_uint(32);\n    }\n    \n    \n    ;; Receive empty message\n    if ((op == 0) & (slice_bits(in_msg) <= 32)) {\n        self~%$Metadata$_internal_empty();\n        return (self, true);\n    }\n    \n    ;; Receive Deploy message\n    if (op == 2490013878) {\n        var msg = in_msg~$Deploy$_load();\n        self~$Metadata$_internal_binary_Deploy(msg);\n        return (self, true);\n    }\n    \n    return (self, false);\n}\n\n() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {\n    \n    ;; Context\n    var cs = in_msg_cell.begin_parse();\n    var msg_flags = cs~load_uint(4);\n    var msg_bounced = -(msg_flags & 1);\n    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());\n    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);\n    __tact_context_sender = msg_sender_addr;\n    \n    ;; Load contract data\n    var self = $Metadata$_contract_load();\n    \n    ;; Handle operation\n    int handled = self~$Metadata$_contract_router_internal(msg_bounced, in_msg);\n    \n    ;; Throw if not handled\n    throw_unless(130, handled);\n    \n    ;; Persist state\n    $Metadata$_contract_store(self);\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "output/verifier_Metadata.abi",
        "content": "{\n   \"name\": \"Metadata\",\n   \"types\": [\n      {\n         \"name\": \"StateInit\",\n         \"header\": null,\n         \"fields\": [\n            {\n               \"name\": \"code\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"cell\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"data\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"cell\",\n                  \"optional\": false\n               }\n            }\n         ]\n      },\n      {\n         \"name\": \"Context\",\n         \"header\": null,\n         \"fields\": [\n            {\n               \"name\": \"bounced\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"bool\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"sender\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"address\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"value\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"int\",\n                  \"optional\": false,\n                  \"format\": 257\n               }\n            },\n            {\n               \"name\": \"raw\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"slice\",\n                  \"optional\": false\n               }\n            }\n         ]\n      },\n      {\n         \"name\": \"SendParameters\",\n         \"header\": null,\n         \"fields\": [\n            {\n               \"name\": \"bounce\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"bool\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"to\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"address\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"value\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"int\",\n                  \"optional\": false,\n                  \"format\": 257\n               }\n            },\n            {\n               \"name\": \"mode\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"int\",\n                  \"optional\": false,\n                  \"format\": 257\n               }\n            },\n            {\n               \"name\": \"body\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"cell\",\n                  \"optional\": true\n               }\n            },\n            {\n               \"name\": \"code\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"cell\",\n                  \"optional\": true\n               }\n            },\n            {\n               \"name\": \"data\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"cell\",\n                  \"optional\": true\n               }\n            }\n         ]\n      },\n      {\n         \"name\": \"Deploy\",\n         \"header\": 2490013878,\n         \"fields\": [\n            {\n               \"name\": \"queryId\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"uint\",\n                  \"optional\": false,\n                  \"format\": 64\n               }\n            }\n         ]\n      },\n      {\n         \"name\": \"DeployOk\",\n         \"header\": 2952335191,\n         \"fields\": [\n            {\n               \"name\": \"queryId\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"uint\",\n                  \"optional\": false,\n                  \"format\": 64\n               }\n            }\n         ]\n      },\n      {\n         \"name\": \"FactoryDeploy\",\n         \"header\": 1829761339,\n         \"fields\": [\n            {\n               \"name\": \"queryId\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"uint\",\n                  \"optional\": false,\n                  \"format\": 64\n               }\n            },\n            {\n               \"name\": \"cashback\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"address\",\n                  \"optional\": false\n               }\n            }\n         ]\n      },\n      {\n         \"name\": \"MetadataState\",\n         \"header\": null,\n         \"fields\": [\n            {\n               \"name\": \"avatar\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"name\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"about\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"website\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"terms\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"telegram\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"github\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"jetton\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"address\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"nft\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"address\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"hide\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"bool\",\n                  \"optional\": false\n               }\n            },\n            {\n               \"name\": \"dns\",\n               \"type\": {\n                  \"kind\": \"simple\",\n                  \"type\": \"string\",\n                  \"optional\": false\n               }\n            }\n         ]\n      }\n   ],\n   \"receivers\": [\n      {\n         \"receiver\": \"internal\",\n         \"message\": {\n            \"kind\": \"empty\"\n         }\n      },\n      {\n         \"receiver\": \"internal\",\n         \"message\": {\n            \"kind\": \"typed\",\n            \"type\": \"Deploy\"\n         }\n      }\n   ],\n   \"getters\": [\n      {\n         \"name\": \"state\",\n         \"arguments\": [],\n         \"returnType\": {\n            \"kind\": \"simple\",\n            \"type\": \"MetadataState\",\n            \"optional\": false\n         }\n      }\n   ],\n   \"errors\": {\n      \"2\": {\n         \"message\": \"Stack undeflow\"\n      },\n      \"3\": {\n         \"message\": \"Stack overflow\"\n      },\n      \"4\": {\n         \"message\": \"Integer overflow\"\n      },\n      \"5\": {\n         \"message\": \"Integer out of expected range\"\n      },\n      \"6\": {\n         \"message\": \"Invalid opcode\"\n      },\n      \"7\": {\n         \"message\": \"Type check error\"\n      },\n      \"8\": {\n         \"message\": \"Cell overflow\"\n      },\n      \"9\": {\n         \"message\": \"Cell underflow\"\n      },\n      \"10\": {\n         \"message\": \"Dictionary error\"\n      },\n      \"13\": {\n         \"message\": \"Out of gas error\"\n      },\n      \"32\": {\n         \"message\": \"Method ID not found\"\n      },\n      \"34\": {\n         \"message\": \"Action is invalid or not supported\"\n      },\n      \"37\": {\n         \"message\": \"Not enough TON\"\n      },\n      \"38\": {\n         \"message\": \"Not enough extra-currencies\"\n      },\n      \"128\": {\n         \"message\": \"Null reference exception\"\n      },\n      \"129\": {\n         \"message\": \"Invalid serialization prefix\"\n      },\n      \"130\": {\n         \"message\": \"Invalid incoming message\"\n      },\n      \"131\": {\n         \"message\": \"Constraints error\"\n      },\n      \"132\": {\n         \"message\": \"Access denied\"\n      },\n      \"133\": {\n         \"message\": \"Contract stopped\"\n      },\n      \"134\": {\n         \"message\": \"Invalid argument\"\n      },\n      \"135\": {\n         \"message\": \"Code of a contract was not found\"\n      },\n      \"136\": {\n         \"message\": \"Invalid address\"\n      },\n      \"137\": {\n         \"message\": \"Masterchain support is not enabled for this contract\"\n      }\n   },\n   \"interfaces\": [\n      \"org.ton.introspection.v0\",\n      \"org.ton.abi.ipfs.v0\",\n      \"org.ton.deploy.lazy.v0\",\n      \"org.ton.debug.v0\",\n      \"org.ton.chain.workchain.v0\"\n   ]\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "ton-vote_Metadata.pkg",
        "content": "{\"name\":\"Metadata\",\"code\":\"te6ccgECFAEAA/EAART/APSkE/S88sgLAQIBYgIDA5rQAdDTAwFxsKMB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiFRQUwNvBPhhAvhi2zxVGts88uCCyPhDAcx/AcoAVaDbPMntVAwEBQIBIAoLAaQBkjB/4HAh10nCH5UwINcLH94gwAAi10nBIbCSW3/gghCUapi2uo6n0x8BghCUapi2uvLggdM/ATHIAYIQr/kPV1jLH8s/yfhCAXBt2zx/4DBwBgHAyFALzxbJUAvMyFAJzxbJUAjMyMhQCM8WyVAHzMhQBs8WyVAFzMhQBM8WyVADzMjIUAPPFslYzMhQA88WyVjMWCDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFlADCQE6bW0ibrOZWyBu8tCAbyIBkTLiECRwAwSAQlAj2zwHAcrIcQHKAVAHAcoAcAHKAlAFINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WUAP6AnABymgjbrORf5MkbrPilzMzAXABygDjDSFus5x/AcoAASBu8tCAAcyVMXABygDiyQH7AAgAmH8BygDIcAHKAHABygAkbrOdfwHKAAQgbvLQgFAEzJY0A3ABygDiJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4nABygACfwHKAALJWMwAXiDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFhTKAMhQA88WyVjMyQHMyQHMAhG9eK7Z5tnjZdwMDQIBIBARAfTtRNDUAfhj0gABjm3UAdAB1AHQAdQB0NQB0AHUAdAB1AHQAdQw0NQB0AHUAdAB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAH6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIAdIA1DDQEJsQmmwb4A4AFlR6mFR6mFR6mFOpASL4KNcLCoMJuvLgids8C9FVCQ8A1tQB0AHUAdAB1AHQ1AHQAdQB0AHUAdAB1DDQ1AHQAdQB0AH6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgB0gDUMNAQmxCaALm7vRgnBc7D1dLK57HoTsOdZKhRtmgnCd1jUtK2R8syLTry398WI5gnAgVcAbgGdjlM5YOq5HJbLDgnAb1J3vlUWW8cdT094FWcMmgnCdl05as07LczoOlm2UZuikgCAUgSEwARsK+7UTQ0gABgAHWybuNDVpcGZzOi8vUW1ZS1VnNWE2RHM0aGhXUHVtelozR2IzR1B6ODZ1ZG12UmRxSDdrd1VObnY0dIIA==\",\"abi\":\"{\\\"name\\\":\\\"Metadata\\\",\\\"types\\\":[{\\\"name\\\":\\\"StateInit\\\",\\\"header\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"code\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"cell\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"data\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"cell\\\",\\\"optional\\\":false}}]},{\\\"name\\\":\\\"Context\\\",\\\"header\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"bounced\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"bool\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"sender\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"address\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"value\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"int\\\",\\\"optional\\\":false,\\\"format\\\":257}},{\\\"name\\\":\\\"raw\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"slice\\\",\\\"optional\\\":false}}]},{\\\"name\\\":\\\"SendParameters\\\",\\\"header\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"bounce\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"bool\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"to\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"address\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"value\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"int\\\",\\\"optional\\\":false,\\\"format\\\":257}},{\\\"name\\\":\\\"mode\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"int\\\",\\\"optional\\\":false,\\\"format\\\":257}},{\\\"name\\\":\\\"body\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"cell\\\",\\\"optional\\\":true}},{\\\"name\\\":\\\"code\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"cell\\\",\\\"optional\\\":true}},{\\\"name\\\":\\\"data\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"cell\\\",\\\"optional\\\":true}}]},{\\\"name\\\":\\\"Deploy\\\",\\\"header\\\":2490013878,\\\"fields\\\":[{\\\"name\\\":\\\"queryId\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"uint\\\",\\\"optional\\\":false,\\\"format\\\":64}}]},{\\\"name\\\":\\\"DeployOk\\\",\\\"header\\\":2952335191,\\\"fields\\\":[{\\\"name\\\":\\\"queryId\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"uint\\\",\\\"optional\\\":false,\\\"format\\\":64}}]},{\\\"name\\\":\\\"FactoryDeploy\\\",\\\"header\\\":1829761339,\\\"fields\\\":[{\\\"name\\\":\\\"queryId\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"uint\\\",\\\"optional\\\":false,\\\"format\\\":64}},{\\\"name\\\":\\\"cashback\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"address\\\",\\\"optional\\\":false}}]},{\\\"name\\\":\\\"MetadataState\\\",\\\"header\\\":null,\\\"fields\\\":[{\\\"name\\\":\\\"avatar\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"name\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"about\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"website\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"terms\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"telegram\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"github\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"jetton\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"address\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"nft\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"address\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"hide\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"bool\\\",\\\"optional\\\":false}},{\\\"name\\\":\\\"dns\\\",\\\"type\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"string\\\",\\\"optional\\\":false}}]}],\\\"receivers\\\":[{\\\"receiver\\\":\\\"internal\\\",\\\"message\\\":{\\\"kind\\\":\\\"empty\\\"}},{\\\"receiver\\\":\\\"internal\\\",\\\"message\\\":{\\\"kind\\\":\\\"typed\\\",\\\"type\\\":\\\"Deploy\\\"}}],\\\"getters\\\":[{\\\"name\\\":\\\"state\\\",\\\"arguments\\\":[],\\\"returnType\\\":{\\\"kind\\\":\\\"simple\\\",\\\"type\\\":\\\"MetadataState\\\",\\\"optional\\\":false}}],\\\"errors\\\":{\\\"2\\\":{\\\"message\\\":\\\"Stack undeflow\\\"},\\\"3\\\":{\\\"message\\\":\\\"Stack overflow\\\"},\\\"4\\\":{\\\"message\\\":\\\"Integer overflow\\\"},\\\"5\\\":{\\\"message\\\":\\\"Integer out of expected range\\\"},\\\"6\\\":{\\\"message\\\":\\\"Invalid opcode\\\"},\\\"7\\\":{\\\"message\\\":\\\"Type check error\\\"},\\\"8\\\":{\\\"message\\\":\\\"Cell overflow\\\"},\\\"9\\\":{\\\"message\\\":\\\"Cell underflow\\\"},\\\"10\\\":{\\\"message\\\":\\\"Dictionary error\\\"},\\\"13\\\":{\\\"message\\\":\\\"Out of gas error\\\"},\\\"32\\\":{\\\"message\\\":\\\"Method ID not found\\\"},\\\"34\\\":{\\\"message\\\":\\\"Action is invalid or not supported\\\"},\\\"37\\\":{\\\"message\\\":\\\"Not enough TON\\\"},\\\"38\\\":{\\\"message\\\":\\\"Not enough extra-currencies\\\"},\\\"128\\\":{\\\"message\\\":\\\"Null reference exception\\\"},\\\"129\\\":{\\\"message\\\":\\\"Invalid serialization prefix\\\"},\\\"130\\\":{\\\"message\\\":\\\"Invalid incoming message\\\"},\\\"131\\\":{\\\"message\\\":\\\"Constraints error\\\"},\\\"132\\\":{\\\"message\\\":\\\"Access denied\\\"},\\\"133\\\":{\\\"message\\\":\\\"Contract stopped\\\"},\\\"134\\\":{\\\"message\\\":\\\"Invalid argument\\\"},\\\"135\\\":{\\\"message\\\":\\\"Code of a contract was not found\\\"},\\\"136\\\":{\\\"message\\\":\\\"Invalid address\\\"},\\\"137\\\":{\\\"message\\\":\\\"Masterchain support is not enabled for this contract\\\"}},\\\"interfaces\\\":[\\\"org.ton.introspection.v0\\\",\\\"org.ton.abi.ipfs.v0\\\",\\\"org.ton.deploy.lazy.v0\\\",\\\"org.ton.debug.v0\\\",\\\"org.ton.chain.workchain.v0\\\"]}\",\"init\":{\"kind\":\"direct\",\"args\":[{\"name\":\"avatar\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"name\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"about\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"website\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"terms\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"telegram\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"github\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}},{\"name\":\"jetton\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"nft\",\"type\":{\"kind\":\"simple\",\"type\":\"address\",\"optional\":false}},{\"name\":\"hide\",\"type\":{\"kind\":\"simple\",\"type\":\"bool\",\"optional\":false}},{\"name\":\"dns\",\"type\":{\"kind\":\"simple\",\"type\":\"string\",\"optional\":false}}],\"prefix\":{\"bits\":1,\"value\":0},\"deployment\":{\"kind\":\"system-cell\",\"system\":\"te6cckECFgEAA/sAAQHAAQEFoDu3AgEU/wD0pBP0vPLICwMCAWIMBAIBIAoFAgEgCQYCAUgIBwB1sm7jQ1aXBmczovL1FtWUtVZzVhNkRzNGhoV1B1bXpaM0diM0dQejg2dWRtdlJkcUg3a3dVTm52NHSCAAEbCvu1E0NIAAYAC5u70YJwXOw9XSyuex6E7DnWSoUbZoJwndY1LStkfLMi068t/fFiOYJwIFXAG4BnY5TOWDquRyWyw4JwG9Sd75VFlvHHU9PeBVnDJoJwnZdOWrNOy3M6DpZtlGbopIAhG9eK7Z5tnjZdwTCwAWVHqYVHqYVHqYU6kDmtAB0NMDAXGwowH6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIVFBTA28E+GEC+GLbPFUa2zzy4ILI+EMBzH8BygBVoNs8ye1UEw8NAcDIUAvPFslQC8zIUAnPFslQCMzIyFAIzxbJUAfMyFAGzxbJUAXMyFAEzxbJUAPMyMhQA88WyVjMyFADzxbJWMxYINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiM8WUAMOAF4g10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIzxYUygDIUAPPFslYzMkBzMkBzAGkAZIwf+BwIddJwh+VMCDXCx/eIMAAItdJwSGwklt/4IIQlGqYtrqOp9MfAYIQlGqYtrry4IHTPwExyAGCEK/5D1dYyx/LP8n4QgFwbds8f+AwcBABOm1tIm6zmVsgbvLQgG8iAZEy4hAkcAMEgEJQI9s8EQHKyHEBygFQBwHKAHABygJQBSDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IjPFlAD+gJwAcpoI26zkX+TJG6z4pczMwFwAcoA4w0hbrOcfwHKAAEgbvLQgAHMlTFwAcoA4skB+wASAJh/AcoAyHABygBwAcoAJG6znX8BygAEIG7y0IBQBMyWNANwAcoA4iRus51/AcoABCBu8tCAUATMljQDcAHKAOJwAcoAAn8BygACyVjMAfTtRNDUAfhj0gABjm3UAdAB1AHQAdQB0NQB0AHUAdAB1AHQAdQw0NQB0AHUAdAB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAH6QAEg10mBAQu68uCIINcLCiCBBP+68tCJgwm68uCIAdIA1DDQEJsQmmwb4BQBIvgo1wsKgwm68uCJ2zwL0VUJFQDW1AHQAdQB0AHUAdDUAdAB1AHQAdQB0AHUMNDUAdAB1AHQAfpAASDXSYEBC7ry4Igg1wsKIIEE/7ry0ImDCbry4IgB+kABINdJgQELuvLgiCDXCwoggQT/uvLQiYMJuvLgiAHSANQw0BCbEJrDtO+a\"}},\"sources\":{\"contracts/messages/metadata-messages.tact\":\"Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vIE1ldGFkYXRhCi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpzdHJ1Y3QgTWV0YWRhdGFTdGF0ZSB7CiAgICBhdmF0YXI6IFN0cmluZzsKICAgIG5hbWU6IFN0cmluZzsKICAgIGFib3V0OiBTdHJpbmc7CiAgICB3ZWJzaXRlOiBTdHJpbmc7CiAgICB0ZXJtczogU3RyaW5nOwogICAgdGVsZWdyYW06IFN0cmluZzsKICAgIGdpdGh1YjogU3RyaW5nOwogICAgamV0dG9uOiBBZGRyZXNzOwogICAgbmZ0OiBBZGRyZXNzOwogICAgaGlkZTogQm9vbDsgCiAgICBkbnM6IFN0cmluZzsgICAKfQ==\",\"contracts/metadata.tact\":\"aW1wb3J0ICJAc3RkbGliL2RlcGxveSI7CmltcG9ydCAiLi9tZXNzYWdlcy9tZXRhZGF0YS1tZXNzYWdlcyI7CgoKY29udHJhY3QgTWV0YWRhdGEgd2l0aCBEZXBsb3lhYmxlIHsKCiAgICBhdmF0YXI6IFN0cmluZzsKICAgIG5hbWU6IFN0cmluZzsKICAgIGFib3V0OiBTdHJpbmc7CiAgICB3ZWJzaXRlOiBTdHJpbmc7CiAgICB0ZXJtczogU3RyaW5nOwogICAgdGVsZWdyYW06IFN0cmluZzsKICAgIGdpdGh1YjogU3RyaW5nOwogICAgamV0dG9uOiBBZGRyZXNzOwogICAgbmZ0OiBBZGRyZXNzOwogICAgaGlkZTogQm9vbDsKICAgIGRuczogU3RyaW5nOwoKICAgIGluaXQoYXZhdGFyOiBTdHJpbmcsIG5hbWU6IFN0cmluZywgYWJvdXQ6IFN0cmluZywgd2Vic2l0ZTogU3RyaW5nLCB0ZXJtczogU3RyaW5nLCB0ZWxlZ3JhbTogU3RyaW5nLCBnaXRodWI6IFN0cmluZywgCiAgICAgICAgamV0dG9uOiBBZGRyZXNzLCBuZnQ6IEFkZHJlc3MsIGhpZGU6IEJvb2wsIGRuczogU3RyaW5nKSB7CiAgICAgICAgc2VsZi5hdmF0YXIgPSBhdmF0YXI7CiAgICAgICAgc2VsZi5uYW1lID0gbmFtZTsKICAgICAgICBzZWxmLmFib3V0ID0gYWJvdXQ7CiAgICAgICAgc2VsZi53ZWJzaXRlID0gd2Vic2l0ZTsKICAgICAgICBzZWxmLnRlcm1zID0gdGVybXM7CiAgICAgICAgc2VsZi50ZWxlZ3JhbSA9IHRlbGVncmFtOwogICAgICAgIHNlbGYuZ2l0aHViID0gZ2l0aHViOwogICAgICAgIHNlbGYuamV0dG9uID0gamV0dG9uOwogICAgICAgIHNlbGYubmZ0ID0gbmZ0OwogICAgICAgIHNlbGYuaGlkZSA9IGhpZGU7CiAgICAgICAgc2VsZi5kbnMgPSBkbnM7CiAgICB9CgogICAgcmVjZWl2ZSgpIHsKICAgIH0KICAgIAogICAgZ2V0IGZ1biBzdGF0ZSgpOiBNZXRhZGF0YVN0YXRlIHsKICAgICAgICByZXR1cm4gTWV0YWRhdGFTdGF0ZSB7CiAgICAgICAgICAgIGF2YXRhcjogc2VsZi5hdmF0YXIsCiAgICAgICAgICAgIG5hbWU6IHNlbGYubmFtZSwKICAgICAgICAgICAgYWJvdXQ6IHNlbGYuYWJvdXQsCiAgICAgICAgICAgIHdlYnNpdGU6IHNlbGYud2Vic2l0ZSwKICAgICAgICAgICAgdGVybXM6IHNlbGYudGVybXMsCiAgICAgICAgICAgIHRlbGVncmFtOiBzZWxmLnRlbGVncmFtLAogICAgICAgICAgICBnaXRodWI6IHNlbGYuZ2l0aHViLAogICAgICAgICAgICBqZXR0b246IHNlbGYuamV0dG9uLAogICAgICAgICAgICBuZnQ6IHNlbGYubmZ0LAogICAgICAgICAgICBoaWRlOiBzZWxmLmhpZGUgLAogICAgICAgICAgICBkbnM6IHNlbGYuZG5zICAgICAgICAgIAogICAgICAgIH07CiAgICB9Cn0=\"},\"compiler\":{\"name\":\"tact\",\"version\":\"1.1.2\",\"parameters\":\"{\\\"entrypoint\\\":\\\"./contracts/metadata.tact\\\",\\\"options\\\":{\\\"debug\\\":true}}\"}}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "contract/contracts/messages/metadata-messages.tact",
        "content": "// ---------------------------------------\n// Metadata\n// ---------------------------------------\nstruct MetadataState {\n    avatar: String;\n    name: String;\n    about: String;\n    website: String;\n    terms: String;\n    telegram: String;\n    github: String;\n    jetton: Address;\n    nft: Address;\n    hide: Bool; \n    dns: String;   \n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "contract/contracts/metadata.tact",
        "content": "import \"@stdlib/deploy\";\nimport \"./messages/metadata-messages\";\n\n\ncontract Metadata with Deployable {\n\n    avatar: String;\n    name: String;\n    about: String;\n    website: String;\n    terms: String;\n    telegram: String;\n    github: String;\n    jetton: Address;\n    nft: Address;\n    hide: Bool;\n    dns: String;\n\n    init(avatar: String, name: String, about: String, website: String, terms: String, telegram: String, github: String, \n        jetton: Address, nft: Address, hide: Bool, dns: String) {\n        self.avatar = avatar;\n        self.name = name;\n        self.about = about;\n        self.website = website;\n        self.terms = terms;\n        self.telegram = telegram;\n        self.github = github;\n        self.jetton = jetton;\n        self.nft = nft;\n        self.hide = hide;\n        self.dns = dns;\n    }\n\n    receive() {\n    }\n    \n    get fun state(): MetadataState {\n        return MetadataState {\n            avatar: self.avatar,\n            name: self.name,\n            about: self.about,\n            website: self.website,\n            terms: self.terms,\n            telegram: self.telegram,\n            github: self.github,\n            jetton: self.jetton,\n            nft: self.nft,\n            hide: self.hide ,\n            dns: self.dns          \n        };\n    }\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      }
    ]
  }
}