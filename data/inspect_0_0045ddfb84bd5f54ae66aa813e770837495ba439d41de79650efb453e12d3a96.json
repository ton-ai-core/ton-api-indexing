{
  "code": "b5ee9c7201021c01000597000114ff00f4a413f4bcf2c80b0102012002030201480405042cf2db3cf844c0008e8830f8007ff864db3ce0db3cc002141b15160202ce0607028ba03859b679b679041082aa87f085f0a1f087f0a7f0a5f09df09bf099f097f095f08bf09ff08c1a22261a182224181622221614222014213e211c20fa20d820b620f420d220b114190201200809020120121304f5007434c0c05c6c3c903e900c36cf3e10b03ffe10d48831c16c23b40ccc74c7c87000234127265706561745f656e645f61756374696f6e8148831c16c23a0d6f6cf380cb00023411656d657267656e63795f6d6573736167658148831c16c26b50c3434c1f50c007ec0380c383e14d48431c163a10ccc76cf38006014170a0b001320840ee6b280006a6120015c318103e9f852d749c202f2f28103ea01d31f821005138d9112ba12f2f48040d721fa4030f87270f8627ff864db3c1b04e8db3c20c0018ebd30328103edf823f850bef2f28103edf842c0fff2f28103f00182103b9aca00b9f2f28103f1f84ec200f2f2f8525210c705f8435220c705b1f2e193db3ce020c002e302c003925f03e0f842c0fff823f850beb1975f038103edf2f0e0f84b82103b9aca00a05220bef84bc200b015180c0d017630328103edf842c0fff2f28103f00182103b9aca00b9f2f28103f2f823f850b9f2f2f8525210c705f8435220c705b1f84d5220c705b1f2e193db3c1704ce8f160270db3c21f86d82103b9aca00a1f86ef823f86fdb3ce0f850f851a1f823b997f850f851a0f870def84e8e95328103e8f84a5220b9f2f2f86ef86df823f86fdb3ce1f84e821005f5e100a0f84ef84ca6648064f003b6095220b9975f038103e8f2f0e002700f171b0e021adb3c01f86df86ef823f86fdb3c0f1b02f2f84ec101915be0f84ef847a1228208989680a15210bc9930018208989680a1019132e28d0a565bdd5c88189a59081a185cc81899595b881bdd5d189a5908189e48185b9bdd1a195c881d5cd95c8ba001c0ff8e1f308d06d05d58dd1a5bdb881a185cc81899595b8818d85b98d95b1b19590ba0de21c200e30f1011003870208018c8cb05f84dcf165004fa0213cb6a12cb1f01cf16c972fb0000025b001120840ee6b2802a6120001d08300024d7c0dc38167c00807c006000caf8416edded44d0d20001f862d20001f864d20001f866fa4001f86dfa0001f86ed31f01f86fd31f01f870fa4001f872d401f868d430f869f849d0d21f01f867fa4001f863fa0001f86afa0001f86bfa0001f86cd31f01f871fa4001f873d31f30f8657ff861008c20c700c0ff923070e0d31f318b663616e63656c821c705923071e08b473746f70821c705923072e08b666696e697368821c705923072e08b66465706c6f79801c7059173e07001648eab8103edf842c0fff2f28103f2f823f850b9f2f2f8276f22308103f00182103b9aca00b9f2f2f800f852db3ce0840ff2f01703f6f84ec0008e82db3ce0db3cf84e4054f00320c2008e2b70208010c8cb055007cf1622fa0216cb6a15cb1f8bf4d61726b6574706c616365206665658cf16c972fb009134e2f84e4003f00320c2008e2370208010c8cb055004cf1622fa0213cb6a12cb1f8b7526f79616c74798cf16c972fb009131e282080f42407018191a018a7020f82582105fcc3d14c8cb1fcb3ff852cf165003cf1612cb0021fa02cb00c9718018c8cb05f853cf1670fa02cb6acc82080f424070fb02c98306fb007ff8627ff866db3c1b0020f848d0fa40d31fd31ffa40d31fd31f3001e0fb02f84e58a101a120c2008e2270208010c8cb05f852cf165003fa0212cb6acb1f8b650726f6669748cf16c972fb009130e27020f82582105fcc3d14c8cb1fcb3ff84dcf165003cf1612cb008208989680fa02cb00c9718018c8cb05f853cf1670fa02cb6accc98306fb007ff862db3c1b0054f849f848f850f84ff846f844f842c8ca00ca00ca00f84dcf16f84efa02cb1fcb1ff852cf16ccccc9ed54",
  "code_hash": "1bd9c5a39bffb7a0f341588b5dd92b813a842bf65ef14109382200ceaf8f72df",
  "methods": [
    {
      "id": 72748,
      "method": "get_sale_data"
    }
  ],
  "compiler": "func",
  "source": {
    "files": [
      {
        "name": "struct/storage.func",
        "content": ";;\n;;  persistant and runtime storage Ð²escription\n;;\n\nglobal int      init?; ;; init_data safe check\nglobal int      end?; ;; end auction or not\nglobal slice    mp_addr; ;; the address of the marketplace from which the contract is deployed\nglobal int      activated?; ;; contract is activated by external message or by nft transfer\nglobal int      created_at?; ;; timestamp of created acution\nglobal int      is_canceled?; ;; auction was cancelled by owner\nglobal int      sub_gas_price_from_bid?; ;; amound of gas used for processing bif\n\nglobal cell fees_cell;\nglobal cell constant_cell;\n\n;; bids info cell (ref)\nglobal int      min_bid; ;; minimal bid\nglobal int      max_bid; ;; maximum bid\nglobal int      min_step; ;; minimum step (can be 0)\nglobal slice    last_member; ;; last member address\nglobal int      last_bid; ;; last bid amount\nglobal int      last_bid_at; ;; timestamp of last bid\nglobal int      end_time; ;; unix end time\nglobal int      step_time; ;; by how much the time increases with the new bid (e.g. 30)\n\n;; nft info cell (ref)\nglobal slice    nft_owner; ;; nft owner addres (should be sent nft if auction canceled or money from auction)\nglobal slice    nft_addr; ;; nft address\n\n\n() init_data() impure inline_ref {- save for get methods -} {\n    ifnot(null?(init?)) { return ();}\n\n    slice ds = get_data().begin_parse();\n    end? = ds~load_int(1);\n    activated? = ds~load_int(1);\n    is_canceled? = ds~load_int(1);\n    last_member = ds~load_msg_addr();\n    last_bid = ds~load_coins();\n    last_bid_at = ds~load_uint(32);\n    end_time = ds~load_uint(32);\n    nft_owner = ds~load_msg_addr();\n\n    fees_cell = ds~load_ref();\n    constant_cell = ds~load_ref();\n    slice constants = constant_cell.begin_parse();\n    sub_gas_price_from_bid? = constants~load_int(32);\n    mp_addr = constants~load_msg_addr();\n    min_bid = constants~load_coins();\n    max_bid = constants~load_coins();\n    min_step = constants~load_coins();\n    step_time = constants~load_uint(32);\n    nft_addr = constants~load_msg_addr();\n    created_at? = constants~load_uint(32);\n\n\n    init? = true;\n}\n\n() pack_data() impure inline_ref {\n    set_data(\n            begin_cell()\n                    .store_int(end?, 1) ;; + stc    1\n                    .store_int(activated?, 1) ;; activated? 1\n                    .store_int(is_canceled?, 1) ;; 1\n                    .store_slice(last_member) ;; + max    267 ($10 with Anycast = 0)\n                    .store_coins(last_bid) ;; + max    124\n                    .store_uint(last_bid_at, 32) ;; + stc    32\n                    .store_uint(end_time, 32) ;; + stc    32\n                    .store_slice(nft_owner) ;; 267\n                    .store_ref(fees_cell) ;; + ref\n                    .store_ref(constant_cell) ;; + ref\n                    .end_cell()\n            ;; total 267 + 124 + 32 + 32 + 267 + 1 + 1 + 1 = 725\n    );\n}\n\n(slice, int, int, slice, int, int) get_fees() inline_ref {\n    slice fees = fees_cell.begin_parse();\n    slice mp_fee_addr = fees~load_msg_addr();\n    int mp_fee_factor = fees~load_uint(32);\n    int mp_fee_base = fees~load_uint(32);\n    slice royalty_fee_addr = fees~load_msg_addr();\n    int royalty_fee_factor = fees~load_uint(32);\n    int royalty_fee_base = fees~load_uint(32);\n    return (\n            mp_fee_addr,\n            mp_fee_factor,\n            mp_fee_base,\n            royalty_fee_addr,\n            royalty_fee_factor,\n            royalty_fee_base\n    );\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "nft-auction-v3r2.func",
        "content": ";; TON Diamonds\n#include \"struct/op-codes.func\";\n#include \"struct/exit-codes.func\";\n#include \"struct/math.func\";\n#include \"struct/msg-utils.func\";\n#include \"struct/storage.func\";\n#include \"struct/handles.func\";\n#include \"struct/get-met.func\";\n\n() return_last_bid(int my_balance, int is_cancel_auc) impure inline_ref {\n  if (last_bid <= 0) {\n    return ();\n  }\n\n  int return_bid_amount = last_bid - sub_gas_price_from_bid?; ;; 0.009909 TON magic gas price per bid processing\n  if (return_bid_amount > (my_balance - 10000000)) { ;; - 0.01 TON\n    return_bid_amount = my_balance - 10000000;\n  }\n\n  slice msg = msg::bid_return();\n\n  if (is_cancel_auc == true) {\n    msg = msg::auc_is_canceled();\n  }\n\n  if (return_bid_amount > 0) {\n    builder return_prev_bid = begin_cell()\n            .store_uint(0x18, 6)\n            .store_slice(last_member)\n            .store_coins(return_bid_amount)\n            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n            .store_uint(0, 32)\n            .store_slice(msg);\n\n    send_raw_message(return_prev_bid.end_cell(), 2);\n  }\n}\n\n(int) get_command_code(slice s) inline_ref {\n  if (slice_empty?(s) == true) {\n    return 0;\n  }\n\n  int op = s~load_uint(32);\n  if (equal_slices(msg::cancel_msg(), s)) {\n    return 1;\n  } elseif (equal_slices(msg::stop_msg(), s)) {\n    return 2;\n  } elseif (equal_slices(msg::finish_msg(), s)) {\n    return 2; ;; 2 its ok\n  } elseif (equal_slices(msg::deploy(), s)) {\n    return 3;\n  } else {\n    return 0;\n  }\n}\n\n() recv_internal(int my_balance, int msg_value, cell in_msg_cell, slice in_msg_body) impure {\n  slice cs = in_msg_cell.begin_parse();\n  throw_if(0, cs~load_uint(4) & 1);\n\n  slice sender_addr = cs~load_msg_addr();\n  init_data();\n\n  if ((end? == true) & equal_slices(sender_addr, mp_addr)) {\n    int op = in_msg_body~load_uint(32);\n    if ((op == 0) & equal_slices(in_msg_body, msg::repeat_end_auction())) {\n      ;; special case for repeat end_auction logic if nft not transfered from auc contract\n      handle::end_auction(sender_addr);\n      return ();\n    }\n    if ((op == 0) & equal_slices(in_msg_body, msg::emergency_message())) {\n      ;; way to fix unexpected troubles with auction contract\n      ;; for example if some one transfer nft to this contract\n      var msg = in_msg_body~load_ref().begin_parse();\n      var mode = msg~load_uint(8);\n      send_raw_message(msg~load_ref(), mode);\n      return ();\n    }\n    ;; accept coins for deploy\n    return ();\n  }\n\n  if (equal_slices(sender_addr, nft_addr)) {\n    handle::try_init_auction(sender_addr, in_msg_body);\n    return ();\n  }\n\n  int command = get_command_code(in_msg_body);\n\n\n  if (command == 1) { ;; cancel command, return nft, return last bid\n    throw_if(exit::auction_end(), now() >= end_time); ;; after timeout can't cancel\n    throw_if(exit::auction_end(), end? == true); ;; already canceled/ended\n    throw_if(exit::low_amount(), msg_value < 1000000000);\n    throw_if(exit::cant_cancel_bid(), last_bid > 0); ;; can't cancel if someone already placed a bid\n    throw_unless(403, equal_slices(sender_addr, nft_owner) | equal_slices(sender_addr, mp_addr));\n    handle::cancel(sender_addr);\n    return ();\n  }\n\n  if (command == 2) { ;; stop auction\n    throw_if(exit::auction_end(), end? == true); ;; end = true mean this action already executed\n    throw_if(exit::low_amount(), msg_value < 1000000000);\n    throw_if(exit::cant_stop_time(), now() < end_time); ;; can't end auction in progress, only after end time\n    throw_unless(403, equal_slices(sender_addr, nft_owner) | equal_slices(sender_addr, mp_addr) | equal_slices(sender_addr, last_member));\n    handle::end_auction(sender_addr);\n    return ();\n  }\n\n  if (command == 3) {\n    ;; jsut accept coins\n    return ();\n  }\n\n\n  if ((end? == true) | (now() >= end_time)) {\n    throw(exit::auction_end());\n    return ();\n  }\n\n  ;; new bid\n\n  ;; max bid buy nft\n  if ((msg_value >= max_bid + 1000000000) & (max_bid > 0)) { ;; 1 TON\n    ;; end aution for this bid\n    return_last_bid(my_balance, false);\n    last_member = sender_addr;\n    last_bid = msg_value - 1000000000;\n    last_bid_at = now();\n    handle::end_auction(sender_addr);\n    return ();\n  }\n\n  ;; prevent bid at last second\n  if ((end_time - step_time) < now()) {\n    end_time += step_time;\n  }\n\n  ifnot(last_bid) {\n    throw_if(exit::low_bid(), msg_value < min_bid);\n    last_bid = msg_value;\n    last_member = sender_addr;\n    last_bid_at = now();\n    pack_data();\n    return ();\n  }\n\n  int new_min_bid = max(\n          last_bid + 100000000,\n          math::get_percent(last_bid, 100 + min_step, 100)\n  );\n  if (msg_value < new_min_bid) {\n    throw(exit::low_bid());\n    return ();\n  }\n\n  return_last_bid(my_balance, false);\n\n  last_member = sender_addr;\n  last_bid = msg_value;\n  last_bid_at = now();\n\n  pack_data();\n}\n\n{-\n    Message for deploy contract external\n-}\n() recv_external(slice in_msg) impure {\n  init_data();\n\n  ;; Activate if not activated\n  if (activated? == false) {\n    accept_message();\n    activated? = true;\n    pack_data();\n    return ();\n  }\n\n  int command = get_command_code(in_msg);\n\n  if (command == 2) { ;; stop auction\n    throw_if(exit::auction_end(), end? == true); ;; end = true mean this action already executed\n    throw_if(exit::cant_stop_time(), now() < end_time); ;; can't end auction in progress, only after end time\n\n    [int balance, _] = get_balance();\n    throw_if(exit::low_amount(), balance < 1000000000); ;; can't end auction because we don't have enough money for transfer\n\n    accept_message();\n\n    handle::end_auction(nft_owner);\n\n    return ();\n  }\n\n  throw(0xffff);\n}\n",
        "is_entrypoint": true,
        "is_std_lib": false,
        "include_in_command": true
      },
      {
        "name": "struct/math.func",
        "content": ";;\n;;  math utils\n;;\n\nint division(int a, int b) { ;; division with factor\n    return muldiv(a, 1000000000 {- 1e9 -}, b);\n}\n\nint multiply(int a, int b) { ;; multiply with factor\n    return muldiv (a, b, 1000000000 {- 1e9 -});\n}\n\nint math::get_percent(int a, int percent, int factor) {\n    if (factor == 0) {\n        return 0;\n    } else {\n        return division(multiply(a, percent), factor);\n    }\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "stdlib.fc",
        "content": ";; Standard library for funC\n;;\n\nforall X -> tuple cons(X head, tuple tail) asm \"CONS\";\nforall X -> (X, tuple) uncons(tuple list) asm \"UNCONS\";\nforall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) \"UNCONS\";\nforall X -> X car(tuple list) asm \"CAR\";\ntuple cdr(tuple list) asm \"CDR\";\ntuple empty_tuple() asm \"NIL\";\nforall X -> tuple tpush(tuple t, X value) asm \"TPUSH\";\nforall X -> (tuple, ()) ~tpush(tuple t, X value) asm \"TPUSH\";\nforall X -> [X] single(X x) asm \"SINGLE\";\nforall X -> X unsingle([X] t) asm \"UNSINGLE\";\nforall X, Y -> [X, Y] pair(X x, Y y) asm \"PAIR\";\nforall X, Y -> (X, Y) unpair([X, Y] t) asm \"UNPAIR\";\nforall X, Y, Z -> [X, Y, Z] triple(X x, Y y, Z z) asm \"TRIPLE\";\nforall X, Y, Z -> (X, Y, Z) untriple([X, Y, Z] t) asm \"UNTRIPLE\";\nforall X, Y, Z, W -> [X, Y, Z, W] tuple4(X x, Y y, Z z, W w) asm \"4 TUPLE\";\nforall X, Y, Z, W -> (X, Y, Z, W) untuple4([X, Y, Z, W] t) asm \"4 UNTUPLE\";\nforall X -> X first(tuple t) asm \"FIRST\";\nforall X -> X second(tuple t) asm \"SECOND\";\nforall X -> X third(tuple t) asm \"THIRD\";\nforall X -> X fourth(tuple t) asm \"3 INDEX\";\nforall X, Y -> X pair_first([X, Y] p) asm \"FIRST\";\nforall X, Y -> Y pair_second([X, Y] p) asm \"SECOND\";\nforall X, Y, Z -> X triple_first([X, Y, Z] p) asm \"FIRST\";\nforall X, Y, Z -> Y triple_second([X, Y, Z] p) asm \"SECOND\";\nforall X, Y, Z -> Z triple_third([X, Y, Z] p) asm \"THIRD\";\nforall X -> X null() asm \"PUSHNULL\";\nforall X -> (X, ()) ~impure_touch(X x) impure asm \"NOP\";\n\nint now() asm \"NOW\";\nslice my_address() asm \"MYADDR\";\n[int, cell] get_balance() asm \"BALANCE\";\nint cur_lt() asm \"LTIME\";\nint block_lt() asm \"BLOCKLT\";\n\nint cell_hash(cell c) asm \"HASHCU\";\nint slice_hash(slice s) asm \"HASHSU\";\nint string_hash(slice s) asm \"SHA256U\";\n\nint check_signature(int hash, slice signature, int public_key) asm \"CHKSIGNU\";\nint check_data_signature(slice data, slice signature, int public_key) asm \"CHKSIGNS\";\n\n(int, int, int) compute_data_size(cell c, int max_cells) impure asm \"CDATASIZE\";\n(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm \"SDATASIZE\";\n(int, int, int, int) compute_data_size?(cell c, int max_cells) asm \"CDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n(int, int, int, int) slice_compute_data_size?(cell c, int max_cells) asm \"SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n\n;; () throw_if(int excno, int cond) impure asm \"THROWARGIF\";\n\n() dump_stack() impure asm \"DUMPSTK\";\n\ncell get_data() asm \"c4 PUSH\";\n() set_data(cell c) impure asm \"c4 POP\";\ncont get_c3() impure asm \"c3 PUSH\";\n() set_c3(cont c) impure asm \"c3 POP\";\ncont bless(slice s) impure asm \"BLESS\";\n\n() accept_message() impure asm \"ACCEPT\";\n() set_gas_limit(int limit) impure asm \"SETGASLIMIT\";\n() commit() impure asm \"COMMIT\";\n() buy_gas(int gram) impure asm \"BUYGAS\";\n\nint min(int x, int y) asm \"MIN\";\nint max(int x, int y) asm \"MAX\";\n(int, int) minmax(int x, int y) asm \"MINMAX\";\nint abs(int x) asm \"ABS\";\n\nslice begin_parse(cell c) asm \"CTOS\";\n() end_parse(slice s) impure asm \"ENDS\";\n(slice, cell) load_ref(slice s) asm( -> 1 0) \"LDREF\";\ncell preload_ref(slice s) asm \"PLDREF\";\n;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) \"LDIX\";\n;; (slice, int) ~load_uint(slice s, int len) asm( -> 1 0) \"LDUX\";\n;; int preload_int(slice s, int len) asm \"PLDIX\";\n;; int preload_uint(slice s, int len) asm \"PLDUX\";\n;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) \"LDSLICEX\";\n;; slice preload_bits(slice s, int len) asm \"PLDSLICEX\";\n(slice, int) load_grams(slice s) asm( -> 1 0) \"LDGRAMS\";\nslice skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\n(slice, ()) ~skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\nslice first_bits(slice s, int len) asm \"SDCUTFIRST\";\nslice skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\n(slice, ()) ~skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\nslice slice_last(slice s, int len) asm \"SDCUTLAST\";\n(slice, cell) load_dict(slice s) asm( -> 1 0) \"LDDICT\";\ncell preload_dict(slice s) asm \"PLDDICT\";\nslice skip_dict(slice s) asm \"SKIPDICT\";\n\n(slice, cell) load_maybe_ref(slice s) asm( -> 1 0) \"LDOPTREF\";\ncell preload_maybe_ref(slice s) asm \"PLDOPTREF\";\nbuilder store_maybe_ref(builder b, cell c) asm(c b) \"STOPTREF\";\n\nint cell_depth(cell c) asm \"CDEPTH\";\n\nint slice_refs(slice s) asm \"SREFS\";\nint slice_bits(slice s) asm \"SBITS\";\n(int, int) slice_bits_refs(slice s) asm \"SBITREFS\";\nint slice_empty?(slice s) asm \"SEMPTY\";\nint slice_data_empty?(slice s) asm \"SDEMPTY\";\nint slice_refs_empty?(slice s) asm \"SREMPTY\";\nint slice_depth(slice s) asm \"SDEPTH\";\n\nint builder_refs(builder b) asm \"BREFS\";\nint builder_bits(builder b) asm \"BBITS\";\nint builder_depth(builder b) asm \"BDEPTH\";\n\nbuilder begin_cell() asm \"NEWC\";\ncell end_cell(builder b) asm \"ENDC\";\nbuilder store_ref(builder b, cell c) asm(c b) \"STREF\";\n;; builder store_uint(builder b, int x, int len) asm(x b len) \"STUX\";\n;; builder store_int(builder b, int x, int len) asm(x b len) \"STIX\";\nbuilder store_slice(builder b, slice s) asm \"STSLICER\";\nbuilder store_grams(builder b, int x) asm \"STGRAMS\";\nbuilder store_dict(builder b, cell c) asm(c b) \"STDICT\";\n\n(slice, slice) load_msg_addr(slice s) asm( -> 1 0) \"LDMSGADDR\";\ntuple parse_addr(slice s) asm \"PARSEMSGADDR\";\n(int, int) parse_std_addr(slice s) asm \"REWRITESTDADDR\";\n(int, slice) parse_var_addr(slice s) asm \"REWRITEVARADDR\";\n\ncell idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\n(cell, ()) ~idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\ncell udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\n(cell, ()) ~udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\ncell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETOPTREF\";\n(cell, int) idict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETREF\";\n(cell, int) udict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGETREF\";\n(cell, cell) idict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETGETOPTREF\";\n(cell, cell) udict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETGETOPTREF\";\n(cell, int) idict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDEL\";\n(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDEL\";\n(slice, int) idict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGET\" \"NULLSWAPIFNOT\";\n(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\ncell udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\n(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\ncell idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\n(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\ncell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUADD\";\n(cell, int) udict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUREPLACE\";\n(cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIADD\";\n(cell, int) idict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIREPLACE\";\ncell udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\n(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\ncell idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\n(cell, ()) ~idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\ncell dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, int) udict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUADDB\";\n(cell, int) udict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUREPLACEB\";\n(cell, int) idict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIADDB\";\n(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIREPLACEB\";\n(cell, int, slice, int) udict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) udict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREVEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREVEQ\" \"NULLSWAPIFNOT2\";\ncell new_dict() asm \"NEWDICT\";\nint dict_empty?(cell c) asm \"DICTEMPTY\";\n\n(slice, slice, slice, int) pfxdict_get?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTGETQ\" \"NULLSWAPIFNOT2\";\n(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) asm(value key dict key_len) \"PFXDICTSET\";\n(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTDEL\";\n\ncell config_param(int x) asm \"CONFIGOPTPARAM\";\nint cell_null?(cell c) asm \"ISNULL\";\n\n() raw_reserve(int amount, int mode) impure asm \"RAWRESERVE\";\n() raw_reserve_extra(int amount, cell extra_amount, int mode) impure asm \"RAWRESERVEX\";\n() send_raw_message(cell msg, int mode) impure asm \"SENDRAWMSG\";\n() set_code(cell new_code) impure asm \"SETCODE\";\n\nint random() impure asm \"RANDU256\";\nint rand(int range) impure asm \"RAND\";\nint get_seed() impure asm \"RANDSEED\";\nint set_seed() impure asm \"SETRAND\";\n() randomize(int x) impure asm \"ADDRAND\";\n() randomize_lt() impure asm \"LTIME\" \"ADDRAND\";\n\nbuilder store_coins(builder b, int x) asm \"STVARUINT16\";\n(slice, int) load_coins(slice s) asm( -> 1 0) \"LDVARUINT16\";\n\nint equal_slices (slice a, slice b) asm \"SDEQ\";\nint builder_null?(builder b) asm \"ISNULL\";\nbuilder store_builder(builder to, builder from) asm \"STBR\";",
        "is_entrypoint": false,
        "is_std_lib": true,
        "include_in_command": true
      },
      {
        "name": "struct/exit-codes.func",
        "content": ";;\n;;  custom TVM exit codes\n;;\n\nint exit::low_bid()           asm \"1000 PUSHINT\";\nint exit::auction_init()      asm \"1001 PUSHINT\";\nint exit::no_transfer()       asm \"1002 PUSHINT\";\nint exit::not_message()       asm \"1003 PUSHINT\";\nint exit::not_cancel()        asm \"1004 PUSHINT\";\nint exit::auction_end()       asm \"1005 PUSHINT\";\nint exit::already_activated() asm \"1006 PUSHINT\";\nint exit::cant_cancel_end()   asm \"1007 PUSHINT\";\nint exit::low_amount()        asm \"1008 PUSHINT\";\nint exit::cant_cancel_bid()   asm \"1009 PUSHINT\";\nint exit::cant_stop_time()    asm \"1010 PUSHINT\";",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "struct/handles.func",
        "content": "{-\n    SHOULD\n    [+] check init auction or not\n    [+] check op\n    [+] change nft owner\n    [+] change auction status\n-}\n() handle::try_init_auction(slice sender_addr, slice in_msg_body) impure inline_ref {\n  throw_if(exit::auction_init(), nft_owner.slice_bits() > 2); ;; throw if auction already init\n  throw_unless(exit::no_transfer(), in_msg_body~load_uint(32) == op::ownership_assigned()); ;; throw if it`s not ownership assigned\n  in_msg_body~skip_bits(64); ;; query id\n  nft_owner = in_msg_body~load_msg_addr();\n  end? = false;\n  activated? = true;\n  pack_data();\n}\n\n\n() handle::cancel(slice sender_addr) impure inline_ref {\n  builder nft_transfer_body = begin_cell()\n          .store_uint(op::transfer(), 32)\n          .store_uint(cur_lt(), 64) ;; query id\n          .store_slice(nft_owner) ;; return nft no creator\n          .store_slice(sender_addr) ;; response_destination\n          .store_uint(0, 1) ;; custom payload\n          .store_coins(0) ;; forward amount\n          .store_uint(0, 1); ;; forward payload\n\n  builder nft_return_msg = begin_cell()\n          .store_uint(0x18, 6)\n          .store_slice(nft_addr)\n          .store_coins(0)\n          .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n          .store_ref(nft_transfer_body.end_cell());\n\n  raw_reserve(1000000, 0); ;; reserve some bebras  ð\n\n  send_raw_message(nft_return_msg.end_cell(), 128);\n  end? = true;\n  is_canceled? = true;\n  pack_data();\n}\n\n() handle::end_auction(slice sender_addr) impure inline_ref {\n  if (last_bid == 0) { ;; just return nft\n    handle::cancel(sender_addr);\n    return ();\n  }\n\n  var (\n          mp_fee_addr,\n          mp_fee_factor,\n          mp_fee_base,\n          royalty_fee_addr,\n          royalty_fee_factor,\n          royalty_fee_base\n  ) = get_fees();\n\n  int mp_fee = math::get_percent(last_bid, mp_fee_factor, mp_fee_base);\n\n  if (mp_fee > 0) {\n    builder mp_transfer = begin_cell()\n            .store_uint(0x10, 6) ;; 0 (int_msg_info) 1 (ihr_disabled) 1 (no bounces) 00 (address)\n            .store_slice(mp_fee_addr)\n            .store_coins(mp_fee)\n            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n            .store_uint(0, 32)\n            .store_slice(msg::mp_msg());\n\n    send_raw_message(mp_transfer.end_cell(), 2);\n  }\n\n  int royalty_fee = math::get_percent(last_bid, royalty_fee_factor, royalty_fee_base);\n\n  if (royalty_fee > 0) {\n    builder royalty_transfer = begin_cell()\n            .store_uint(0x10, 6) ;; 0 (int_msg_info) 1 (ihr_disabled) 1 (no bounces) 00 (address)\n            .store_slice(royalty_fee_addr)\n            .store_coins(royalty_fee)\n            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n            .store_uint(0, 32)\n            .store_slice(msg::royalty_msg());\n\n    send_raw_message(royalty_transfer.end_cell(), 2);\n  }\n\n  raw_reserve(1000000, 0); ;; reserve some bebras  ð\n\n  int profit = last_bid - mp_fee - royalty_fee;\n  if (profit > 0) {\n    builder prev_owner_msg = begin_cell()\n            .store_uint(0x10, 6) ;; 0 (int_msg_info) 1 (ihr_disabled) 1 (no bounces) 00 (address)\n            .store_slice(nft_owner)\n            .store_coins(profit)\n            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n            .store_uint(0, 32)\n            .store_slice(msg::profit_msg());\n\n    send_raw_message(prev_owner_msg.end_cell(), 2);\n  }\n\n  builder nft_transfer_body = begin_cell()\n          .store_uint(op::transfer(), 32)\n          .store_uint(cur_lt(), 64) ;; query id\n          .store_slice(last_member) ;; new owner\n          .store_slice(sender_addr) ;; response_destination\n          .store_uint(0, 1) ;; custom payload\n          .store_coins(10000000) ;; forward amount  0.01 ton\n          .store_uint(0, 1); ;; forward payload\n  builder nft_transfer = begin_cell()\n          .store_uint(0x18, 6)\n          .store_slice(nft_addr)\n          .store_coins(0)\n          .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n          .store_ref(nft_transfer_body.end_cell());\n  send_raw_message(nft_transfer.end_cell(), 128);\n  end? = true;\n  pack_data();\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "struct/msg-utils.func",
        "content": ";;\n;;  text constants for msg comments\n;;\n\nslice msg::cancel_msg()     asm \"<b 124 word cancel| $, b> <s PUSHSLICE\";\nslice msg::stop_msg()       asm \"<b 124 word stop| $, b> <s PUSHSLICE\";\nslice msg::finish_msg()       asm \"<b 124 word finish| $, b> <s PUSHSLICE\";\nslice msg::deploy()       asm \"<b 124 word deploy| $, b> <s PUSHSLICE\";\n\nslice msg::return_msg()     asm \"<b 124 word Your transaction has not been accepted.| $, b> <s PUSHSLICE\";\nslice msg::bid_return()     asm \"<b 124 word Your bid has been outbid by another user.| $, b> <s PUSHSLICE\";\nslice msg::mp_msg()         asm \"<b 124 word Marketplace fee| $, b> <s PUSHSLICE\";\nslice msg::royalty_msg()    asm \"<b 124 word Royalty| $, b> <s PUSHSLICE\";\nslice msg::profit_msg()     asm \"<b 124 word Profit| $, b> <s PUSHSLICE\";\nslice msg::auc_is_canceled() asm \"<b 124 word Auction has been cancelled.| $, b> <s PUSHSLICE\";\n\nslice msg::repeat_end_auction()     asm \"<b 124 word repeat_end_auction| $, b> <s PUSHSLICE\";\nslice msg::emergency_message()      asm \"<b 124 word emergency_message| $, b> <s PUSHSLICE\";",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "struct/op-codes.func",
        "content": ";;\n;;  op codes\n;;\n\nint op::transfer()              asm \"0x5fcc3d14 PUSHINT\";\nint op::ownership_assigned()    asm \"0x05138d91 PUSHINT\";",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "struct/get-met.func",
        "content": ";; 1  2    3    4      5      6      7    8      9    10     11   12   13     14   15   16   17   18   19   20\n(int, int, int, slice, slice, slice, int, slice, int, slice, int, int, slice, int, int, int, int, int, int, int) get_sale_data() method_id {\n  init_data();\n\n  var (\n          mp_fee_addr,\n          mp_fee_factor,\n          mp_fee_base,\n          royalty_fee_addr,\n          royalty_fee_factor,\n          royalty_fee_base\n  ) = get_fees();\n\n  return (\n          0x415543, ;; 1 nft aucion (\"AUC\")\n          end?, ;; 2\n          end_time, ;; 3\n          mp_addr, ;; 4\n          nft_addr, ;; 5\n          nft_owner, ;; 6\n          last_bid, ;; 7\n          last_member, ;; 8\n          min_step, ;; 9\n          mp_fee_addr, ;; 10\n          mp_fee_factor, mp_fee_base, ;; 11, 12\n          royalty_fee_addr, ;; 13\n          royalty_fee_factor, royalty_fee_base, ;; 14, 15\n          max_bid, ;; 16\n          min_bid, ;; 17\n          created_at?, ;; 18\n          last_bid_at, ;; 19\n          is_canceled? ;; 20\n  );\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      }
    ]
  }
}