{
  "code": "b5ee9c72010232010009fe000114ff00f4a413f4bcf2c80b0102016202030202ca0e0f0201200405020120060702012008090243b8408db3cf8276f105320a0db3c5aa9b417f84f13a1821809c765240058a058a001810290109b8916db3c8290201200a0b02cdbbd35eda2edfbdb3cf841c000917fe1f8276f10821809502f900001821077359400a101a182103d648d80a12082202d79883d2000b992307fe0f84f8ea8800ff833d0d31f31d31fd31fd70b1f0132f86edb3c30f85058bc01f82303a112b9b094307fdb31e0de8102f0141b6681b679f083f085f091f093f095f097f099f09bf09df09ff0a1f0a9f0abf0870100201620c0d0030aa1d829035d676f6ac6e35e755ea3c4d7d7cf577627b1cf00138ab05800ff833d0d31f31d31fd31fd70b1f0131db3c30315203a159a12f04f7d407434c0fe900c36cf005c6c23db4cc835d2708fe3b7e00835c874c7c04c482084139cdd12ee88f6cf2c27d7c0fe107000a4dc3e1864dffe18b8a38e3e1544f1c1638b88608437f7289eeea6cc7e13c0683e1bfe08fe1c2385cc20843990b2596ea77e10700064dc3e1864dffe18b8b7b8a456f8b8a497c0f8b6cf2101230110103aca03100e0ed44d0d30701f861d20001f862d20001f868fa0001f869d32f01f86ad3ff01f86bd30701f86cd32f01f86dd32f01f86efa0001f86fd32f01f870fa4001f863d32f01f864d31701f87120f872d430d0d31f01f873fa4001f874fa4001f875fa4001f865d430d0fa4001f876fa4030f8670476e001d31fd33f5923db3c8ead218210d372158cba8e215f05f841c0058e168212cb417800f84fa082100ee6b280a0bc9370f861de9130e2e30ee30d121314150108db3cc7052b03ba2182101690c604ba8f512182107b4b42e6ba8e1310355f05f856018200928302c705f2f47ff8688f31218210e8a0abfeba8e1310355f05f856018200928302c705f2f470f8688f11218210270695fbba8e855b6c22db3ce30ee2e2e30d16171802f46c2232f800208210f96f7324ba8ec370f861f84f8eb8821077359400f84fa013be8ea5f855f84fc88210dfdca27b580402cb1fcb3fc912801871db3c70f86f70f87070f86970f86a943075f861e2926c21e28e1d6c21208210fffffffeba8e10f841c004967ff86275f861937ff862e2dee2f841c0029130e30d2d2e0104db3c300048f84312018200928302c705f2f48200a000f823f84482015180a0bcf2f4d307d43001fb00034821821079e7c016ba8e855b6c22db3c8f122182107247e7a5ba8e8610355f05db3ce30ee2191a1b00865b33f855018200928302c705f2f4f85094f823f870df01fa00f84f22a0f86fd18200fa05f8518317a013a9b41782103b9aca00a0b9f2f470f871f841c0019370f861de002cf84512018200928302c705f2f4f823f864fa4030f863001ef845018200928302c705f2f470f86203ec21821055c26cd5ba8ed7345b7582009284f84158baf2f4f845018200928302c705f2f401821077359400a182100ee6b280a1f84fb608f855c88210dfdca27b580402cb1fcb3fc9542220801871db3cf84f01a1f86ff84fc0009670f87070f861de8f12218210139a1b4eba8e8610355f05db3ce30ee22d1c1d001ef847018200928302c705f2f47ff862033c82009285f842f2f2218210eb373a05ba8f0a218210f0fd2250bae30fe30d1e1f2003dc5b327382009284f84158baf2f401d18200f700f84cc103f2f4db3c31f9008200f701f84b22bdf2f4f86bf84ca4f86cf823f86d800ff833d0d31f31d31fd31fd70b1f013031f84e01b609f86ef82301a1810258b9f84fc000b18e9131f8545210018200928302c705f2f4db3ce30e2f282103ca2182108efed779ba8ece3133337082009284f84158baf2f48200f800f84ff2f2f854018200928302c705f2f401fa00d18200f80121c200f2f482107735940072fb02f854c8821030026327580402cb1fcb3fc9801070db3c8f0a2182104e73744bbae30fe22d222303e4317382009284f84158baf2f401d18200f600f84cc201f2f4f823f84da1f84ea18200f601f84cc20222c23cb1f2f48200f6022482103d648d80bef2f4c8821047657424580302cb1fcb3fc9db3c705880188040db3c74f861810258b9f84fc000b19e6c21f854018200928302c705f2f4e30e2b2d2c0156018212540be400a1821077359400be8e97f8545210c70591308e8c8212540be4006d801072db3ce29130e22d03f4317082009284f84158baf2f4f85413018200928302c705f2f48200f90022f2f48200f9010382103d648d80be13f2f401fa0020db3cf86a2182103d648d80a1f8698200f9022282202d79883d2000bef2f4821809c76524008200f9035353a122bef2f4800ff833d0d31f31d31fd31fd70b1f0132f86edb3cf84f242f2503b02182106335b11aba8f4c34318210ed7378a6ba8f397082009284f84158baf2f48200fb00f84ff2f4db3c5b8200fb01f8505220bcf2f4f82301a1821077359400f84fa05240be955f0475f861e30d965f03840ff2f0e2e30d2f26270026d3ff31d31f01f86ad31f31d3ff31d431d1f84a03a88e148200f904f85024bc03f82306a115b912b013f2f4923330e2f84f17a158a18200f905f849db3c12bef2f472f861f900f86b70f86c03f86ddb3cc882104e73744b580402cb1fcb3f5003cf16c912801871db3c292b2d03d2f855f84fc88210dfdca27b580602cb1fcb3fc94140801871db3c70f86f70f87001810258b98e9131f8545210018200928302c705f2f4db3c8eae821077359400f84fa08212540be400a012be8e97f8545210c70591308e8c8212540be4006d801072db3ce29130e2e22d282d03fc317082009284f84158baf2f4f85413018200928302c705f2f48200f6040382103b9aca00be13f2f421fa0031fa00d3170101d120f8718200fa00f848f2f48200fa01f84ff2f2800ff833d0d31f31d31fd31fd70b1f0131db3c30318200fa0221f82305a114bc13f2f48200fa0302f82302a1b9f2f45314a0db3c59a9b4172f292a0110706d80108042db3c2d00848028f833206e985b8218178411b200e0d0d30731fa00d31fd30fd30fd30f31d30f31d30fd30f305053a8ab075033a8ab075023a8ab0759a8ab075220a9b41fa0b608017af84f15a18200fa04821809c76524005003a05005a014be13f2f4c88210e642c965580302cb1fcb3f01cf16f852cf16c9f855705880188040db3c71f8612d001671f833d0d70bff7f01f032015859a18212540be400a1821077359400be8e97f8545210c70591308e8c8212540be4006d801072db3ce29130e22d0046226eb3c8500301cb055005cf165003fa0202957158cb6acc95307001cb6ae2c901fb000152208210ee6f454cba943070f8618e998210f374484cba8e8b73f861db3c6c21f900f86b937ff862e2e22f00268022f83320d0d30701c012f289d31fd31f30580090f84cf84bf841c8cb07f84201ca00f84801ca00f849fa02f84a01cb2fcbffcb07f84d01cb2ff84e01cb2ff84ffa02f85001cb2ff843cf16f84401cb2ff85101cb17f852cf16c9ed54001874c8cb025801ca07cbffc9d0",
  "code_hash": "dd3ce98db487c7585803933bffba7a57eb4e663099059d08b83db0b4ce060793",
  "methods": [
    {
      "id": 103232,
      "method": "get_validator_controller_data"
    }
  ],
  "compiler": "func",
  "source": {
    "files": [
      {
        "name": "asserts.func",
        "content": "#include \"errors.func\";\n\n() assert_sender!(slice sender, slice required_address) impure inline {\n  throw_unless(error::wrong_sender, equal_slice_bits(sender, required_address));\n}\n\nglobal int state;\nglobal int halted?;\nconst int state::HALTED = 0xff;\n\n() assert_not_halted!() impure inline {\n  throw_if(error::halted, halted?);\n}\n\n() assert_state!(int expected) impure inline {\n  throw_unless(error::wrong_state, state == expected);\n}\n() assert_1of2_state!(int expected1, int expected2) impure inline {\n  throw_unless(error::wrong_state, (state == expected1) | (state == expected2));\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "messages.func",
        "content": ";; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000\nconst int msgflag::NON_BOUNCEABLE = 0x10;\nconst int msgflag::BOUNCEABLE = 0x18;\n\nconst int sendmode::REGULAR = 0;\nconst int sendmode::PAY_FEES_SEPARETELY = 1;\nconst int sendmode::IGNORE_ERRORS = 2;\nconst int sendmode::DESTROY = 32;\nconst int sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE = 64;\nconst int sendmode::CARRY_ALL_BALANCE = 128;\n\nbuilder store_msg_flags(builder b, int msg_flag) inline { return b.store_uint(msg_flag, 6); }\n\n{-\n  Helpers below fill in default/overwritten values of message layout:\n  Relevant part of TL-B schema:\n  ... other:ExtraCurrencyCollection ihr_fee:Grams fwd_fee:Grams created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;\n  bits      1                               4             4                64                32                            \n  ... init:(Maybe (Either StateInit ^StateInit))  body:(Either X ^X) = Message X;\n  bits      1      1(if prev is true)                   1\n\n-}\n\nbuilder store_msgbody_prefix_stateinit(builder b, cell state_init, cell ref) inline {\n    return b.store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1).store_ref(state_init).store_ref(ref);\n}\n\nbuilder store_msgbody_prefix_stateinit_slice(builder b, cell state_init) inline {\n    return b.store_uint(4 + 2 + 0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1).store_ref(state_init);\n}\n\nbuilder store_msgbody_prefix_slice(builder b) inline {\n    return b.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);\n}\nbuilder store_msgbody_prefix_ref(builder b, cell ref) inline {\n    return b.store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1).store_ref(ref);\n}\n\n{-\n\naddr_std$10 anycast:(Maybe Anycast) \n   workchain_id:int8 address:bits256  = MsgAddressInt;\n-}\n\nbuilder store_masterchain_address(builder b, int address_hash) inline {\n  return b.store_uint(4, 3).store_workchain(MASTERCHAIN).store_uint(address_hash, 256);\n}\n\n\n() send_msg(slice to_address, int amount, cell payload, int flags, int send_mode) impure inline_ref {\n    int has_payload = ~ cell_null?(payload);\n\n    builder msg = begin_cell()\n        .store_msg_flags(flags)\n        .store_slice(to_address)\n        .store_coins(amount);\n\n    if (has_payload) {\n        msg = msg.store_msgbody_prefix_ref(payload);\n    } else {\n        msg = msg.store_msgbody_prefix_slice();\n    }\n\n    send_raw_message(msg.end_cell(), send_mode);\n}\n\n() send_msg_builder(slice to_address, int amount, builder payload, int flags, int send_mode) impure inline_ref {\n    int payload_length = payload.null?() ? 0 : payload.builder_bits();\n\n    builder msg = begin_cell()\n        .store_msg_flags(flags)\n        .store_slice(to_address)\n        .store_coins(amount);\n\n    if (payload_length + msg.builder_bits() > 1023 - (1 + 4 + 4 + 64 + 32 + 1 + 1)) {\n        msg = msg.store_msgbody_prefix_ref(begin_cell().store_builder(payload).end_cell());\n    } else {\n        msg = msg.store_msgbody_prefix_slice()\n                 .store_builder(payload);\n    }\n\n    send_raw_message(msg.end_cell(), send_mode);\n}\n\n() send_excesses(slice sender_address) impure inline_ref {\n    send_msg(\n      sender_address,\n      0, ;; value\n      null(),\n      msgflag::NON_BOUNCEABLE,\n      sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE | sendmode::IGNORE_ERRORS); ;; non-bouneable, remaining inbound message amount, fee deducted from amount, ignore errors\n}\n\n\n\n() emit_log (int topic, builder data) impure inline {\n    ;; 1023 - (4+2+9+256+64+32+2) = 654 bit free\n\n    var msg = begin_cell()\n            .store_uint (12, 4)         ;; ext_out_msg_info$11 src:MsgAddressInt ()\n            .store_uint (1, 2)          ;; addr_extern$01\n            .store_uint (256, 9)        ;; len:(## 9)\n            .store_uint(topic, 256); ;; external_address:(bits len)\n\n    if (data.builder_bits() > 1023 - (4 + 2 + 9 + 256 + 64 + 32 + 2) ) {\n        msg = msg.store_uint(1, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either\n                .store_ref(begin_cell().store_builder(data).end_cell());\n    } else {\n        msg = msg.store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either\n                .store_builder(data);\n    }\n\n    send_raw_message(msg.end_cell(), sendmode::REGULAR);\n}\n\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "types.func",
        "content": ";; general\n(slice, (int)) ~load_timestamp(slice s) inline { return s.load_uint(48); }\nbuilder store_timestamp(builder b, int timestamp) inline { return b.store_uint(timestamp, 48); }\n\n(slice, (int)) ~load_bool(slice s) inline { return s.load_int(1); }\nbuilder store_bool(builder b, int flag) inline { return b.store_int(flag, 1); }\n\n(slice, (int)) ~load_workchain(slice s) inline { return s.load_int(8); }\nbuilder store_workchain(builder b, int wc) inline { return b.store_int(wc, 8); }\nconst int MASTERCHAIN = -1;\nconst int BASECHAIN = 0;\n\n;; Op-codes\n\n(slice, (int)) ~load_op(slice s) inline { return s.load_uint(32); }\n(slice, (int)) ~load_query_id(slice s) inline { return s.load_uint(64); }\n(slice, (int, int)) ~load_body_header(slice s) inline {\n    int op = s~load_uint(32);\n    int query_id = s~load_uint(64);\n    return (s, (op, query_id));\n}\n\n\n(slice, ()) ~skip_bounce(slice s) inline { s~skip_bits(32); return (s, ());}\n\nbuilder store_op(builder b, int op) inline { return b.store_uint(op, 32); }\nbuilder store_query_id(builder b, int query_id) inline { return b.store_uint(query_id, 64); }\nbuilder store_body_header(builder b, int op, int query_id) inline {\n    return b.store_uint(op, 32)\n            .store_uint(query_id, 64);\n}\n\n;; Pool types\n\n(slice, (int)) ~load_share(slice s) inline { return s.load_uint(24); }\nbuilder store_share(builder b, int share) inline { return b.store_uint(share, 24); }\nconst int SHARE_BASIS = 256 * 256 * 256; ;; 24 bit\n\n\n(slice, (int)) ~load_controller_id(slice s) inline { return s.load_uint(32); }\nbuilder store_controller_id(builder b, int id) inline { return b.store_uint(id, 32); }\n\n\n(slice, (int)) ~load_signed_coins(slice s) inline {\n    int sign = s~load_int(1) * 2 + 1;\n    int coins = s~load_coins();\n    return (s, coins * sign);\n}\nbuilder store_signed_coins(builder b, int amount) inline {\n    return b.store_bool(amount < 0).store_coins(abs(amount));\n}\n\nconst int ADDR_SIZE = 256; ;; bits\n\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "contracts/controller.func",
        "content": ";; The validator has his own wallet on which he holds his own coins for operating.\n;; From this wallet (s)he sends commands to this validator-controller (mostly `new_stake`, `update_validator_set` and `recover_stake`).\n;; validator-controller contract must be in masterchain.\n;; The validator in most cases have two validator-controllers (for even and odd validation rounds).\n\n\n{-\n TODO:\n   1) move config_param(1) to constants\n   2) elector_address() can be optimized\n-}\n\n#include \"stdlib.func\";\n#include \"types.func\";\n#include \"op-codes.func\";\n#include \"messages.func\";\n#include \"errors.func\";\n#include \"asserts.func\";\n#include \"network_config_utils.func\";\n#include \"sudoer_requests.func\";\n#include \"governor_requests.func\";\n#include \"halter_requests.func\";\n\n\nconst int ONE_TON = 1000000000;\nconst int ELECTOR_OPERATION_VALUE = 103 * ONE_TON / 100 ;\nconst int MIN_REQUEST_LOAN_VALUE = ONE_TON ; ;; should cover controller and pool gas\nconst int MIN_TONS_FOR_STORAGE = 2 * ONE_TON; ;; 2 TON\nconst int DEPOSIT_FEE = ONE_TON / 4; ;; 0.25 TON\nconst int WITHDRAWAL_FEE = ONE_TON / 4; ;; 0.25 TON\nconst int MIN_STAKE_TO_SEND = 50000 * ONE_TON; ;; 50 000 TON\n\n;; Time in seconds for validator to make mandatory actions, such as\n;; recover stake or update hash\nconst int GRACE_PERIOD = 600;\n;; Fines for validator for overdue actions\nconst int HASH_UPDATE_FINE = 10 * ONE_TON;\nconst int STAKE_RECOVER_FINE = 10 * ONE_TON;\n\n;; Whole storage is put to global variables\n\nglobal int state;\nglobal int halted?;\nglobal int approved?;\n\nglobal int stake_amount_sent;\nglobal int stake_at;\n\nglobal int saved_validator_set_hash;\nglobal int validator_set_changes_count;\nglobal int validator_set_change_time;\nglobal int stake_held_for;\n\nglobal int borrowed_amount;\nglobal int borrowing_time;\n\nglobal slice sudoer;\nglobal int sudoer_set_at;\n\nglobal int max_expected_interest;\n\nglobal slice static_data;\nglobal int controller_id;\nglobal slice validator;\nglobal slice pool;\nglobal slice governor;\nglobal slice halter;\nglobal slice approver;\n\n\n\nconst int state::REST = 0;\nconst int state::SENT_BORROWING_REQUEST = 1;\nconst int state::SENT_STAKE_REQUEST = 2;\nconst int state::FUNDS_STAKEN = 3;\nconst int state::SENT_RECOVER_REQUEST = 4;\nconst int state::INSOLVENT = 5;\n\n\n() save_data() impure;\n() load_data() impure;\n\nslice elector_address();\nint is_elector_address(slice address);\n;;int max_recommended_punishment_for_validator_misbehaviour(int stake);\n;;(int, int, int) get_validator_config();\n;;int get_stake_held_for();\n;;int get_elections_start_before();\n;;(int, int, cell) get_current_validator_set();\nint check_new_stake_msg(slice cs);\n\n() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {\n\n    slice cs = in_msg_full.begin_parse();\n    int flags = cs~load_uint(4);\n\n    slice sender_address = cs~load_msg_addr();\n    load_data();\n    if (flags & 1) { ;; bounced messages\n        if (in_msg_body.slice_bits() >= 64) {\n            in_msg_body~skip_bounce(); ;; skip 0xFFFFFFFF bounced prefix\n            int op = in_msg_body~load_op();\n            if ((op == elector::new_stake) & (is_elector_address(sender_address))) {\n                ;; `new_stake` from nominator-pool should always be handled without throws by elector\n                ;; because nominator-pool do `check_new_stake_msg` and `msg_value` checks before sending `new_stake`.\n                ;; If the stake is not accepted elector will send `new_stake_error` response message.\n                ;; Nevertheless we do process theoretically possible bounced `new_stake`.\n\n                if (state == state::SENT_STAKE_REQUEST) {\n                    state = state::REST;\n                } else {\n                    halted? = true;\n                }\n            } elseif (equal_slice_bits(sender_address, pool)) {\n              if(op == pool::loan_repayment) {\n                borrowed_amount += msg_value;\n                borrowing_time = now();\n              } elseif (op == pool::request_loan) {\n                if (state == state::SENT_BORROWING_REQUEST) {\n                  state = state::REST;\n                } else {\n                  halted? = true;\n                }\n              }\n            }\n        }\n\n        save_data();\n        return (); ;; ignore other bounces messages\n    }\n\n    (int op, int query_id) = in_msg_body~load_body_header();\n\n    if (is_elector_address(sender_address)) { ;; response from elector\n\n            accept_message();\n\n            if (op == elector::recover_stake_ok) {\n                ;; Note, this request will be processed even in halted state\n                state = state::REST;\n                if( borrowed_amount ) {\n                  if(balance >= MIN_TONS_FOR_STORAGE + borrowed_amount) {\n                    send_msg(pool,\n                             borrowed_amount, ;; TODO add fee???\n                             begin_cell().store_body_header(pool::loan_repayment, query_id).end_cell(),\n                             msgflag::BOUNCEABLE,\n                             sendmode::PAY_FEES_SEPARETELY); ;; remaining inbound message amount, fee deducted from\n                    borrowed_amount = 0;\n                    borrowing_time = 0;\n                    stake_amount_sent = 0;\n                    stake_at = 0;\n                  } else {\n                    state = state::INSOLVENT;\n                  }\n                }\n            } elseif (op == elector::recover_stake_error) {\n                if(state == state::SENT_RECOVER_REQUEST) {\n                    ;; The only case when we get elector::recover_stake_error is credits = 0\n                    ;; in this case we should not return state to FUNDS_STAKEN to avoid\n                    ;; further balance depletion due to repetitive STAKE_RECOVER_FINE\n                    halted? = true;\n                    state = state::INSOLVENT;\n                } else {\n                    halted? = true;\n                }\n            }\n\n            if (state == state::SENT_STAKE_REQUEST) {\n                if (op == elector::new_stake_error) { ;; error when new_stake; stake returned\n                    state = state::REST;\n                } elseif (op == elector::new_stake_ok) {\n                    state = state::FUNDS_STAKEN;\n                    ;; update saved_validator_set_hash in case it have changed\n                    ;; while new_stake message reached the elector\n                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();\n                    saved_validator_set_hash = cell_hash(vset);\n                } else {\n                    halted? = true;\n                }\n            }\n\n            ;; else just accept coins from elector\n\n    } else {\n\n            if (op == controller::top_up) {\n                if(state == state::INSOLVENT) {\n                    ;; we add WITHDRAWAL_FEE below to ensure there is enough money to process\n                    ;; and send bounty in return_unused_loan\n                    if (balance > MIN_TONS_FOR_STORAGE + STAKE_RECOVER_FINE + borrowed_amount + WITHDRAWAL_FEE) {\n                        state = state::REST;\n                    }\n                }\n            } elseif (op == controller::credit) {\n                assert_sender!(sender_address, pool);\n                ;; borrowed_amount includes interest\n                ifnot(borrowing_time) {\n                  borrowing_time = now();\n                }\n                int credit_amount = in_msg_body~load_coins();\n                borrowed_amount += credit_amount;\n                in_msg_body.end_parse();\n                throw_unless(error::credit_interest_too_high, credit_amount < muldiv(msg_value, max_expected_interest + SHARE_BASIS, SHARE_BASIS) + ONE_TON);\n                max_expected_interest = 0;\n                if(state == state::SENT_BORROWING_REQUEST) {\n                  state = state::REST;\n                }\n            } elseif (op == controller::approve) {\n                assert_sender!(sender_address, approver);\n                approved? = true;\n            }  elseif (op == controller::disapprove) {\n                assert_sender!(sender_address, approver);\n                approved? = false;\n            } elseif (op == sudo::send_message) {\n                process_sudo_request(sender_address, in_msg_body);\n            } elseif (op == governor::set_sudoer) {\n                process_set_sudo_request(sender_address, in_msg_body);\n            }  elseif (op == governor::unhalt) {\n                process_unhalt_request(sender_address);\n            }  elseif (op == governor::return_available_funds) {\n                assert_state!(state::INSOLVENT);\n                assert_sender!(sender_address, governor);\n                int available_funds = balance - MIN_TONS_FOR_STORAGE - WITHDRAWAL_FEE;\n                available_funds = min( available_funds, borrowed_amount);\n                send_msg(pool,\n                        available_funds,\n                        begin_cell().store_body_header(pool::loan_repayment, query_id).end_cell(),\n                        msgflag::BOUNCEABLE,\n                        sendmode::PAY_FEES_SEPARETELY); ;; remaining inbound message amount, fee deducted from\n                borrowed_amount -= available_funds;\n                if(borrowed_amount == 0) {\n                    borrowing_time = 0;\n                    state = state::REST;\n                }\n            }  elseif (op == halter::halt) {\n                process_halt_request(sender_address);\n            }  else {\n                ;; actions above considered safe or critical enough to be processed in halted regime\n                ;; actions below are only allowed for not halted controller\n                assert_not_halted!();\n                if (op == controller::recover_stake) { ;; send recover_stake to elector\n                    assert_state!(state::FUNDS_STAKEN);\n                    in_msg_body.end_parse();\n                    ;; We need to take all credits from the elector at once,\n                    ;; because if we do not take all at once, then it will be processed as a fine by pool.\n                    ;; In the elector, credits (`credit_to`) are accrued in three places:\n                    ;; 1) return of surplus stake in elections (`try_elect`)\n                    ;; 2) reward for complaint when punish (`punish`) - before unfreezing\n                    ;; 3) unfreeze round (`unfreeze_without_bonuses`/`unfreeze_with_bonuses`)\n                    ;; We need to be guaranteed to wait for unfreezing round and only then send `recover_stake`.\n                    ;; So we are waiting for the change of 3 validator sets.\n\n                    ;; ADDITIONAL NOTE:\n                    ;; In a special case (if the network was down), the config theoretically can refuse the elector to save a new round after election - https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/config-code.fc#L494\n                    ;; and the elector will start a new election - https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L364\n                    ;; in this case, our pool will have to skip the round, but it will be able to recover stake later\n\n                    throw_unless(error::too_early_stake_recover_attempt_count, validator_set_changes_count >= 2);\n                    int time_since_unfreeze = now() - validator_set_change_time - stake_held_for;\n                    throw_unless(error::too_early_stake_recover_attempt_time, (validator_set_changes_count > 2) | (time_since_unfreeze > 60));\n                    ;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L887\n                    throw_unless(error::too_low_recover_stake_value, msg_value >= ELECTOR_OPERATION_VALUE);\n\n                    cell payload = begin_cell().store_body_header(elector::recover_stake, query_id).end_cell();\n                    send_msg(elector_address(),\n                             0, ;; amount\n                             payload,\n                             msgflag::BOUNCEABLE,\n                             sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE); ;; remaining inbound message amount, fee deducted from amount, revert on errors\n                    state = state::SENT_RECOVER_REQUEST;\n                    if( (time_since_unfreeze < GRACE_PERIOD) | (borrowed_amount == 0) ) {\n                      assert_sender!(sender_address, validator);\n                    } else {\n                      if(balance - msg_value - STAKE_RECOVER_FINE >= MIN_TONS_FOR_STORAGE) {\n                        ifnot( equal_slice_bits(sender_address, validator)) {\n                          send_msg(sender_address, STAKE_RECOVER_FINE, null(), msgflag::NON_BOUNCEABLE, sendmode::IGNORE_ERRORS);\n                        }\n                      }\n                    }\n\n                } elseif (op == controller::update_validator_hash) {\n                    assert_state!(state::FUNDS_STAKEN);\n                    in_msg_body.end_parse();\n                    throw_unless(error::too_much_validator_set_counts, validator_set_changes_count < 3);\n                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();\n                    int current_hash = cell_hash(vset);\n                    throw_unless(error::no_new_hash, saved_validator_set_hash != current_hash);\n                    saved_validator_set_hash = current_hash;\n                    validator_set_changes_count += 1;\n                    validator_set_change_time = now();\n\n                    ;; elector set 'stake_held_for' during election conduction\n                    ;; we save it when sending stake and after first round change and chose max\n                    ;; it's ok unless 'stake_held_for' will change twice: first one after sending stake\n                    ;; but before election conduction and second one after election but prior update_hash\n                    (_, int current_stake_held_for, _) = get_validator_config();\n                    stake_held_for = max(stake_held_for, current_stake_held_for);\n\n\n                    int overdue = now() - utime_since;\n                    if( (overdue < GRACE_PERIOD) | (borrowed_amount == 0) ) {\n                      assert_sender!(sender_address, validator);\n                      send_excesses(sender_address);\n                    } else {\n                      if(balance - HASH_UPDATE_FINE >= MIN_TONS_FOR_STORAGE) {\n                        ifnot( equal_slice_bits(sender_address, validator)) {\n                          send_msg(sender_address, HASH_UPDATE_FINE, null(), msgflag::NON_BOUNCEABLE, sendmode::IGNORE_ERRORS);\n                        }\n                      }\n                    }\n                } elseif (op == controller::withdraw_validator) { ;; withdraw validator (after recover_stake and before new_stake)\n                    assert_state!(state::REST);\n                    throw_if(error::withdrawal_while_credited, borrowed_amount);\n                    assert_sender!(sender_address, validator);\n                    int request_amount = in_msg_body~load_coins();\n                    in_msg_body.end_parse();\n                    throw_unless(error::incorrect_withdrawal_amount, request_amount > 0);\n\n                    raw_reserve(MIN_TONS_FOR_STORAGE, 2);\n                    send_msg(validator,\n                             request_amount,\n                             begin_cell().store_body_header(controller::validator_withdrawal, query_id).end_cell(),\n                             msgflag::NON_BOUNCEABLE,\n                             sendmode::REGULAR);\n\n                } elseif (op == controller::new_stake) {\n                    assert_state!(state::REST);\n                    assert_sender!(sender_address, validator);\n\n                    throw_unless(error::incorrect_new_stake::query_id, query_id); ;; query_id must be greater then 0 to receive confirmation message from elector\n\n                    throw_unless(error::incorrect_new_stake::request_value,\n                                 msg_value >= ELECTOR_OPERATION_VALUE); ;; must be greater then new_stake sending to elector fee\n\n                    int value = in_msg_body~load_coins();\n\n                    slice msg = in_msg_body;\n\n                    stake_at = check_new_stake_msg(in_msg_body);\n\n                    stake_amount_sent = value - ELECTOR_OPERATION_VALUE;\n\n                    throw_unless(error::incorrect_new_stake::value_lt_minimum, value >= MIN_STAKE_TO_SEND);\n\n                    int overdue_fine_and_storage = (HASH_UPDATE_FINE * 3) + STAKE_RECOVER_FINE + MIN_TONS_FOR_STORAGE;\n\n                    throw_unless(error::incorrect_new_stake::value_too_high, balance - value >=  overdue_fine_and_storage);\n                    (_, stake_held_for, int elections_end_before) = get_validator_config();\n                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();\n                    if (borrowed_amount) {\n                      ;; it is allowed to use credit funds only in the same round when they were obtained\n                      throw_unless(error::incorrect_new_stake::wrongly_used_credit,\n                                  (borrowing_time > utime_since) & (now() < utime_until - elections_end_before));\n                    }\n\n                    int validator_own_funds = balance - borrowed_amount - overdue_fine_and_storage;\n\n                    throw_unless(error::incorrect_new_stake::solvency_not_guaranteed,\n                                 validator_own_funds >= max_recommended_punishment_for_validator_misbehaviour(stake_amount_sent));\n\n                    state = state::SENT_STAKE_REQUEST;\n\n\n\n                    saved_validator_set_hash = cell_hash(vset); ;; current validator set, we will be in next validator set\n                    validator_set_changes_count = 0;\n                    validator_set_change_time = utime_since;\n\n                    send_msg(elector_address(),\n                             value,\n                             begin_cell().store_body_header(elector::new_stake, query_id).store_slice(msg).end_cell(),\n                             msgflag::BOUNCEABLE,\n                             sendmode::PAY_FEES_SEPARETELY); ;; pay fee separately, revert on errors\n\n                } elseif (op == controller::send_request_loan) {\n                  assert_state!(state::REST);\n                  assert_sender!(sender_address, validator);\n                  throw_unless(error::too_low_request_loan_value, msg_value >= MIN_REQUEST_LOAN_VALUE);\n                  slice request = in_msg_body;\n                  int min_loan = in_msg_body~load_coins();\n                  int max_loan = in_msg_body~load_coins();\n                  int max_interest = in_msg_body~load_share();\n                  in_msg_body.end_parse();\n                  max_expected_interest = max_interest;\n\n                  throw_unless(error::controller_not_approved, approved?);\n\n                  ;; For simplicity forbid multiple borrowing\n                  ;; TODO\n                  throw_if(error::multiple_loans_are_prohibited, borrowed_amount);\n\n                  (int elections_start_before, _, int elections_end_before) = get_validator_config();\n                  (int utime_since, int utime_until, cell vset) = get_current_validator_set();\n                  throw_unless(error::too_early_loan_request, now() > utime_until - elections_start_before); ;; elections started\n                  throw_unless(error::too_late_loan_request, now() < utime_until - elections_end_before);   ;; elections not yet closed\n\n\n                  ;; lets check whether we can afford it\n                  int elector_fine = max_recommended_punishment_for_validator_misbehaviour(max_loan + balance);\n                  int overdue_fine = (HASH_UPDATE_FINE * 3) + STAKE_RECOVER_FINE;\n                  int interest_payment = muldiv(max_loan, max_interest, SHARE_BASIS);\n                  int validator_amount = balance - borrowed_amount;\n                  throw_unless(error::too_high_loan_request_amount, validator_amount >= (MIN_TONS_FOR_STORAGE + overdue_fine) + elector_fine + interest_payment);\n\n                  cell payload = begin_cell()\n                                             .store_body_header(pool::request_loan, query_id)\n                                             .store_slice(request)\n                                             .store_slice(static_data)\n                                 .end_cell();\n                  send_msg(pool,\n                           0,\n                           payload,\n                           msgflag::BOUNCEABLE,\n                           sendmode::CARRY_ALL_REMAINING_MESSAGE_VALUE);\n                  state = state::SENT_BORROWING_REQUEST;\n                } elseif (op == controller::return_unused_loan) {\n                    assert_state!(state::REST);\n                    throw_unless(error::no_credit, borrowed_amount);\n                    (int utime_since, int utime_until, cell vset) = get_current_validator_set();\n                    throw_unless(error::too_early_loan_return, utime_since > borrowing_time); ;; load was requested in previous round\n                    int overdue = now() - utime_since;\n                    if(balance >= MIN_TONS_FOR_STORAGE + borrowed_amount) {\n                      send_msg(pool,\n                               borrowed_amount, ;; TODO add fee???\n                               begin_cell().store_body_header(pool::loan_repayment, query_id).end_cell(),\n                               msgflag::BOUNCEABLE,\n                               sendmode::PAY_FEES_SEPARETELY); ;; remaining inbound message amount, fee deducted from\n                      borrowed_amount = 0;\n                      borrowing_time = 0;\n                      if(overdue < GRACE_PERIOD) {\n                        assert_sender!(sender_address, validator);\n                        send_excesses(sender_address);\n                      } else {\n                        if(balance >=  MIN_TONS_FOR_STORAGE + borrowed_amount + STAKE_RECOVER_FINE) {\n                          ifnot( equal_slice_bits(sender_address, validator)) {\n                            send_msg(sender_address, STAKE_RECOVER_FINE, null(), msgflag::NON_BOUNCEABLE, sendmode::IGNORE_ERRORS);\n                          }\n                        }\n                      }\n                    } else {\n                      state = state::INSOLVENT;\n                    }\n                } else {\n                  throw(error::unknown_op);\n                }\n            }\n    }\n\n    save_data( );\n}\n\n() save_data() impure inline_ref {\n    set_data(begin_cell()\n        .store_uint(state, 8)\n        .store_bool(halted?)\n        .store_bool(approved?)\n        .store_coins(stake_amount_sent)\n        .store_timestamp(stake_at)\n        .store_uint(saved_validator_set_hash, 256)\n        .store_uint(validator_set_changes_count, 8)\n        .store_timestamp(validator_set_change_time)\n        .store_timestamp(stake_held_for)\n        .store_coins(borrowed_amount)\n        .store_timestamp(borrowing_time)\n        .store_slice(sudoer)\n        .store_timestamp(sudoer_set_at)\n        .store_share(max_expected_interest)\n        .store_slice(static_data)\n        .end_cell());\n}\n\n() load_data() impure inline_ref {\n\n    slice ds = get_data().begin_parse();\n    state = ds~load_uint(8);\n    halted? = ds~load_int(1);\n    approved? = ds~load_int(1);\n\n    stake_amount_sent = ds~load_coins();\n    stake_at = ds~load_timestamp();\n\n    saved_validator_set_hash = ds~load_uint(256);\n    validator_set_changes_count = ds~load_uint(8);\n    validator_set_change_time = ds~load_timestamp();\n    stake_held_for = ds~load_timestamp();\n\n    borrowed_amount = ds~load_coins();\n    borrowing_time = ds~load_timestamp();\n\n    sudoer = ds~load_msg_addr();\n    sudoer_set_at = ds~load_timestamp();\n\n    max_expected_interest = ds~load_share();\n\n    static_data = ds;\n\n    ds = ds~load_ref().begin_parse();\n\n    controller_id = ds~load_uint(32);\n    validator = ds~load_msg_addr();\n    pool = ds~load_msg_addr();\n    governor = ds~load_msg_addr();\n\n    ds = ds~load_ref().begin_parse();\n\n    approver = ds~load_msg_addr();\n    halter = ds~load_msg_addr();\n}\n\n\nslice make_address(int wc, int addr) inline_ref {\n    return begin_cell()\n           .store_uint(4, 3).store_workchain(wc).store_uint(addr, ADDR_SIZE).end_cell().begin_parse();\n}\n\nslice elector_address() inline_ref {\n    int elector = config_param(1).begin_parse().preload_uint(ADDR_SIZE);\n    return make_address(MASTERCHAIN, elector);\n}\n\n;; https://github.com/ton-blockchain/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/block.tlb#L584\nint is_elector_address(slice address) inline_ref {\n  return equal_slice_bits(address, elector_address());\n}\n\n\n;; check the validity of the new_stake message\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L208\nint check_new_stake_msg(slice cs) impure inline_ref {\n    var validator_pubkey = cs~load_uint(256);\n    var stake_at = cs~load_uint(32);\n    var max_factor = cs~load_uint(32);\n    var adnl_addr = cs~load_uint(256);\n    var signature = cs~load_ref().begin_parse().preload_bits(512);\n    cs.end_parse();\n    return stake_at; ;; supposed start of next validation round (utime_since)\n}\n\n;; Get methods\n\n_ get_validator_controller_data() method_id {\n    load_data();\n    return (\n      state, halted?, approved?,\n      \n      stake_amount_sent, stake_at,\n      \n      saved_validator_set_hash,\n      validator_set_changes_count,\n      validator_set_change_time,\n      stake_held_for,\n      \n      borrowed_amount, borrowing_time,\n      validator, pool, sudoer\n      );\n}\n\nint get_max_punishment(int stake) method_id {\n    return max_recommended_punishment_for_validator_misbehaviour(stake);\n}\n\nint get_max_stake_value() method_id {\n    load_data();\n    ifnot(state == state::REST) {\n        return -1;\n    }\n    int balance = pair_first(get_balance());\n    int overdue_fine = (HASH_UPDATE_FINE * 3) + STAKE_RECOVER_FINE;\n    ;; we add ELECTOR_OPERATION_VALUE to ensure room for storage fees and so on\n    int value = balance - MIN_TONS_FOR_STORAGE - overdue_fine - ELECTOR_OPERATION_VALUE;\n    if(value < MIN_STAKE_TO_SEND) {\n        return -1;\n    }\n    if (borrowed_amount) {\n        (_, stake_held_for, int elections_end_before) = get_validator_config();\n        (int utime_since, int utime_until, cell vset) = get_current_validator_set();\n        ;; it is allowed to use credit funds only in the same round when they were obtained\n        if((borrowing_time > utime_since) & (now() < utime_until - elections_end_before)) {\n            return -1;\n        }\n    }\n    ;; currently we skip checks related to max_recommended_punishment_for_validator_misbehaviour\n    return value;\n}\n\n(int, int) required_balance_for_loan(int credit, int interest) method_id {\n    load_data();\n    int balance = pair_first(get_balance());\n    int elector_fine = max_recommended_punishment_for_validator_misbehaviour(credit + balance);\n    int overdue_fine = (HASH_UPDATE_FINE * 3) + STAKE_RECOVER_FINE;\n    int interest_payment = muldiv(credit, interest, SHARE_BASIS);\n    int validator_amount = balance - borrowed_amount;\n    return (MIN_TONS_FOR_STORAGE + overdue_fine + elector_fine + interest_payment,\n            validator_amount);\n}\n\n\n(int, int) request_window_time() method_id { ;; TODO: put it in recv_internal in request_loan operation\n    ;; get time window (since, until) when controller may request loan\n    (int elections_start_before, _, int elections_end_before) = get_validator_config();\n    (int utime_since, int utime_until, _) = get_current_validator_set();\n    return (utime_until - elections_start_before,\n            utime_until - elections_end_before);\n}\n",
        "is_entrypoint": true,
        "is_std_lib": false,
        "include_in_command": true
      },
      {
        "name": "governor_requests.func",
        "content": ";; common functions in all contracts\nglobal slice governor;\nglobal int governor_update_after;\nglobal slice sudoer;\nglobal int sudoer_set_at;\nglobal int state;\nglobal int halted?;\n\nconst int GOVERNOR_QUARANTINE = 86400;\n\n() process_set_sudo_request(slice sender, slice in_msg) impure inline_ref {\n    assert_sender!(sender, governor);\n    sudoer_set_at = now();\n    sudoer = in_msg~load_msg_addr();\n}\n\n() process_prepare_governance_migration(slice sender, slice in_msg) impure inline_ref {\n    assert_sender!(sender, governor);\n    governor_update_after = in_msg~load_timestamp();\n    throw_unless(error::governor_update_too_soon, governor_update_after - now() > GOVERNOR_QUARANTINE );\n}\n\n() process_unhalt_request(slice sender) impure inline_ref {\n    assert_sender!(sender, governor);\n    halted? = false;\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "errors.func",
        "content": "const int error::unknown_op = 0xffff;\n\nconst int error::wrong_sender = 0x9283;\nconst int error::wrong_state = 0x9284;\nconst int error::halted = 0x9285;\n\nconst int sudoer::quarantine = 0xa000;\nconst int error::governor_update_too_soon = 0xa001;\nconst int error::governor_update_not_matured = 0xa003;\n\nconst int error::interest_too_low = 0xf100;\nconst int error::contradicting_borrowing_params = 0xf101;\nconst int error::not_enough_funds_for_loan = 0xf102;\nconst int error::total_credit_too_high = 0xf103;\nconst int error::borrowing_request_in_closed_round = 0xf104;\n\nconst int error::deposit_amount_too_low = 0xf200;\nconst int error::deposits_are_closed = 0xf201;\nconst int error::output_amount_is_zero = 0xf202;\n\nconst int error::not_enough_TON_to_process = 0xf300;\n\nconst int error::controller_in_wrong_workchain = 0xf400;\nconst int error::credit_book_too_deep = 0xf401;\nconst int error::unknown_borrower = 0xf402;\n\nconst int error::finalizing_active_credit_round = 0xf500;\n\nconst int error::too_early_stake_recover_attempt_count = 0xf600;\nconst int error::too_early_stake_recover_attempt_time = 0xf601;\nconst int error::too_low_recover_stake_value = 0xf602;\nconst int error::not_enough_money_to_pay_fine = 0xf603;\nconst int error::too_low_request_loan_value = 0xf604;\n\nconst int error::too_much_validator_set_counts = 0xf700;\nconst int error::no_new_hash = 0xf701;\n\nconst int error::withdrawal_while_credited = 0xf800;\nconst int error::incorrect_withdrawal_amount = 0xf801;\n\n\nconst int error::incorrect_new_stake::query_id = 0xf900;\nconst int error::incorrect_new_stake::request_value = 0xf901;\nconst int error::incorrect_new_stake::value_lt_minimum = 0xf902;\nconst int error::incorrect_new_stake::value_too_high = 0xf903;\nconst int error::incorrect_new_stake::wrongly_used_credit = 0xf904;\nconst int error::incorrect_new_stake::solvency_not_guaranteed = 0xf905;\n\n\nconst int error::controller_not_approved = 0xfa00;\nconst int error::multiple_loans_are_prohibited = 0xfa01;\nconst int error::too_early_loan_request = 0xfa02;\nconst int error::too_late_loan_request = 0xfa03;\nconst int error::too_high_loan_request_amount = 0xfa04;\nconst int error::credit_interest_too_high = 0xfa05;\n\nconst int error::no_credit = 0xfb00;\nconst int error::too_early_loan_return = 0xfb01;\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "sudoer_requests.func",
        "content": "#include \"asserts.func\";\n\n;; common function in all contracts\nglobal slice sudoer;\nglobal int sudoer_set_at;\n\nconst int SUDOER_QUARANTINE = 86400;\n\n() process_sudo_request(slice sender, slice in_msg) impure inline_ref {\n    assert_sender!(sender, sudoer);\n    throw_unless(sudoer::quarantine, now() > sudoer_set_at + SUDOER_QUARANTINE);\n    int mode = in_msg~load_uint(8);\n    cell message  = in_msg~load_ref();\n    send_raw_message(message, mode);\n}\n\n\n() execute(cont c) impure asm \"EXECUTE\";\n() process_sudo_upgrade_request(slice sender, slice in_msg) impure inline_ref {\n    assert_sender!(sender, sudoer);\n    throw_unless(sudoer::quarantine, now() > sudoer_set_at + SUDOER_QUARANTINE);\n    cell data = in_msg~load_maybe_ref();\n    cell code = in_msg~load_maybe_ref();\n    cell after_upgrade = in_msg~load_maybe_ref();\n    ifnot(data.null?()) {\n      set_data(data);\n    }\n    ifnot(code.null?()) {\n      set_code(code);\n    }\n    ifnot(after_upgrade.null?()) {\n      execute(after_upgrade.begin_parse().bless());\n    }\n    throw(1);\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "op-codes.func",
        "content": "{- ======== ELECTOR OPCODES =========== -}\n\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L621\nconst int elector::new_stake = 0x4e73744b;\n\n;; return_stake https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L169\nconst int elector::new_stake_error = 0xee6f454c;\n\n;; send_confirmation https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L173\nconst int elector::new_stake_ok = 0xf374484c; \n\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L625\nconst int elector::recover_stake = 0x47657424;\n\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L407\nconst int elector::recover_stake_error = 0xfffffffe;\n\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L426\nconst int elector::recover_stake_ok = 0xf96f7324;\n\n{- ========  Validator Controller OPCODES ======== -}\n;; IN\nconst int controller::top_up = 0xd372158c;\nconst int controller::update_validator_hash = 0xf0fd2250;\nconst int controller::approve = 0x7b4b42e6;\nconst int controller::disapprove = 0xe8a0abfe;\nconst int controller::recover_stake = 0xeb373a05;\nconst int controller::new_stake = elector::new_stake;\nconst int controller::credit = 0x1690c604;\nconst int controller::withdraw_validator = 0x8efed779;\nconst int controller::return_unused_loan = 0xed7378a6;\n\n;; OUT\nconst int controller::validator_withdrawal = 0x30026327;\nconst int controller::send_request_loan = 0x6335b11a;\n\n\n{- ======== Validator Pool OPCODES ========== -}\nconst int pool::request_loan = 0xe642c965;\nconst int pool::loan_repayment = 0xdfdca27b;\nconst int pool::deposit = 0x47d54391;\nconst int pool::withdraw = 0x319B0CDC;\nconst int pool::withdrawal = 0x0a77535c;\nconst int pool::touch = 0x4bc7c2df;\nconst int pool::donate = 0x73affe21;\n\nconst int pool::deploy_controller = 0xb27edcad;\n\n\nconst int sudo::send_message = 0x270695fb;\nconst int sudo::upgrade = 0x96e7f528;\nconst int governor::set_sudoer = 0x79e7c016;\nconst int governor::set_governance_fee = 0x2aaa96a0;\nconst int governor::set_roles = 0x5e517f36;\nconst int governor::unhalt = 0x7247e7a5;\nconst int governor::set_deposit_settings = 0x9bf5561c;\nconst int governor::return_available_funds = 0x55c26cd5;\nconst int governor::prepare_governance_migration = 0x9971881c;\n\nconst int halter::halt = 0x139a1b4e;\n\n\nconst int interest_manager::operation_fee = 0x54d37487;\nconst int interest_manager::request_notification = 0xb1ebae06;\nconst int interest_manager::stats = 0xc1344900;\nconst int interest_manager::set_interest = 0xc9f04485;\n\n{- ========== Jetton OPCODES ========== -}\nconst int jetton::transfer = 0xf8a7ea5;\nconst int jetton::transfer_notification = 0x7362d09c;\nconst int jetton::internal_transfer = 0x178d4519;\nconst int jetton::excesses = 0xd53276db;\nconst int jetton::burn = 0x595f07bc;\nconst int jetton::burn_notification = 0x7bdd97de;\nconst int jetton::withdraw_tons = 0x6d8e5e3c;\nconst int jetton::withdraw_jettons = 0x768a50b2;\n\nconst int jetton::provide_wallet_address = 0x2c76b973;\nconst int jetton::take_wallet_address = 0xd1735400;\nconst int jetton::change_content = 0x5773d1f5;\n\nconst int payout::mint = 0x1674b0a0;\nconst int payout::burn_notification = pool::withdraw;\nconst int payout::init = 0xf5aa8943;\n\n\nconst int payouts::start_distribution = 0x1140a64f;\n\n{- =========== awaited Jettons ============= -}\nconst int payouts::mint = 0x8887;\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "contracts/versioning.func",
        "content": "#include \"auto/git-hash.func\";\n\nint get_code_version() method_id {\n    return git_hash;\n}\n",
        "is_entrypoint": true,
        "is_std_lib": false,
        "include_in_command": true
      },
      {
        "name": "contracts/auto/git-hash.func",
        "content": "const int git_hash = 0x35d676f6ac6e35e755ea3c4d7d7cf577627b1cf0;",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "network_config_utils.func",
        "content": "const int ONE_TON = 1000000000;\n\n;; https://github.com/ton-blockchain/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/block.tlb#L721\nint max_recommended_punishment_for_validator_misbehaviour(int stake) inline_ref {\n    cell cp = config_param(40);\n    if (cell_null?(cp)) {\n        return 101 * ONE_TON; ;; 101 TON - https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/lite-client/lite-client.cpp#L3678\n    }\n\n    slice cs = cp.begin_parse();\n\n    (int prefix,\n     int default_flat_fine, int default_proportional_fine,\n     int severity_flat_mult, int severity_proportional_mult,\n     int unpunishable_interval,\n     int long_interval, int long_flat_mult, int long_proportional_mult) =\n        (cs~load_uint(8),\n         cs~load_coins(), cs~load_uint(32),\n         cs~load_uint(16), cs~load_uint(16),\n         cs~load_uint(16),\n         cs~load_uint(16), cs~load_uint(16), cs~load_uint(16)\n        );\n\n     ;; https://github.com/ton-blockchain/ton/blob/master/lite-client/lite-client.cpp#L3721\n     int fine = default_flat_fine;\n     int fine_part = default_proportional_fine;\n\n     fine *= severity_flat_mult; fine >>= 8;\n     fine_part *= severity_proportional_mult; fine_part >>= 8;\n\n     fine *= long_flat_mult; fine >>= 8;\n     fine_part *= long_proportional_mult; fine_part >>= 8;\n\n     return min(stake, fine + muldiv(stake, fine_part, 1 << 32)); ;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L529\n}\n\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/block/block.tlb#L632\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/elector-code.fc#L118\n(int, int, int) get_validator_config() inline {\n    slice cs = config_param(15).begin_parse();\n    (int validators_elected_for, int elections_start_before, int elections_end_before, int _stake_held_for) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32), cs.preload_uint(32));\n    return (elections_start_before, _stake_held_for, elections_end_before);\n}\n\nint get_stake_held_for() inline_ref {\n    (int elections_start_before, int _stake_held_for, _) = get_validator_config();\n    return _stake_held_for;\n}\nint get_elections_start_before() inline_ref {\n    (int elections_start_before, int _stake_held_for, _) = get_validator_config();\n    return elections_start_before;\n}\n\n;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/block/block.tlb#L712\n(int, int, cell) get_current_validator_set() inline_ref {\n    cell vset = config_param(34); ;; current validator set\n    slice cs = vset.begin_parse();\n    ;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/block/block.tlb#L579\n    ;; https://github.com/ton-blockchain/ton/blob/b38d227a469666d83ac535ad2eea80cb49d911b8/crypto/smartcont/config-code.fc#L49\n    throw_unless(9, cs~load_uint(8) == 0x12);  ;; validators_ext#12 only\n    int utime_since = cs~load_uint(32); ;; actual start unixtime of current validation round\n    int utime_until = cs~load_uint(32); ;; supposed end unixtime of current validation round (utime_until = utime_since + validators_elected_for); unfreeze_at = utime_until + stake_held_for\n    return (utime_since, utime_until, vset);\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "contracts/payout_nft/stdlib.func",
        "content": ";; Standard library for funC\n;;\n\n{-\n  # Tuple manipulation primitives\n  The names and the types are mostly self-explaining.\n  See [polymorhism with forall](https://ton.org/docs/#/func/functions?id=polymorphism-with-forall)\n  for more info on the polymorphic functions.\n\n  Note that currently values of atomic type `tuple` can't be cast to composite tuple type (e.g. `[int, cell]`)\n  and vise versa.\n-}\n\n{-\n  # Lisp-style lists\n\n  Lists can be represented as nested 2-elements tuples.\n  Empty list is conventionally represented as TVM `null` value (it can be obtained by calling [null()]).\n  For example, tuple `(1, (2, (3, null)))` represents list `[1, 2, 3]`. Elements of a list can be of different types.\n-}\n\n;;; Adds an element to the beginning of lisp-style list.\nforall X -> tuple cons(X head, tuple tail) asm \"CONS\";\n\n;;; Extracts the head and the tail of lisp-style list.\nforall X -> (X, tuple) uncons(tuple list) asm \"UNCONS\";\n\n;;; Extracts the tail and the head of lisp-style list.\nforall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) \"UNCONS\";\n\n;;; Returns the head of lisp-style list.\nforall X -> X car(tuple list) asm \"CAR\";\n\n;;; Returns the tail of lisp-style list.\ntuple cdr(tuple list) asm \"CDR\";\n\n;;; Creates tuple with zero elements.\ntuple empty_tuple() asm \"NIL\";\n\n;;; Appends a value `x` to a `Tuple t = (x1, ..., xn)`, but only if the resulting `Tuple t' = (x1, ..., xn, x)`\n;;; is of length at most 255. Otherwise throws a type check exception.\nforall X -> tuple tpush(tuple t, X value) asm \"TPUSH\";\nforall X -> (tuple, ()) ~tpush(tuple t, X value) asm \"TPUSH\";\n\n;;; Creates a tuple of length one with given argument as element.\nforall X -> [X] single(X x) asm \"SINGLE\";\n\n;;; Unpacks a tuple of length one\nforall X -> X unsingle([X] t) asm \"UNSINGLE\";\n\n;;; Creates a tuple of length two with given arguments as elements.\nforall X, Y -> [X, Y] pair(X x, Y y) asm \"PAIR\";\n\n;;; Unpacks a tuple of length two\nforall X, Y -> (X, Y) unpair([X, Y] t) asm \"UNPAIR\";\n\n;;; Creates a tuple of length three with given arguments as elements.\nforall X, Y, Z -> [X, Y, Z] triple(X x, Y y, Z z) asm \"TRIPLE\";\n\n;;; Unpacks a tuple of length three\nforall X, Y, Z -> (X, Y, Z) untriple([X, Y, Z] t) asm \"UNTRIPLE\";\n\n;;; Creates a tuple of length four with given arguments as elements.\nforall X, Y, Z, W -> [X, Y, Z, W] tuple4(X x, Y y, Z z, W w) asm \"4 TUPLE\";\n\n;;; Unpacks a tuple of length four\nforall X, Y, Z, W -> (X, Y, Z, W) untuple4([X, Y, Z, W] t) asm \"4 UNTUPLE\";\n\n;;; Returns the first element of a tuple (with unknown element types).\nforall X -> X first(tuple t) asm \"FIRST\";\n\n;;; Returns the second element of a tuple (with unknown element types).\nforall X -> X second(tuple t) asm \"SECOND\";\n\n;;; Returns the third element of a tuple (with unknown element types).\nforall X -> X third(tuple t) asm \"THIRD\";\n\n;;; Returns the fourth element of a tuple (with unknown element types).\nforall X -> X fourth(tuple t) asm \"3 INDEX\";\n\n;;; Returns the first element of a pair tuple.\nforall X, Y -> X pair_first([X, Y] p) asm \"FIRST\";\n\n;;; Returns the second element of a pair tuple.\nforall X, Y -> Y pair_second([X, Y] p) asm \"SECOND\";\n\n;;; Returns the first element of a triple tuple.\nforall X, Y, Z -> X triple_first([X, Y, Z] p) asm \"FIRST\";\n\n;;; Returns the second element of a triple tuple.\nforall X, Y, Z -> Y triple_second([X, Y, Z] p) asm \"SECOND\";\n\n;;; Returns the third element of a triple tuple.\nforall X, Y, Z -> Z triple_third([X, Y, Z] p) asm \"THIRD\";\n\n\n;;; Push null element (casted to given type)\n;;; By the TVM type `Null` FunC represents absence of a value of some atomic type.\n;;; So `null` can actually have any atomic type.\nforall X -> X null() asm \"PUSHNULL\";\n\n;;; Moves a variable [x] to the top of the stack\nforall X -> (X, ()) ~impure_touch(X x) impure asm \"NOP\";\n\n\n\n;;; Returns the current Unix time as an Integer\nint now() asm \"NOW\";\n\n;;; Returns the internal address of the current smart contract as a Slice with a `MsgAddressInt`.\n;;; If necessary, it can be parsed further using primitives such as [parse_std_addr].\nslice my_address() asm \"MYADDR\";\n\n;;; Returns the balance of the smart contract as a tuple consisting of an int\n;;; (balance in nanotoncoins) and a `cell`\n;;; (a dictionary with 32-bit keys representing the balance of \"extra currencies\")\n;;; at the start of Computation Phase.\n;;; Note that RAW primitives such as [send_raw_message] do not update this field.\n[int, cell] get_balance() asm \"BALANCE\";\n\n;;; Returns the logical time of the current transaction.\nint cur_lt() asm \"LTIME\";\n\n;;; Returns the starting logical time of the current block.\nint block_lt() asm \"BLOCKLT\";\n\n;;; Computes the representation hash of a `cell` [c] and returns it as a 256-bit unsigned integer `x`.\n;;; Useful for signing and checking signatures of arbitrary entities represented by a tree of cells.\nint cell_hash(cell c) asm \"HASHCU\";\n\n;;; Computes the hash of a `slice s` and returns it as a 256-bit unsigned integer `x`.\n;;; The result is the same as if an ordinary cell containing only data and references from `s` had been created\n;;; and its hash computed by [cell_hash].\nint slice_hash(slice s) asm \"HASHSU\";\n\n;;; Computes sha256 of the data bits of `slice` [s]. If the bit length of `s` is not divisible by eight,\n;;; throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.\nint string_hash(slice s) asm \"SHA256U\";\n\n{-\n  # Signature checks\n-}\n\n;;; Checks the Ed25519-`signature` of a `hash` (a 256-bit unsigned integer, usually computed as the hash of some data)\n;;; using [public_key] (also represented by a 256-bit unsigned integer).\n;;; The signature must contain at least 512 data bits; only the first 512 bits are used.\n;;; The result is `−1` if the signature is valid, `0` otherwise.\n;;; Note that `CHKSIGNU` creates a 256-bit slice with the hash and calls `CHKSIGNS`.\n;;; That is, if [hash] is computed as the hash of some data, these data are hashed twice,\n;;; the second hashing occurring inside `CHKSIGNS`.\nint check_signature(int hash, slice signature, int public_key) asm \"CHKSIGNU\";\n\n;;; Checks whether [signature] is a valid Ed25519-signature of the data portion of `slice data` using `public_key`,\n;;; similarly to [check_signature].\n;;; If the bit length of [data] is not divisible by eight, throws a cell underflow exception.\n;;; The verification of Ed25519 signatures is the standard one,\n;;; with sha256 used to reduce [data] to the 256-bit number that is actually signed.\nint check_data_signature(slice data, slice signature, int public_key) asm \"CHKSIGNS\";\n\n{---\n  # Computation of boc size\n  The primitives below may be useful for computing storage fees of user-provided data.\n-}\n\n;;; Returns `(x, y, z, -1)` or `(null, null, null, 0)`.\n;;; Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z`\n;;; in the DAG rooted at `cell` [c], effectively returning the total storage used by this DAG taking into account\n;;; the identification of equal cells.\n;;; The values of `x`, `y`, and `z` are computed by a depth-first traversal of this DAG,\n;;; with a hash table of visited cell hashes used to prevent visits of already-visited cells.\n;;; The total count of visited cells `x` cannot exceed non-negative [max_cells];\n;;; otherwise the computation is aborted before visiting the `(max_cells + 1)`-st cell and\n;;; a zero flag is returned to indicate failure. If [c] is `null`, returns `x = y = z = 0`.\n(int, int, int) compute_data_size(cell c, int max_cells) impure asm \"CDATASIZE\";\n\n;;; Similar to [compute_data_size?], but accepting a `slice` [s] instead of a `cell`.\n;;; The returned value of `x` does not take into account the cell that contains the `slice` [s] itself;\n;;; however, the data bits and the cell references of [s] are accounted for in `y` and `z`.\n(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm \"SDATASIZE\";\n\n;;; A non-quiet version of [compute_data_size?] that throws a cell overflow exception (`8`) on failure.\n(int, int, int, int) compute_data_size?(cell c, int max_cells) asm \"CDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n\n;;; A non-quiet version of [slice_compute_data_size?] that throws a cell overflow exception (8) on failure.\n(int, int, int, int) slice_compute_data_size?(cell c, int max_cells) asm \"SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n\n;;; Throws an exception with exit_code excno if cond is not 0 (commented since implemented in compilator)\n;; () throw_if(int excno, int cond) impure asm \"THROWARGIF\";\n\n{--\n  # Debug primitives\n  Only works for local TVM execution with debug level verbosity\n-}\n;;; Dumps the stack (at most the top 255 values) and shows the total stack depth.\n() dump_stack() impure asm \"DUMPSTK\";\n\n{-\n  # Persistent storage save and load\n-}\n\n;;; Returns the persistent contract storage cell. It can be parsed or modified with slice and builder primitives later.\ncell get_data() asm \"c4 PUSH\";\n\n;;; Sets `cell` [c] as persistent contract data. You can update persistent contract storage with this primitive.\n() set_data(cell c) impure asm \"c4 POP\";\n\n{-\n  # Continuation primitives\n-}\n;;; Usually `c3` has a continuation initialized by the whole code of the contract. It is used for function calls.\n;;; The primitive returns the current value of `c3`.\ncont get_c3() impure asm \"c3 PUSH\";\n\n;;; Updates the current value of `c3`. Usually, it is used for updating smart contract code in run-time.\n;;; Note that after execution of this primitive the current code\n;;; (and the stack of recursive function calls) won't change,\n;;; but any other function call will use a function from the new code.\n() set_c3(cont c) impure asm \"c3 POP\";\n\n;;; Transforms a `slice` [s] into a simple ordinary continuation `c`, with `c.code = s` and an empty stack and savelist.\ncont bless(slice s) impure asm \"BLESS\";\n\n{---\n  # Gas related primitives\n-}\n\n;;; Sets current gas limit `gl` to its maximal allowed value `gm`, and resets the gas credit `gc` to zero,\n;;; decreasing the value of `gr` by `gc` in the process.\n;;; In other words, the current smart contract agrees to buy some gas to finish the current transaction.\n;;; This action is required to process external messages, which bring no value (hence no gas) with themselves.\n;;;\n;;; For more details check [accept_message effects](https://ton.org/docs/#/smart-contracts/accept).\n() accept_message() impure asm \"ACCEPT\";\n\n;;; Sets current gas limit `gl` to the minimum of limit and `gm`, and resets the gas credit `gc` to zero.\n;;; If the gas consumed so far (including the present instruction) exceeds the resulting value of `gl`,\n;;; an (unhandled) out of gas exception is thrown before setting new gas limits.\n;;; Notice that [set_gas_limit] with an argument `limit ≥ 2^63 − 1` is equivalent to [accept_message].\n() set_gas_limit(int limit) impure asm \"SETGASLIMIT\";\n\n;;; Commits the current state of registers `c4` (“persistent data”) and `c5` (“actions”)\n;;; so that the current execution is considered “successful” with the saved values even if an exception\n;;; in Computation Phase is thrown later.\n() commit() impure asm \"COMMIT\";\n\n;;; Not implemented\n;;() buy_gas(int gram) impure asm \"BUYGAS\";\n\n;;; Computes the amount of gas that can be bought for `amount` nanoTONs,\n;;; and sets `gl` accordingly in the same way as [set_gas_limit].\n() buy_gas(int amount) impure asm \"BUYGAS\";\n\n;;; Computes the minimum of two integers [x] and [y].\nint min(int x, int y) asm \"MIN\";\n\n;;; Computes the maximum of two integers [x] and [y].\nint max(int x, int y) asm \"MAX\";\n\n;;; Sorts two integers.\n(int, int) minmax(int x, int y) asm \"MINMAX\";\n\n;;; Computes the absolute value of an integer [x].\nint abs(int x) asm \"ABS\";\n\n{-\n  # Slice primitives\n\n  It is said that a primitive _loads_ some data,\n  if it returns the data and the remainder of the slice\n  (so it can also be used as [modifying method](https://ton.org/docs/#/func/statements?id=modifying-methods)).\n\n  It is said that a primitive _preloads_ some data, if it returns only the data\n  (it can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods)).\n\n  Unless otherwise stated, loading and preloading primitives read the data from a prefix of the slice.\n-}\n\n\n;;; Converts a `cell` [c] into a `slice`. Notice that [c] must be either an ordinary cell,\n;;; or an exotic cell (see [TVM.pdf](https://ton-blockchain.github.io/docs/tvm.pdf), 3.1.2)\n;;; which is automatically loaded to yield an ordinary cell `c'`, converted into a `slice` afterwards.\nslice begin_parse(cell c) asm \"CTOS\";\n\n;;; Checks if [s] is empty. If not, throws an exception.\n() end_parse(slice s) impure asm \"ENDS\";\n\n;;; Loads the first reference from the slice.\n(slice, cell) load_ref(slice s) asm( -> 1 0) \"LDREF\";\n\n;;; Preloads the first reference from the slice.\ncell preload_ref(slice s) asm \"PLDREF\";\n\n  {- Functions below are commented because are implemented on compilator level for optimisation -}\n\n;;; Loads a signed [len]-bit integer from a slice [s].\n;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) \"LDIX\";\n\n;;; Loads an unsigned [len]-bit integer from a slice [s].\n;; (slice, int) ~load_uint(slice s, int len) asm( -> 1 0) \"LDUX\";\n\n;;; Preloads a signed [len]-bit integer from a slice [s].\n;; int preload_int(slice s, int len) asm \"PLDIX\";\n\n;;; Preloads an unsigned [len]-bit integer from a slice [s].\n;; int preload_uint(slice s, int len) asm \"PLDUX\";\n\n;;; Loads the first `0 ≤ len ≤ 1023` bits from slice [s] into a separate `slice s''`.\n;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) \"LDSLICEX\";\n\n;;; Preloads the first `0 ≤ len ≤ 1023` bits from slice [s] into a separate `slice s''`.\n;; slice preload_bits(slice s, int len) asm \"PLDSLICEX\";\n\n;;; Loads serialized amount of TonCoins (any unsigned integer up to `2^128 - 1`).\n(slice, int) load_grams(slice s) asm( -> 1 0) \"LDGRAMS\";\n(slice, int) load_coins(slice s) asm( -> 1 0) \"LDGRAMS\";\n\n;;; Returns all but the first `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\n(slice, ()) ~skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\n\n;;; Returns the first `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice first_bits(slice s, int len) asm \"SDCUTFIRST\";\n\n;;; Returns all but the last `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\n(slice, ()) ~skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\n\n;;; Returns the last `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice slice_last(slice s, int len) asm \"SDCUTLAST\";\n\n;;; Loads a dictionary `D` (HashMapE) from `slice` [s].\n;;; (returns `null` if `nothing` constructor is used).\n(slice, cell) load_dict(slice s) asm( -> 1 0) \"LDDICT\";\n\n;;; Preloads a dictionary `D` from `slice` [s].\ncell preload_dict(slice s) asm \"PLDDICT\";\n\n;;; Loads a dictionary as [load_dict], but returns only the remainder of the slice.\nslice skip_dict(slice s) asm \"SKIPDICT\";\n\n;;; Loads (Maybe ^Cell) from `slice` [s].\n;;; In other words loads 1 bit and if it is true\n;;; loads first ref and return it with slice remainder\n;;; otherwise returns `null` and slice remainder\n(slice, cell) load_maybe_ref(slice s) asm( -> 1 0) \"LDOPTREF\";\n\n;;; Preloads (Maybe ^Cell) from `slice` [s].\ncell preload_maybe_ref(slice s) asm \"PLDOPTREF\";\n\n\n;;; Returns the depth of `cell` [c].\n;;; If [c] has no references, then return `0`;\n;;; otherwise the returned value is one plus the maximum of depths of cells referred to from [c].\n;;; If [c] is a `null` instead of a cell, returns zero.\nint cell_depth(cell c) asm \"CDEPTH\";\n\n\n{-\n  # Slice size primitives\n-}\n\n;;; Returns the number of references in `slice` [s].\nint slice_refs(slice s) asm \"SREFS\";\n\n;;; Returns the number of data bits in `slice` [s].\nint slice_bits(slice s) asm \"SBITS\";\n\n;;; Returns both the number of data bits and the number of references in `slice` [s].\n(int, int) slice_bits_refs(slice s) asm \"SBITREFS\";\n\n;;; Checks whether a `slice` [s] is empty (i.e., contains no bits of data and no cell references).\nint slice_empty?(slice s) asm \"SEMPTY\";\n\n;;; Checks whether `slice` [s] has no bits of data.\nint slice_data_empty?(slice s) asm \"SDEMPTY\";\n\n;;; Checks whether `slice` [s] has no references.\nint slice_refs_empty?(slice s) asm \"SREMPTY\";\n\n;;; Returns the depth of `slice` [s].\n;;; If [s] has no references, then returns `0`;\n;;; otherwise the returned value is one plus the maximum of depths of cells referred to from [s].\nint slice_depth(slice s) asm \"SDEPTH\";\n\n{-\n  # Builder size primitives\n-}\n\n;;; Returns the number of cell references already stored in `builder` [b]\nint builder_refs(builder b) asm \"BREFS\";\n\n;;; Returns the number of data bits already stored in `builder` [b].\nint builder_bits(builder b) asm \"BBITS\";\n\n;;; Returns the depth of `builder` [b].\n;;; If no cell references are stored in [b], then returns 0;\n;;; otherwise the returned value is one plus the maximum of depths of cells referred to from [b].\nint builder_depth(builder b) asm \"BDEPTH\";\n\n{-\n  # Builder primitives\n  It is said that a primitive _stores_ a value `x` into a builder `b`\n  if it returns a modified version of the builder `b'` with the value `x` stored at the end of it.\n  It can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods).\n\n  All the primitives below first check whether there is enough space in the `builder`,\n  and only then check the range of the value being serialized.\n-}\n\n;;; Creates a new empty `builder`.\nbuilder begin_cell() asm \"NEWC\";\n\n;;; Converts a `builder` into an ordinary `cell`.\ncell end_cell(builder b) asm \"ENDC\";\n\n;;; Stores a reference to `cell` [c] into `builder` [b].\nbuilder store_ref(builder b, cell c) asm(c b) \"STREF\";\n\n;;; Stores an unsigned [len]-bit integer `x` into `b` for `0 ≤ len ≤ 256`.\n;; builder store_uint(builder b, int x, int len) asm(x b len) \"STUX\";\n\n;;; Stores a signed [len]-bit integer `x` into `b` for` 0 ≤ len ≤ 257`.\n;; builder store_int(builder b, int x, int len) asm(x b len) \"STIX\";\n\n\n;;; Stores `slice` [s] into `builder` [b]\nbuilder store_slice(builder b, slice s) asm \"STSLICER\";\n\n;;; Stores (serializes) an integer [x] in the range `0..2^128 − 1` into `builder` [b].\n;;; The serialization of [x] consists of a 4-bit unsigned big-endian integer `l`,\n;;; which is the smallest integer `l ≥ 0`, such that `x < 2^8l`,\n;;; followed by an `8l`-bit unsigned big-endian representation of [x].\n;;; If [x] does not belong to the supported range, a range check exception is thrown.\n;;;\n;;; Store amounts of TonCoins to the builder as VarUInteger 16\nbuilder store_grams(builder b, int x) asm \"STGRAMS\";\nbuilder store_coins(builder b, int x) asm \"STGRAMS\";\n\n;;; Stores dictionary `D` represented by `cell` [c] or `null` into `builder` [b].\n;;; In other words, stores a `1`-bit and a reference to [c] if [c] is not `null` and `0`-bit otherwise.\nbuilder store_dict(builder b, cell c) asm(c b) \"STDICT\";\n\n;;; Stores (Maybe ^Cell) to builder:\n;;; if cell is null store 1 zero bit\n;;; otherwise store 1 true bit and ref to cell\nbuilder store_maybe_ref(builder b, cell c) asm(c b) \"STOPTREF\";\n\n\n{-\n  # Address manipulation primitives\n  The address manipulation primitives listed below serialize and deserialize values according to the following TL-B scheme:\n  ```TL-B\n  addr_none$00 = MsgAddressExt;\n  addr_extern$01 len:(## 8) external_address:(bits len)\n               = MsgAddressExt;\n  anycast_info$_ depth:(#<= 30) { depth >= 1 }\n    rewrite_pfx:(bits depth) = Anycast;\n  addr_std$10 anycast:(Maybe Anycast)\n    workchain_id:int8 address:bits256 = MsgAddressInt;\n  addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)\n    workchain_id:int32 address:(bits addr_len) = MsgAddressInt;\n  _ _:MsgAddressInt = MsgAddress;\n  _ _:MsgAddressExt = MsgAddress;\n\n  int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool\n    src:MsgAddress dest:MsgAddressInt\n    value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams\n    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;\n  ext_out_msg_info$11 src:MsgAddress dest:MsgAddressExt\n    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;\n  ```\n  A deserialized `MsgAddress` is represented by a tuple `t` as follows:\n\n  - `addr_none` is represented by `t = (0)`,\n    i.e., a tuple containing exactly one integer equal to zero.\n  - `addr_extern` is represented by `t = (1, s)`,\n    where slice `s` contains the field `external_address`. In other words, `\n    t` is a pair (a tuple consisting of two entries), containing an integer equal to one and slice `s`.\n  - `addr_std` is represented by `t = (2, u, x, s)`,\n    where `u` is either a `null` (if `anycast` is absent) or a slice `s'` containing `rewrite_pfx` (if anycast is present).\n    Next, integer `x` is the `workchain_id`, and slice `s` contains the address.\n  - `addr_var` is represented by `t = (3, u, x, s)`,\n    where `u`, `x`, and `s` have the same meaning as for `addr_std`.\n-}\n\n;;; Loads from slice [s] the only prefix that is a valid `MsgAddress`,\n;;; and returns both this prefix `s'` and the remainder `s''` of [s] as slices.\n(slice, slice) load_msg_addr(slice s) asm( -> 1 0) \"LDMSGADDR\";\n\n;;; Decomposes slice [s] containing a valid `MsgAddress` into a `tuple t` with separate fields of this `MsgAddress`.\n;;; If [s] is not a valid `MsgAddress`, a cell deserialization exception is thrown.\ntuple parse_addr(slice s) asm \"PARSEMSGADDR\";\n\n;;; Parses slice [s] containing a valid `MsgAddressInt` (usually a `msg_addr_std`),\n;;; applies rewriting from the anycast (if present) to the same-length prefix of the address,\n;;; and returns both the workchain and the 256-bit address as integers.\n;;; If the address is not 256-bit, or if [s] is not a valid serialization of `MsgAddressInt`,\n;;; throws a cell deserialization exception.\n(int, int) parse_std_addr(slice s) asm \"REWRITESTDADDR\";\n\n;;; A variant of [parse_std_addr] that returns the (rewritten) address as a slice [s],\n;;; even if it is not exactly 256 bit long (represented by a `msg_addr_var`).\n(int, slice) parse_var_addr(slice s) asm \"REWRITEVARADDR\";\n\n{-\n  # Dictionary primitives\n-}\n\n\n;;; Sets the value associated with [key_len]-bit key signed index in dictionary [dict] to [value] (cell),\n;;; and returns the resulting dictionary.\ncell idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\n(cell, ()) ~idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\n\n;;; Sets the value associated with [key_len]-bit key unsigned index in dictionary [dict] to [value] (cell),\n;;; and returns the resulting dictionary.\ncell udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\n(cell, ()) ~udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\n\ncell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETOPTREF\";\n(cell, int) idict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETREF\" \"NULLSWAPIFNOT\";\n(cell, int) udict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGETREF\" \"NULLSWAPIFNOT\";\n(cell, cell) idict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETGETOPTREF\";\n(cell, cell) udict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETGETOPTREF\";\n(cell, int) idict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDEL\";\n(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDEL\";\n(slice, int) idict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGET\" \"NULLSWAPIFNOT\";\n(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\ncell udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\n(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\ncell idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\n(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\ncell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUADD\";\n(cell, int) udict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUREPLACE\";\n(cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIADD\";\n(cell, int) idict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIREPLACE\";\ncell udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\n(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\ncell idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\n(cell, ()) ~idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\ncell dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, int) udict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUADDB\";\n(cell, int) udict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUREPLACEB\";\n(cell, int) idict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIADDB\";\n(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIREPLACEB\";\n(cell, int, slice, int) udict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) udict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREVEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREVEQ\" \"NULLSWAPIFNOT2\";\n\n;;; Creates an empty dictionary, which is actually a null value. Equivalent to PUSHNULL\ncell new_dict() asm \"NEWDICT\";\n;;; Checks whether a dictionary is empty. Equivalent to cell_null?.\nint dict_empty?(cell c) asm \"DICTEMPTY\";\n\n\n{- Prefix dictionary primitives -}\n(slice, slice, slice, int) pfxdict_get?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTGETQ\" \"NULLSWAPIFNOT2\";\n(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) asm(value key dict key_len) \"PFXDICTSET\";\n(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTDEL\";\n\n;;; Returns the value of the global configuration parameter with integer index `i` as a `cell` or `null` value.\ncell config_param(int x) asm \"CONFIGOPTPARAM\";\n;;; Checks whether c is a null. Note, that FunC also has polymorphic null? built-in.\nint cell_null?(cell c) asm \"ISNULL\";\n\n;;; Creates an output action which would reserve exactly amount nanotoncoins (if mode = 0), at most amount nanotoncoins (if mode = 2), or all but amount nanotoncoins (if mode = 1 or mode = 3), from the remaining balance of the account. It is roughly equivalent to creating an outbound message carrying amount nanotoncoins (or b − amount nanotoncoins, where b is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder. Bit +2 in mode means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved. Bit +8 in mode means `amount <- -amount` before performing any further actions. Bit +4 in mode means that amount is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions. Currently, amount must be a non-negative integer, and mode must be in the range 0..15.\n() raw_reserve(int amount, int mode) impure asm \"RAWRESERVE\";\n;;; Similar to raw_reserve, but also accepts a dictionary extra_amount (represented by a cell or null) with extra currencies. In this way currencies other than TonCoin can be reserved.\n() raw_reserve_extra(int amount, cell extra_amount, int mode) impure asm \"RAWRESERVEX\";\n;;; Sends a raw message contained in msg, which should contain a correctly serialized object Message X, with the only exception that the source address is allowed to have dummy value addr_none (to be automatically replaced with the current smart contract address), and ihr_fee, fwd_fee, created_lt and created_at fields can have arbitrary values (to be rewritten with correct values during the action phase of the current transaction). Integer parameter mode contains the flags. Currently mode = 0 is used for ordinary messages; mode = 128 is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message); mode = 64 is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount); mode' = mode + 1 means that the sender wants to pay transfer fees separately; mode' = mode + 2 means that any errors arising while processing this message during the action phase should be ignored. Finally, mode' = mode + 32 means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with +128.\n() send_raw_message(cell msg, int mode) impure asm \"SENDRAWMSG\";\n;;; Creates an output action that would change this smart contract code to that given by cell new_code. Notice that this change will take effect only after the successful termination of the current run of the smart contract\n() set_code(cell new_code) impure asm \"SETCODE\";\n\n;;; Generates a new pseudo-random unsigned 256-bit integer x. The algorithm is as follows: if r is the old value of the random seed, considered as a 32-byte array (by constructing the big-endian representation of an unsigned 256-bit integer), then its sha512(r) is computed; the first 32 bytes of this hash are stored as the new value r' of the random seed, and the remaining 32 bytes are returned as the next random value x.\nint random() impure asm \"RANDU256\";\n;;; Generates a new pseudo-random integer z in the range 0..range−1 (or range..−1, if range < 0). More precisely, an unsigned random value x is generated as in random; then z := x * range / 2^256 is computed.\nint rand(int range) impure asm \"RAND\";\n;;; Returns the current random seed as an unsigned 256-bit Integer.\nint get_seed() impure asm \"RANDSEED\";\n;;; Sets the random seed to unsigned 256-bit seed.\n() set_seed(int) impure asm \"SETRAND\";\n;;; Mixes unsigned 256-bit integer x into the random seed r by setting the random seed to sha256 of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed r, and the second with the big-endian representation of x.\n() randomize(int x) impure asm \"ADDRAND\";\n;;; Equivalent to randomize(cur_lt());.\n() randomize_lt() impure asm \"LTIME\" \"ADDRAND\";\n\n;;; Checks whether the data parts of two slices coinside\nint equal_slice_bits (slice a, slice b) asm \"SDEQ\";\n\n;;; Concatenates two builders\nbuilder store_builder(builder to, builder from) asm \"STBR\";\n\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "halter_requests.func",
        "content": ";; common functions in all contracts\nglobal slice halter;\nglobal int halted?;\n\n() process_halt_request(slice sender) impure inline_ref {\n    assert_sender!(sender, halter);\n    halted? = true;\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      }
    ]
  }
}