{
  "code": "b5ee9c720101060100fc000114ff00f4a413f4bcf2c80b0102012002030004d23002e6f271d70101c000f27a8308d718ed44d08307d701d70b3fc8f828cf1623cf16c9f9000371d70101c3009a8307d7015113baf2e064de8040d7018020d7018020d701541675f910f2a8f823bbf27966bef823810708a08103e8a85220bcb1f274022082104cee646cbae30f01c8cbffcb3fc9ed54040500983002d74cd0fa408306d70171d70178d701d74cf80070801004aa0214b1c8cb055005cf165003fa02cb6922d021cf3121d749a08409b998337001cb0058cf1697307101cb0012cce2c901fb00003e8210169e3e11ba8e11f800029320d74a9778d701d402fb00e8d19332f23ce2",
  "code_hash": "3ba6528ab2694c118180aa3bd10dd19ff400b909ab4dcf58fc69925b2c7b12a6",
  "methods": [],
  "compiler": "func",
  "source": {
    "files": [
      {
        "name": "Wallet.fc",
        "content": "{- small stdlib -}\n\nint now() asm \"NOW\";\nslice my_address() asm \"MYADDR\";\n\nint cell_hash(cell c) asm \"HASHCU\";\nint slice_hash(slice s) asm \"HASHSU\";\nint check_signature(int hash, slice signature, int public_key) asm \"CHKSIGNU\";\n\ncell get_data() asm \"c4 PUSH\";\n() set_data(cell c) impure asm \"c4 POP\";\n\n() accept_message() impure asm \"ACCEPT\";\n() send_raw_message(cell msg, int mode) impure asm \"SENDRAWMSG\";\n\nint slice_bits(slice s) asm \"SBITS\";\nint slice_refs(slice s) asm \"SREFS\";\nint builder_bits(builder b) asm \"BBITS\";\n\n(slice, int) ~load_uint(slice s, int len) asm(-> 1 0) \"LDUX\";\n(slice, cell) load_ref(slice s) asm(-> 1 0) \"LDREF\";\n(slice, slice) load_msg_addr(slice s) asm(-> 1 0) \"LDMSGADDR\";\ncell preload_ref(slice s) asm \"PLDREF\";\n\nbuilder begin_cell() asm \"NEWC\";\nbuilder store_ref(builder b, cell c) asm(c b) \"STREF\";\nbuilder store_slice(builder b, slice s) asm \"STSLICER\";\nbuilder store_varuint(builder b, int x) asm \"STVARUINT16\";\ncell end_cell(builder b) asm \"ENDC\";\n\nslice begin_parse(cell c) asm \"CTOS\";\n() end_parse(slice s) impure asm \"ENDS\";\n\n\n{- method ids -}\n\n;; sendTransaction(address,uint128,bool,uint8,cell)()v2\nint is_method_send_transaction(int function_id) asm \"0x4cee646c PUSHINT EQUAL\";\n\n;; sendTransactionRaw(uint8,cell)()v2\nint is_method_send_transaction_raw(int function_id) asm \"0x169e3e11 PUSHINT EQUAL\";\n\n\n{- helpers -}\n\n;; Returns (body, (stored_timestamp, stored_pubkey, function id))\n(slice, (int, int, int)) ~process_headers(slice body) inline {\n    ;; Read signature\n    int has_signature? = body~load_uint(1);\n    throw_if(58, has_signature? == 0);\n    slice signature = body~load_bits(512);\n\n    ;; Load persistent data\n    var ds = get_data().begin_parse();\n    (int stored_pubkey, int stored_timestamp) = (ds~load_uint(256), ds.preload_uint(64));\n\n    ;; Prepend address to the body\n    cell body_with_address = begin_cell().store_slice(my_address()).store_slice(body).end_cell();\n    int body_hash = cell_hash(body_with_address);\n\n    ;; Read `pubkey` header\n    int has_pubkey? = body~load_uint(1);\n    if (has_pubkey? != 0) {\n        int msg_pubkey = body~load_uint(256);\n        throw_unless(100, msg_pubkey == stored_pubkey);\n    }\n\n    ;; Read `time`, `expire` headers and function id\n    (int msg_timestamp, int expire_at, int function_id) = (body~load_uint(64), body~load_uint(32), body~load_uint(32));\n\n    ;; Check signature\n    throw_unless(40, check_signature(body_hash, signature, stored_pubkey));\n\n    ;; Check `expire` header\n    throw_if(57, expire_at <= now());\n\n    ;; Check `time` header\n    throw_if(52, (stored_timestamp >= msg_timestamp) | (msg_timestamp > (now() + 1800) * 1000));\n\n    return (body, (msg_timestamp, stored_pubkey, function_id));\n}\n\n{- entries -}\n\n() recv_internal(slice in_msg) impure {\n    ;; do nothing for internal messages\n}\n\n() recv_external(slice body) impure {\n    (int stored_timestamp, int stored_pubkey, int function_id) = body~process_headers();\n    if (function_id.is_method_send_transaction()) {\n        slice args = body.preload_ref().begin_parse();\n        (slice address, int amount, int bounce, int flags, cell payload) = (\n                args~load_msg_addr(),\n                args~load_uint(128),\n                args~load_uint(1),\n                args~load_uint(8),\n                args.preload_ref()\n        );\n\n        accept_message();\n\n        ;; CommonMsgInfo (part 1)\n        ;; 0 1 x 0 00 = 0x10 (bounce:0) or 0x18 (bounce:1)\n        ;; \\ \\ \\ \\ ^^ src:addr_none$00\n        ;;  \\ \\ \\ * bounced:Bool\n        ;;   \\ \\ * bounce:Bool\n        ;;    \\ * ihr_disabled:Bool\n        ;;     * int_msg_info$0\n\n        ;; CommonMsgInfo (part 2)\n        ;; 1 bit - amount (empty currency collection extra)\n        ;; 4 bits - ihr_fee\n        ;; 4 bits - fwd_fee\n        ;; 64 bits - created_lt\n        ;; 32 bits - created_at\n        ;; ---\n        ;; 1 bit - empty state init\n\n        var msg = begin_cell()\n                .store_uint(0x10 | (bounce << 3), 6)\n                .store_slice(address)\n                .store_varuint(amount)\n                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1);\n\n        slice ps = payload.begin_parse();\n        var msg = (msg.builder_bits() + ps.slice_bits() < 1023)\n                ? msg.store_uint(0, 1).store_slice(ps)\n                : msg.store_uint(1, 1).store_ref(payload);\n\n        send_raw_message(msg.end_cell(), flags);\n    } elseif (function_id.is_method_send_transaction_raw()) {\n        accept_message();\n\n        body~touch();\n        while (body.slice_refs()) {\n            var mode = body~load_uint(8);\n            send_raw_message(body~load_ref(), mode);\n        }\n        body.end_parse();\n    } else {\n        throw(60); ;; unknown function id\n    }\n\n    ;; Store persistent data\n    set_data(begin_cell()\n            .store_uint(stored_pubkey, 256)\n            .store_uint(stored_timestamp, 64)\n            .end_cell());\n}\n",
        "is_entrypoint": true,
        "is_std_lib": false,
        "include_in_command": true
      }
    ]
  }
}