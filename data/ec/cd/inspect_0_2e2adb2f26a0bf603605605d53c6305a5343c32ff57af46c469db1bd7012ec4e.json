{
  "code": "",
  "code_hash": "82566ad72b6568fe7276437d3b0c911aab65ed701c13601941b2917305e81c11",
  "methods": [
    {
      "id": 81689,
      "method": "get_pool_data"
    },
    {
      "id": 103289,
      "method": "get_wallet_address"
    },
    {
      "id": 115709,
      "method": "get_expected_outputs"
    },
    {
      "id": 87316,
      "method": "get_lp_account_address"
    },
    {
      "id": 106029,
      "method": "get_jetton_data"
    }
  ],
  "compiler": "func",
  "source": {
    "files": [
      {
        "name": "pool/getter.func",
        "content": ";; handle onchain 'get' calls\n\n(int) handle_getter_messages(int msg_value, int fwd_fee, int op, int query_id, slice sender_address, slice in_msg_body) impure inline {\n    raw_reserve(0, 4);\n\n    if (op == getter_pool_data) { \n        var payload = begin_cell()\n            .store_uint(getter_pool_data, 32)\n            .store_uint(query_id, 64)\n            .store_coins(storage::reserve0)\n            .store_coins(storage::reserve1)\n            .store_slice(storage::token0_address)\n            .store_slice(storage::token1_address)\n            .store_ref(begin_cell()\n                .store_uint(storage::lp_fee, 8)\n                .store_uint(storage::protocol_fee, 8)\n                .store_uint(storage::ref_fee, 8)\n                .store_slice(storage::protocol_fee_address)\n                .store_coins(storage::collected_token0_protocol_fee)\n                .store_coins(storage::collected_token1_protocol_fee)\n            .end_cell());\n        send_payload(sender_address, payload.end_cell());\n        return (true);\n    }\n\n    if (op == getter_expected_outputs) { \n        throw_unless(NO_LIQUIDITY, storage::total_supply_lp > REQUIRED_MIN_LIQUIDITY);\n        (int amount, slice token_wallet) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());\n\n        int out = 0;\n        int ok = false;\n        int protocol_fee_out = 0;\n        int ref_fee_out = 0;\n\n        if (equal_slices(token_wallet, storage::token0_address)) {\n            ok = true;\n            (out, protocol_fee_out, ref_fee_out) = get_amount_out(false, amount, storage::reserve0, storage::reserve1);\n        }\n        if (equal_slices(token_wallet, storage::token1_address)) {\n            ok = true;\n            (out, protocol_fee_out, ref_fee_out) = get_amount_out(false, amount, storage::reserve1, storage::reserve0);\n        }\n    \n        throw_unless(INVALID_TOKEN, ok);\n    \n        var payload = begin_cell()\n            .store_uint(getter_expected_outputs, 32)\n            .store_uint(query_id, 64)\n            .store_coins((out <= 0 ? 0 : out))\n            .store_coins(protocol_fee_out)\n            .store_coins(ref_fee_out);\n        send_payload(sender_address, payload.end_cell());\n        return (true);\n    }\n\n    if (op == getter_lp_account_address) { \n        slice user_address = in_msg_body~load_msg_addr();\n    \n        var payload = begin_cell()\n            .store_uint(getter_expected_outputs, 32)\n            .store_uint(query_id, 64)\n            .store_slice(calculate_user_lp_account_address(user_address, my_address(), storage::lp_account_code));\n        send_payload(sender_address, payload.end_cell());\n        return (true);\n    }\n\n    if (op == getter_expected_tokens) { \n        (slice user_address, int amount0, int amount1) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins(), in_msg_body~load_coins());\n\n        int to_mint0 = (amount1 * storage::total_supply_lp) / storage::reserve0;\n        int to_mint1 = (amount0 * storage::total_supply_lp) / storage::reserve1;\n\n        int liquidity = min(to_mint0, to_mint1);\n    \n        var payload = begin_cell()\n            .store_uint(getter_expected_tokens, 32)\n            .store_uint(query_id, 64)\n            .store_coins(liquidity);\n        send_payload(sender_address, payload.end_cell());\n        return (true);\n    }\n\n    if (op == getter_expected_liquidity) { \n        int jetton_amount = in_msg_body~load_coins();\n\n        throw_unless(ZERO_OUTPUT, jetton_amount > 0); \n\n        int amount0_out = (jetton_amount * storage::reserve0) / storage::total_supply_lp; \n        int amount1_out = (jetton_amount * storage::reserve1) / storage::total_supply_lp; \n      \n        throw_unless(ZERO_OUTPUT, (amount0_out > 0) & (amount1_out > 0));\n\n        var payload = begin_cell()\n            .store_uint(getter_expected_liquidity, 32)\n            .store_uint(query_id, 64)\n            .store_coins(amount0_out)\n            .store_coins(amount1_out);\n        send_payload(sender_address, payload.end_cell());\n        return (true);\n    }\n\n    if (op == provide_wallet_address) {\n        ;; Reference implementation:\n        ;; https://github.com/ton-blockchain/token-contract/blob/920c5aa3a33ede6405b5653147895c9e27bfe535/ft/jetton-minter-discoverable.fc#L100\n        throw_unless(75, msg_value > fwd_fee + PROVIDE_ADD_GAS_CONSUMPTION);\n\n        (slice owner_address, int include_address?) = (in_msg_body~load_msg_addr(), in_msg_body~load_uint(1));\n\n        cell included_address = include_address? ? begin_cell().store_slice(owner_address).end_cell() : null();\n\n        var msg = begin_cell()\n            .store_uint(take_wallet_address, 32)\n            .store_uint(query_id, 64);\n\n        if (is_resolvable?(owner_address)) {\n            msg = msg.store_slice(calculate_user_jetton_lp_wallet_address(owner_address, my_address(), storage::jetton_lp_wallet_code));\n        } else {\n            msg = msg.store_uint(0, 2); ;; addr_none\n        }\n\n        send_payload(sender_address, msg.store_maybe_ref(included_address).end_cell());\n        return (true);\n    }\n    \n    return (false); ;; wrong op\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "contracts/staking/gas_fn.fc",
        "content": "cell get_gas_config_param(int wc) inline {\n    if (wc == -1) {\n        return config_param(20);\n    } else {\n        return config_param(21);\n    }\n}\n\n(slice, (int, int)) load_gas_flat_pfx(slice param) inline {\n    var flat_gas_limit = param~load_uint(64);\n    var flat_gas_price = param~load_uint(64);\n    return (param, (flat_gas_limit, flat_gas_price));\n}\n\n(slice, int) load_gas_prices(slice param) inline {\n    var gas_price = param~load_uint(64);\n    return (param, gas_price);\n}\n\n(slice, (int, int, int)) load_gas_limits_prices(slice param) inline_ref {\n    var contructor_tag = param~load_uint(8);\n    if (contructor_tag == 0xd1) {\n        var (flat_gas_limit, flat_gas_price) = param~load_gas_flat_pfx();\n        var (_, _, gas_price) = param~load_gas_limits_prices();\n        return (param, (flat_gas_limit, flat_gas_price, gas_price));\n    } elseif ((contructor_tag == 0xde) | (contructor_tag == 0xdd)) {\n        var gas_price = param~load_gas_prices();\n        return (param, (0, 0, gas_price));\n    } else {\n        return (param, (0, 0, 0));\n    }\n}\n\n(int, int, int) get_gas_limits_prices(int wc) inline {\n    var gas_price_config = get_gas_config_param(wc).begin_parse();\n    return gas_price_config~load_gas_limits_prices();\n}\n\nint get_gas_fee(int gas_amount, int wc) inline_ref {\n    var (flat_gas_limit, flat_gas_price, gas_price) = get_gas_limits_prices(wc);\n    return gas_amount < flat_gas_limit ? flat_gas_price : (gas_amount - flat_gas_limit) * (gas_price >> 16) + flat_gas_price;\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/storage.func",
        "content": "global slice storage::router_address;\nglobal int storage::lp_fee;\nglobal int storage::protocol_fee;\nglobal int storage::ref_fee;\nglobal slice storage::token0_address;\nglobal slice storage::token1_address;\nglobal int storage::total_supply_lp; \nglobal int storage::collected_token0_protocol_fee;\nglobal int storage::collected_token1_protocol_fee; \nglobal slice storage::protocol_fee_address;\nglobal int storage::reserve0;\nglobal int storage::reserve1; \nglobal cell storage::jetton_lp_wallet_code;\nglobal cell storage::lp_account_code;\n\n\n\n() load_storage() impure inline {\n    slice ds = get_data().begin_parse();\n    storage::router_address = ds~load_msg_addr();\n    storage::lp_fee = ds~load_uint(8);\n    storage::protocol_fee = ds~load_uint(8);\n    storage::ref_fee = ds~load_uint(8);\n    storage::token0_address = ds~load_msg_addr();\n    storage::token1_address = ds~load_msg_addr();\n    storage::total_supply_lp = ds~load_coins(); \n\n    cell dc_0 = ds~load_ref(); slice ds_0 = dc_0.begin_parse();\n    storage::collected_token0_protocol_fee = ds_0~load_coins();\n    storage::collected_token1_protocol_fee = ds_0~load_coins(); \n    storage::protocol_fee_address = ds_0~load_msg_addr();\n    storage::reserve0 = ds_0~load_coins();\n    storage::reserve1 = ds_0~load_coins(); \n\n    storage::jetton_lp_wallet_code = ds~load_ref();\n    storage::lp_account_code = ds~load_ref();\n}\n\n() save_storage() impure inline {\n    set_data(begin_cell()\n        .store_slice(storage::router_address)\n        .store_uint(storage::lp_fee, 8) \n        .store_uint(storage::protocol_fee, 8) \n        .store_uint(storage::ref_fee, 8) \n        .store_slice(storage::token0_address)\n        .store_slice(storage::token1_address) \n        .store_coins(storage::total_supply_lp)\n        .store_ref(begin_cell()\n            .store_coins(storage::collected_token0_protocol_fee) \n            .store_coins(storage::collected_token1_protocol_fee) \n            .store_slice(storage::protocol_fee_address)\n            .store_coins(storage::reserve0) \n            .store_coins(storage::reserve1)\n        .end_cell())\n        .store_ref(storage::jetton_lp_wallet_code)\n        .store_ref(storage::lp_account_code)\n    .end_cell());\n}\n\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool.func",
        "content": "#pragma version >=0.2.0;\n\n#include \"common/stdlib.func\";\n#include \"common/gas.func\";\n#include \"common/messages.func\";\n#include \"pool/op.func\";\n#include \"pool/params.func\";\n#include \"pool/errors.func\";\n#include \"common/utils.func\";\n#include \"pool/storage.func\";\n#include \"pool/utils1.func\";\n#include \"pool/jetton-utils.func\";\n#include \"pool/lp_account-utils.func\";\n#include \"pool/amm.func\"; \n#include \"pool/get.func\"; \n#include \"pool/router-calls.func\"; \n#include \"pool/getter.func\"; \n\n() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {\n  if (in_msg_body.slice_empty?()) {\n    return ();\n  }\n  slice cs = in_msg_full.begin_parse();\n  int flags = cs~load_uint(4);\n  \n  if (flags & 1) {\n    return ();\n  }\n\n  load_storage();\n\n  slice sender_address = cs~load_msg_addr();\n\n  (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));\n\n  if (op == burn_notification) { \n    ;; Sent by LP wallet after burning LP jettons to release liquidity\n    (int jetton_amount, slice from_address, slice response_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr());\n    int gas_required = get_gas_fee(25000, WORKCHAIN);\n    cs~load_msg_addr(); \n    cs~load_coins(); \n    cs~skip_bits(1); \n    cs~load_coins(); \n    throw_unless(INSUFFICIENT_GAS, (msg_value > gas_required) & (msg_value > cs~load_coins() * 6)); ;; use fwd_fee to estimate messages\n\n    throw_unless(INVALID_CALLER, equal_slices(calculate_user_jetton_lp_wallet_address(from_address, my_address(), storage::jetton_lp_wallet_code), sender_address));\n    throw_unless(ZERO_OUTPUT, jetton_amount > 0); \n\n    ;; get shares\n    int amount0_out = (jetton_amount * storage::reserve0) / storage::total_supply_lp; \n    int amount1_out = (jetton_amount * storage::reserve1) / storage::total_supply_lp; \n    \n    ;; both are positive\n    throw_unless(ZERO_OUTPUT, (amount0_out > 0) & (amount1_out > 0));\n\n    storage::reserve0 -= amount0_out;\n    storage::reserve1 -= amount1_out;\n    storage::total_supply_lp -= jetton_amount;\n\n    int gas = 0;\n    int mode = CARRY_REMAINING_GAS;\n    if (response_address.preload_uint(2) != 0) {\n      gas = (msg_value - gas_required) / 2;\n      mode = NORMAL;\n      var body = begin_cell()\n        .store_uint(excesses, 32)\n        .store_uint(query_id, 64);\n      send_message_nobounce(gas, response_address, body.end_cell(), IGNORE_ERRORS);\n    }\n    call_pay_to(gas, mode, query_id, from_address, burn_ok, amount0_out, amount1_out);\n    save_storage();\n    return ();\n  }\n  \n  if (op == cb_add_liquidity) {\n    ;; Sent by user's lp_account after adding liquidity\n    ;; not throwable\n    (int tot_am0, int tot_am1, slice user_address, int min_lp_out) = (in_msg_body~load_coins(), in_msg_body~load_coins(), in_msg_body~load_msg_addr(), in_msg_body~load_coins());\n    cell acc_state_init = calculate_lp_account_state_init(user_address, my_address(), storage::lp_account_code); \n    throw_unless(INVALID_CALLER, equal_slices(calculate_lp_account_address(acc_state_init), sender_address));\n\n    int liquidity = 0;\n    slice to = \"\";\n\n    if (storage::total_supply_lp == 0) { \n      ;; handle initial liquidity\n      liquidity = sqrt(tot_am0 * tot_am1) / REQUIRED_MIN_LIQUIDITY;\n      to = addr_none(); ;; Lock the initial liquidity, so it will be impossible to fully drain the pool.\n    } else {\n      int to_mint0 = (tot_am0 * storage::total_supply_lp) / storage::reserve0;\n      int to_mint1 = (tot_am1 * storage::total_supply_lp) / storage::reserve1;\n      liquidity = min(to_mint0, to_mint1); ;; mint the minimum amount of liquidity, excesses will be shared proportionally across the pool\n\n      to = user_address;\n    }\n\n    storage::reserve0 += tot_am0;\n    storage::reserve1 += tot_am1;\n    storage::total_supply_lp += liquidity;\n\n    ;; checks if\n    ;; - the user will get less than the minimum amount of liquidity\n    ;; - reserves exceeds max supply\n    if ((liquidity < min_lp_out) | ((storage::reserve0 > MAX_COINS) | (storage::reserve1 > MAX_COINS))) {      \n      var body = begin_cell()\n        .store_uint(add_liquidity, 32)\n        .store_uint(query_id, 64)\n        .store_coins(tot_am0)\n        .store_coins(tot_am1)\n        .store_coins(0); ;; hardencode to zero to avoid minting loop between pool and lp_account\n      ;; state_init needed since lp_account might be already destroyed\n      send_message_with_stateinit(0, sender_address, acc_state_init, body.end_cell(), CARRY_REMAINING_GAS + IGNORE_ERRORS);\n    } else {\n      _mint_lp(query_id, to, liquidity);\n      save_storage();\n    }\n    return ();\n  }\n\n  if (op == cb_refund_me) {\n    ;; Sent by user's lp_account after adding liquidity\n    ;; throwable\n    (int tot_am0, int tot_am1, slice user_address) = (in_msg_body~load_coins(), in_msg_body~load_coins(), in_msg_body~load_msg_addr());\n    throw_unless(INVALID_CALLER, equal_slices(calculate_user_lp_account_address(user_address, my_address(), storage::lp_account_code), sender_address));\n    call_pay_to(0, CARRY_REMAINING_GAS, query_id, user_address, refund_ok, tot_am0, tot_am1);\n    return ();\n  }\n\n  ;; handle swap, provide_lp and governance messages\n  if (equal_slices(sender_address, storage::router_address)) {\n    handle_router_messages(op, query_id, my_balance, msg_value, in_msg_body);\n    return ();\n  }\n\n  ;; called by anyone\n  if (op == collect_fees) { ;; throwable\n    throw_unless(NO_LIQUIDITY, storage::total_supply_lp > REQUIRED_MIN_LIQUIDITY);\n    throw_unless(LOW_LIQUIDITY, (storage::collected_token0_protocol_fee > REQUIRED_MIN_COLLECT_FEES) & (storage::collected_token1_protocol_fee > REQUIRED_MIN_COLLECT_FEES));\n    throw_unless(INVALID_RECIPIENT, ~ equal_slices(storage::protocol_fee_address, HOLE_ADDRESS));\n    int gas_required = get_gas_fee(40000, WORKCHAIN);\n\n    throw_unless(INSUFFICIENT_GAS, (msg_value - gas_required) > 1000000000); ;; 1 ton\n    int gas = (msg_value - gas_required) / 4;\n    int reward0 = storage::collected_token0_protocol_fee / 1000;\n    int reward1 = storage::collected_token1_protocol_fee / 1000;\n    storage::collected_token0_protocol_fee -= reward0;\n    storage::collected_token1_protocol_fee -= reward1;\n\n    throw_unless(ZERO_OUTPUT, (reward0 > 0) & (reward1 > 0));\n    throw_unless(ZERO_OUTPUT, (storage::collected_token0_protocol_fee > 0) & (storage::collected_token1_protocol_fee > 0));\n\n    call_pay_to(gas * 3, NORMAL, query_id, storage::protocol_fee_address, 0, storage::collected_token0_protocol_fee, storage::collected_token1_protocol_fee); ;; revert if fails\n    call_pay_to(gas, IGNORE_ERRORS, query_id, sender_address, 0, reward0, reward1);\n\n    storage::collected_token0_protocol_fee = 0;\n    storage::collected_token1_protocol_fee = 0;\n    save_storage();\n    return ();\n  }\n\n  cs~load_msg_addr(); \n  cs~load_coins(); \n  cs~skip_bits(1); \n  cs~load_coins(); \n  ;; make sure that the message has a valid opcode\n  if (handle_getter_messages(msg_value, cs~load_coins(), op, query_id, sender_address, in_msg_body)) {\n    return (); \n  }\n\n  throw(WRONG_OP);\n}\n",
        "is_entrypoint": true,
        "is_std_lib": false,
        "include_in_command": true
      },
      {
        "name": "pool/router-calls.func",
        "content": "\n\n() handle_router_messages(int op, int query_id, int my_balance, int msg_value, slice in_msg_body) impure inline {\n    if (op == swap) {\n        (slice from_user_address, slice token_wallet, int amount, int min_out, int has_ref) = (in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr(), in_msg_body~load_coins(), in_msg_body~load_coins(), in_msg_body~load_uint(1));\n        cell ref_bodycell = in_msg_body~load_ref(); \n        slice ref_body_slice = ref_bodycell.begin_parse();\n        slice from_real_user = ref_body_slice~load_msg_addr(); ;; parse who initialized the swap, always present\n\n        int out = 0;\n        int protocol_fee_out = 0;\n        int ref_fee_out = 0;\n        int tmp_am_0 = 0;\n        int tmp_am_1 = 0;\n        slice ref_address = addr_none();\n\n        int mode = CARRY_REMAINING_GAS;\n        int gas = 0;\n    \n        if (has_ref) {\n            mode = NORMAL;\n            gas = (msg_value - get_gas_fee(25000, WORKCHAIN)) / 2;\n            ref_address = ref_body_slice~load_msg_addr();\n        }\n\n        if (equal_slices(token_wallet, storage::token0_address)) { \n            (out, protocol_fee_out, ref_fee_out) = get_amount_out(has_ref, amount, storage::reserve0, storage::reserve1);\n            tmp_am_0 = amount;\n        } else {\n            (out, protocol_fee_out, ref_fee_out) = get_amount_out(has_ref, amount, storage::reserve1, storage::reserve0);\n            tmp_am_1 = amount;\n        }\n\n        ;; refund if not enough liquidity or not enough output or output less than min_out\n        if ((storage::total_supply_lp <= 0) | ((out <= 0) | (min_out >= out))) {\n            call_pay_to(0, CARRY_REMAINING_GAS, query_id, from_real_user, swap_refund_no_liq, tmp_am_0, tmp_am_1);\n            return ();\n        }\n\n        if (tmp_am_0) {\n            ;; swap token0 for token1\n            storage::reserve0 += amount;\n            storage::reserve1 -= (out + protocol_fee_out + ref_fee_out);\n            storage::collected_token1_protocol_fee += protocol_fee_out; \n\n            ;; refund if not enough balance or exceed max balance\n            if ((storage::reserve0 > MAX_COINS) | (storage::reserve1 <= 0)) {\n                call_pay_to(0, CARRY_REMAINING_GAS, query_id, from_real_user, swap_refund_reserve_err, tmp_am_0, tmp_am_1);\n                return ();\n            }\n\n            if (mode == NORMAL) { ;; 2 messages, pay referral\n                call_pay_to(gas, mode | IGNORE_ERRORS, query_id, ref_address, swap_ok_ref, 0, ref_fee_out); \n            }\n            call_pay_to(gas, mode, query_id, from_user_address, swap_ok, 0, out); \n        } else {    \n            ;; swap token1 for token0\n            storage::reserve0 -= (out + protocol_fee_out + ref_fee_out);\n            storage::reserve1 += amount;\n            storage::collected_token0_protocol_fee += protocol_fee_out; \n\n            ;; refund if not enough balance or exceed max balance\n            if ((storage::reserve1 > MAX_COINS) | (storage::reserve0 <= 0) ){\n                call_pay_to(0, CARRY_REMAINING_GAS, query_id, from_real_user, swap_refund_reserve_err, tmp_am_0, tmp_am_1);\n                return ();\n            }\n\n            if (mode == NORMAL) { ;; 2 messages, pay referral\n                call_pay_to(gas, mode | IGNORE_ERRORS, query_id, ref_address, swap_ok_ref, ref_fee_out, 0); \n            }\n            call_pay_to(gas, mode, query_id, from_user_address, swap_ok, out, 0); \n        }\n        save_storage();\n        return ();\n    }\n\n    if (op == provide_lp) { \n        (slice owner_addr, int min_lp_out, int amount0, int amount1) = (in_msg_body~load_msg_addr(), in_msg_body~load_coins(), in_msg_body~load_coins(), in_msg_body~load_coins());\n\n        cell state_init = calculate_lp_account_state_init(owner_addr, my_address(), storage::lp_account_code); \n        slice to_lp_account_address = calculate_lp_account_address(state_init);\n\n        ;; ruote to lp_account\n        var body = begin_cell()\n            .store_uint(add_liquidity, 32)\n            .store_uint(query_id, 64)\n            .store_coins(amount0)\n            .store_coins(amount1)\n            .store_coins(min_lp_out);\n        send_message_with_stateinit(0, to_lp_account_address, state_init, body.end_cell(), CARRY_REMAINING_GAS);\n        return ();\n    }\n\n\n    if (op == reset_gas) { \n        send_empty_message(my_balance - REQUIRED_TON_RESERVE, storage::router_address, NORMAL);\n        return ();\n    }\n\n    if (op == collect_fees) {\n        throw_unless(NO_LIQUIDITY, (storage::collected_token0_protocol_fee > 0) & (storage::collected_token1_protocol_fee > 0));\n        throw_unless(INVALID_RECIPIENT, ~ equal_slices(storage::protocol_fee_address, HOLE_ADDRESS));\n        call_pay_to(0, CARRY_REMAINING_GAS, query_id, storage::protocol_fee_address, 0, storage::collected_token0_protocol_fee, storage::collected_token1_protocol_fee);\n        storage::collected_token0_protocol_fee = 0;\n        storage::collected_token1_protocol_fee = 0;\n        save_storage();\n        return ();\n    }\n\n  \n    if (op == set_fees) { \n        (int new_lp_fee, int new_protocol_fee, int new_ref_fee, slice new_protocol_fee_address) = (in_msg_body~load_uint(8), in_msg_body~load_uint(8), in_msg_body~load_uint(8), in_msg_body~load_msg_addr());\n\n        throw_unless(FEE_OUT_RANGE, (MIN_FEE <= new_lp_fee) & (new_lp_fee <= MAX_FEE));\n        throw_unless(FEE_OUT_RANGE, (MIN_FEE <= new_protocol_fee) & (new_protocol_fee <= MAX_FEE));\n        throw_unless(FEE_OUT_RANGE, (MIN_FEE <= new_ref_fee) & (new_ref_fee <= MAX_FEE));\n\n        storage::lp_fee = new_lp_fee;\n        storage::protocol_fee = new_protocol_fee;\n        storage::ref_fee = new_ref_fee;\n        storage::protocol_fee_address = new_protocol_fee_address;\n        save_storage();\n        return ();\n    }\n\n    throw(WRONG_OP);\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "common/stdlib.func",
        "content": ";; Standard library for funC\n;;\n\n{-\n  # Tuple manipulation primitives\n  The names and the types are mostly self-explaining.\n  See [polymorhism with forall](https://ton.org/docs/#/func/functions?id=polymorphism-with-forall)\n  for more info on the polymorphic functions.\n\n  Note that currently values of atomic type `tuple` can't be cast to composite tuple type (e.g. `[int, cell]`)\n  and vise versa.\n-}\n\n{-\n  # Lisp-style lists\n\n  Lists can be represented as nested 2-elements tuples.\n  Empty list is conventionally represented as TVM `null` value (it can be obtained by calling [null()]).\n  For example, tuple `(1, (2, (3, null)))` represents list `[1, 2, 3]`. Elements of a list can be of different types.\n-}\n\n(int) divc (int x, int y) asm \"DIVC\";\nslice preload_bits_offset(slice s, int offset, int len) asm \"SDSUBSTR\";\n\n;;; Adds an element to the beginning of lisp-style list.\nforall X -> tuple cons(X head, tuple tail) asm \"CONS\";\n\n;;; Extracts the head and the tail of lisp-style list.\nforall X -> (X, tuple) uncons(tuple list) asm \"UNCONS\";\n\n;;; Extracts the tail and the head of lisp-style list.\nforall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) \"UNCONS\";\n\n;;; Returns the head of lisp-style list.\nforall X -> X car(tuple list) asm \"CAR\";\n\n;;; Returns the tail of lisp-style list.\ntuple cdr(tuple list) asm \"CDR\";\n\n;;; Creates tuple with zero elements.\ntuple empty_tuple() asm \"NIL\";\n\n;;; Appends a value `x` to a `Tuple t = (x1, ..., xn)`, but only if the resulting `Tuple t' = (x1, ..., xn, x)`\n;;; is of length at most 255. Otherwise throws a type check exception.\nforall X -> tuple tpush(tuple t, X value) asm \"TPUSH\";\nforall X -> (tuple, ()) ~tpush(tuple t, X value) asm \"TPUSH\";\n\n;;; Creates a tuple of length one with given argument as element.\nforall X -> [X] single(X x) asm \"SINGLE\";\n\n;;; Unpacks a tuple of length one\nforall X -> X unsingle([X] t) asm \"UNSINGLE\";\n\n;;; Creates a tuple of length two with given arguments as elements.\nforall X, Y -> [X, Y] pair(X x, Y y) asm \"PAIR\";\n\n;;; Unpacks a tuple of length two\nforall X, Y -> (X, Y) unpair([X, Y] t) asm \"UNPAIR\";\n\n;;; Creates a tuple of length three with given arguments as elements.\nforall X, Y, Z -> [X, Y, Z] triple(X x, Y y, Z z) asm \"TRIPLE\";\n\n;;; Unpacks a tuple of length three\nforall X, Y, Z -> (X, Y, Z) untriple([X, Y, Z] t) asm \"UNTRIPLE\";\n\n;;; Creates a tuple of length four with given arguments as elements.\nforall X, Y, Z, W -> [X, Y, Z, W] tuple4(X x, Y y, Z z, W w) asm \"4 TUPLE\";\n\n;;; Unpacks a tuple of length four\nforall X, Y, Z, W -> (X, Y, Z, W) untuple4([X, Y, Z, W] t) asm \"4 UNTUPLE\";\n\n;;; Returns the first element of a tuple (with unknown element types).\nforall X -> X first(tuple t) asm \"FIRST\";\n\n;;; Returns the second element of a tuple (with unknown element types).\nforall X -> X second(tuple t) asm \"SECOND\";\n\n;;; Returns the third element of a tuple (with unknown element types).\nforall X -> X third(tuple t) asm \"THIRD\";\n\n;;; Returns the fourth element of a tuple (with unknown element types).\nforall X -> X fourth(tuple t) asm \"3 INDEX\";\n\n;;; Returns the first element of a pair tuple.\nforall X, Y -> X pair_first([X, Y] p) asm \"FIRST\";\n\n;;; Returns the second element of a pair tuple.\nforall X, Y -> Y pair_second([X, Y] p) asm \"SECOND\";\n\n;;; Returns the first element of a triple tuple.\nforall X, Y, Z -> X triple_first([X, Y, Z] p) asm \"FIRST\";\n\n;;; Returns the second element of a triple tuple.\nforall X, Y, Z -> Y triple_second([X, Y, Z] p) asm \"SECOND\";\n\n;;; Returns the third element of a triple tuple.\nforall X, Y, Z -> Z triple_third([X, Y, Z] p) asm \"THIRD\";\n\n\n;;; Push null element (casted to given type)\n;;; By the TVM type `Null` FunC represents absence of a value of some atomic type.\n;;; So `null` can actually have any atomic type.\nforall X -> X null() asm \"PUSHNULL\";\n\n;;; Moves a variable [x] to the top of the stack\nforall X -> (X, ()) ~impure_touch(X x) impure asm \"NOP\";\n\n\n\n;;; Returns the current Unix time as an Integer\nint now() asm \"NOW\";\n\n;;; Returns the internal address of the current smart contract as a Slice with a `MsgAddressInt`.\n;;; If necessary, it can be parsed further using primitives such as [parse_std_addr].\nslice my_address() asm \"MYADDR\";\n\n;;; Returns the balance of the smart contract as a tuple consisting of an int\n;;; (balance in nanotoncoins) and a `cell`\n;;; (a dictionary with 32-bit keys representing the balance of \"extra currencies\")\n;;; at the start of Computation Phase.\n;;; Note that RAW primitives such as [send_raw_message] do not update this field.\n[int, cell] get_balance() asm \"BALANCE\";\n\n;;; Returns the logical time of the current transaction.\nint cur_lt() asm \"LTIME\";\n\n;;; Returns the starting logical time of the current block.\nint block_lt() asm \"BLOCKLT\";\n\n;;; Computes the representation hash of a `cell` [c] and returns it as a 256-bit unsigned integer `x`.\n;;; Useful for signing and checking signatures of arbitrary entities represented by a tree of cells.\nint cell_hash(cell c) asm \"HASHCU\";\n\n;;; Computes the hash of a `slice s` and returns it as a 256-bit unsigned integer `x`.\n;;; The result is the same as if an ordinary cell containing only data and references from `s` had been created\n;;; and its hash computed by [cell_hash].\nint slice_hash(slice s) asm \"HASHSU\";\n\n;;; Computes sha256 of the data bits of `slice` [s]. If the bit length of `s` is not divisible by eight,\n;;; throws a cell underflow exception. The hash value is returned as a 256-bit unsigned integer `x`.\nint string_hash(slice s) asm \"SHA256U\";\n\n{-\n  # Signature checks\n-}\n\n;;; Checks the Ed25519-`signature` of a `hash` (a 256-bit unsigned integer, usually computed as the hash of some data)\n;;; using [public_key] (also represented by a 256-bit unsigned integer).\n;;; The signature must contain at least 512 data bits; only the first 512 bits are used.\n;;; The result is `−1` if the signature is valid, `0` otherwise.\n;;; Note that `CHKSIGNU` creates a 256-bit slice with the hash and calls `CHKSIGNS`.\n;;; That is, if [hash] is computed as the hash of some data, these data are hashed twice,\n;;; the second hashing occurring inside `CHKSIGNS`.\nint check_signature(int hash, slice signature, int public_key) asm \"CHKSIGNU\";\n\n;;; Checks whether [signature] is a valid Ed25519-signature of the data portion of `slice data` using `public_key`,\n;;; similarly to [check_signature].\n;;; If the bit length of [data] is not divisible by eight, throws a cell underflow exception.\n;;; The verification of Ed25519 signatures is the standard one,\n;;; with sha256 used to reduce [data] to the 256-bit number that is actually signed.\nint check_data_signature(slice data, slice signature, int public_key) asm \"CHKSIGNS\";\n\n{---\n  # Computation of boc size\n  The primitives below may be useful for computing storage fees of user-provided data.\n-}\n\n;;; Returns `(x, y, z, -1)` or `(null, null, null, 0)`.\n;;; Recursively computes the count of distinct cells `x`, data bits `y`, and cell references `z`\n;;; in the DAG rooted at `cell` [c], effectively returning the total storage used by this DAG taking into account\n;;; the identification of equal cells.\n;;; The values of `x`, `y`, and `z` are computed by a depth-first traversal of this DAG,\n;;; with a hash table of visited cell hashes used to prevent visits of already-visited cells.\n;;; The total count of visited cells `x` cannot exceed non-negative [max_cells];\n;;; otherwise the computation is aborted before visiting the `(max_cells + 1)`-st cell and\n;;; a zero flag is returned to indicate failure. If [c] is `null`, returns `x = y = z = 0`.\n(int, int, int) compute_data_size(cell c, int max_cells) impure asm \"CDATASIZE\";\n\n;;; Similar to [compute_data_size?], but accepting a `slice` [s] instead of a `cell`.\n;;; The returned value of `x` does not take into account the cell that contains the `slice` [s] itself;\n;;; however, the data bits and the cell references of [s] are accounted for in `y` and `z`.\n(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm \"SDATASIZE\";\n\n;;; A non-quiet version of [compute_data_size?] that throws a cell overflow exception (`8`) on failure.\n(int, int, int, int) compute_data_size?(cell c, int max_cells) asm \"CDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n\n;;; A non-quiet version of [slice_compute_data_size?] that throws a cell overflow exception (8) on failure.\n(int, int, int, int) slice_compute_data_size?(cell c, int max_cells) asm \"SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n\n;;; Throws an exception with exit_code excno if cond is not 0 (commented since implemented in compilator)\n;; () throw_if(int excno, int cond) impure asm \"THROWARGIF\";\n\n{--\n  # Debug primitives\n  Only works for local TVM execution with debug level verbosity\n-}\n;;; Dumps the stack (at most the top 255 values) and shows the total stack depth.\n() dump_stack() impure asm \"DUMPSTK\";\n\n{-\n  # Persistent storage save and load\n-}\n\n;;; Returns the persistent contract storage cell. It can be parsed or modified with slice and builder primitives later.\ncell get_data() asm \"c4 PUSH\";\n\n;;; Sets `cell` [c] as persistent contract data. You can update persistent contract storage with this primitive.\n() set_data(cell c) impure asm \"c4 POP\";\n\n{-\n  # Continuation primitives\n-}\n;;; Usually `c3` has a continuation initialized by the whole code of the contract. It is used for function calls.\n;;; The primitive returns the current value of `c3`.\ncont get_c3() impure asm \"c3 PUSH\";\n\n;;; Updates the current value of `c3`. Usually, it is used for updating smart contract code in run-time.\n;;; Note that after execution of this primitive the current code\n;;; (and the stack of recursive function calls) won't change,\n;;; but any other function call will use a function from the new code.\n() set_c3(cont c) impure asm \"c3 POP\";\n\n;;; Transforms a `slice` [s] into a simple ordinary continuation `c`, with `c.code = s` and an empty stack and savelist.\ncont bless(slice s) impure asm \"BLESS\";\n\n{---\n  # Gas related primitives\n-}\n\n;;; Sets current gas limit `gl` to its maximal allowed value `gm`, and resets the gas credit `gc` to zero,\n;;; decreasing the value of `gr` by `gc` in the process.\n;;; In other words, the current smart contract agrees to buy some gas to finish the current transaction.\n;;; This action is required to process external messages, which bring no value (hence no gas) with themselves.\n;;;\n;;; For more details check [accept_message effects](https://ton.org/docs/#/smart-contracts/accept).\n() accept_message() impure asm \"ACCEPT\";\n\n;;; Sets current gas limit `gl` to the minimum of limit and `gm`, and resets the gas credit `gc` to zero.\n;;; If the gas consumed so far (including the present instruction) exceeds the resulting value of `gl`,\n;;; an (unhandled) out of gas exception is thrown before setting new gas limits.\n;;; Notice that [set_gas_limit] with an argument `limit ≥ 2^63 − 1` is equivalent to [accept_message].\n() set_gas_limit(int limit) impure asm \"SETGASLIMIT\";\n\n;;; Commits the current state of registers `c4` (“persistent data”) and `c5` (“actions”)\n;;; so that the current execution is considered “successful” with the saved values even if an exception\n;;; in Computation Phase is thrown later.\n() commit() impure asm \"COMMIT\";\n\n;;; Not implemented\n;;() buy_gas(int gram) impure asm \"BUYGAS\";\n\n;;; Computes the amount of gas that can be bought for `amount` nanoTONs,\n;;; and sets `gl` accordingly in the same way as [set_gas_limit].\n() buy_gas(int amount) impure asm \"BUYGAS\";\n\n;;; Computes the minimum of two integers [x] and [y].\nint min(int x, int y) asm \"MIN\";\n\n;;; Computes the maximum of two integers [x] and [y].\nint max(int x, int y) asm \"MAX\";\n\n;;; Sorts two integers.\n(int, int) minmax(int x, int y) asm \"MINMAX\";\n\n;;; Computes the absolute value of an integer [x].\nint abs(int x) asm \"ABS\";\n\n{-\n  # Slice primitives\n\n  It is said that a primitive _loads_ some data,\n  if it returns the data and the remainder of the slice\n  (so it can also be used as [modifying method](https://ton.org/docs/#/func/statements?id=modifying-methods)).\n\n  It is said that a primitive _preloads_ some data, if it returns only the data\n  (it can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods)).\n\n  Unless otherwise stated, loading and preloading primitives read the data from a prefix of the slice.\n-}\n\n\n;;; Converts a `cell` [c] into a `slice`. Notice that [c] must be either an ordinary cell,\n;;; or an exotic cell (see [TVM.pdf](https://ton-blockchain.github.io/docs/tvm.pdf), 3.1.2)\n;;; which is automatically loaded to yield an ordinary cell `c'`, converted into a `slice` afterwards.\nslice begin_parse(cell c) asm \"CTOS\";\n\n;;; Checks if [s] is empty. If not, throws an exception.\n() end_parse(slice s) impure asm \"ENDS\";\n\n;;; Loads the first reference from the slice.\n(slice, cell) load_ref(slice s) asm( -> 1 0) \"LDREF\";\n\n;;; Preloads the first reference from the slice.\ncell preload_ref(slice s) asm \"PLDREF\";\n\n  {- Functions below are commented because are implemented on compilator level for optimisation -}\n\n;;; Loads a signed [len]-bit integer from a slice [s].\n;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) \"LDIX\";\n\n;;; Loads an unsigned [len]-bit integer from a slice [s].\n;; (slice, int) ~load_uint(slice s, int len) asm( -> 1 0) \"LDUX\";\n\n;;; Preloads a signed [len]-bit integer from a slice [s].\n;; int preload_int(slice s, int len) asm \"PLDIX\";\n\n;;; Preloads an unsigned [len]-bit integer from a slice [s].\n;; int preload_uint(slice s, int len) asm \"PLDUX\";\n\n;;; Loads the first `0 ≤ len ≤ 1023` bits from slice [s] into a separate `slice s''`.\n;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) \"LDSLICEX\";\n\n;;; Preloads the first `0 ≤ len ≤ 1023` bits from slice [s] into a separate `slice s''`.\n;; slice preload_bits(slice s, int len) asm \"PLDSLICEX\";\n\n;;; Loads serialized amount of TonCoins (any unsigned integer up to `2^128 - 1`).\n(slice, int) load_grams(slice s) asm( -> 1 0) \"LDGRAMS\";\n(slice, int) load_coins(slice s) asm( -> 1 0) \"LDGRAMS\";\n\n;;; Returns all but the first `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\n(slice, ()) ~skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\n\n;;; Returns the first `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice first_bits(slice s, int len) asm \"SDCUTFIRST\";\n\n;;; Returns all but the last `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\n(slice, ()) ~skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\n\n;;; Returns the last `0 ≤ len ≤ 1023` bits of `slice` [s].\nslice slice_last(slice s, int len) asm \"SDCUTLAST\";\n\n;;; Loads a dictionary `D` (HashMapE) from `slice` [s].\n;;; (returns `null` if `nothing` constructor is used).\n(slice, cell) load_dict(slice s) asm( -> 1 0) \"LDDICT\";\n\n;;; Preloads a dictionary `D` from `slice` [s].\ncell preload_dict(slice s) asm \"PLDDICT\";\n\n;;; Loads a dictionary as [load_dict], but returns only the remainder of the slice.\nslice skip_dict(slice s) asm \"SKIPDICT\";\n\n;;; Loads (Maybe ^Cell) from `slice` [s].\n;;; In other words loads 1 bit and if it is true\n;;; loads first ref and return it with slice remainder\n;;; otherwise returns `null` and slice remainder\n(slice, cell) load_maybe_ref(slice s) asm( -> 1 0) \"LDOPTREF\";\n\n;;; Preloads (Maybe ^Cell) from `slice` [s].\ncell preload_maybe_ref(slice s) asm \"PLDOPTREF\";\n\n\n;;; Returns the depth of `cell` [c].\n;;; If [c] has no references, then return `0`;\n;;; otherwise the returned value is one plus the maximum of depths of cells referred to from [c].\n;;; If [c] is a `null` instead of a cell, returns zero.\nint cell_depth(cell c) asm \"CDEPTH\";\n\n\n{-\n  # Slice size primitives\n-}\n\n;;; Returns the number of references in `slice` [s].\nint slice_refs(slice s) asm \"SREFS\";\n\n;;; Returns the number of data bits in `slice` [s].\nint slice_bits(slice s) asm \"SBITS\";\n\n;;; Returns both the number of data bits and the number of references in `slice` [s].\n(int, int) slice_bits_refs(slice s) asm \"SBITREFS\";\n\n;;; Checks whether a `slice` [s] is empty (i.e., contains no bits of data and no cell references).\nint slice_empty?(slice s) asm \"SEMPTY\";\n\n;;; Checks whether `slice` [s] has no bits of data.\nint slice_data_empty?(slice s) asm \"SDEMPTY\";\n\n;;; Checks whether `slice` [s] has no references.\nint slice_refs_empty?(slice s) asm \"SREMPTY\";\n\n;;; Returns the depth of `slice` [s].\n;;; If [s] has no references, then returns `0`;\n;;; otherwise the returned value is one plus the maximum of depths of cells referred to from [s].\nint slice_depth(slice s) asm \"SDEPTH\";\n\n{-\n  # Builder size primitives\n-}\n\n;;; Returns the number of cell references already stored in `builder` [b]\nint builder_refs(builder b) asm \"BREFS\";\n\n;;; Returns the number of data bits already stored in `builder` [b].\nint builder_bits(builder b) asm \"BBITS\";\n\n;;; Returns the depth of `builder` [b].\n;;; If no cell references are stored in [b], then returns 0;\n;;; otherwise the returned value is one plus the maximum of depths of cells referred to from [b].\nint builder_depth(builder b) asm \"BDEPTH\";\n\n{-\n  # Builder primitives\n  It is said that a primitive _stores_ a value `x` into a builder `b`\n  if it returns a modified version of the builder `b'` with the value `x` stored at the end of it.\n  It can be used as [non-modifying method](https://ton.org/docs/#/func/statements?id=non-modifying-methods).\n\n  All the primitives below first check whether there is enough space in the `builder`,\n  and only then check the range of the value being serialized.\n-}\n\n;;; Creates a new empty `builder`.\nbuilder begin_cell() asm \"NEWC\";\n\n;;; Converts a `builder` into an ordinary `cell`.\ncell end_cell(builder b) asm \"ENDC\";\n\n;;; Stores a reference to `cell` [c] into `builder` [b].\nbuilder store_ref(builder b, cell c) asm(c b) \"STREF\";\n\n;;; Stores an unsigned [len]-bit integer `x` into `b` for `0 ≤ len ≤ 256`.\n;; builder store_uint(builder b, int x, int len) asm(x b len) \"STUX\";\n\n;;; Stores a signed [len]-bit integer `x` into `b` for` 0 ≤ len ≤ 257`.\n;; builder store_int(builder b, int x, int len) asm(x b len) \"STIX\";\n\n\n;;; Stores `slice` [s] into `builder` [b]\nbuilder store_slice(builder b, slice s) asm \"STSLICER\";\n\n;;; Stores (serializes) an integer [x] in the range `0..2^128 − 1` into `builder` [b].\n;;; The serialization of [x] consists of a 4-bit unsigned big-endian integer `l`,\n;;; which is the smallest integer `l ≥ 0`, such that `x < 2^8l`,\n;;; followed by an `8l`-bit unsigned big-endian representation of [x].\n;;; If [x] does not belong to the supported range, a range check exception is thrown.\n;;;\n;;; Store amounts of TonCoins to the builder as VarUInteger 16\nbuilder store_grams(builder b, int x) asm \"STGRAMS\";\nbuilder store_coins(builder b, int x) asm \"STGRAMS\";\n\n;;; Stores dictionary `D` represented by `cell` [c] or `null` into `builder` [b].\n;;; In other words, stores a `1`-bit and a reference to [c] if [c] is not `null` and `0`-bit otherwise.\nbuilder store_dict(builder b, cell c) asm(c b) \"STDICT\";\n\n;;; Stores (Maybe ^Cell) to builder:\n;;; if cell is null store 1 zero bit\n;;; otherwise store 1 true bit and ref to cell\nbuilder store_maybe_ref(builder b, cell c) asm(c b) \"STOPTREF\";\n\n\n{-\n  # Address manipulation primitives\n  The address manipulation primitives listed below serialize and deserialize values according to the following TL-B scheme:\n  ```TL-B\n  addr_none$00 = MsgAddressExt;\n  addr_extern$01 len:(## 8) external_address:(bits len)\n               = MsgAddressExt;\n  anycast_info$_ depth:(#<= 30) { depth >= 1 }\n    rewrite_pfx:(bits depth) = Anycast;\n  addr_std$10 anycast:(Maybe Anycast)\n    workchain_id:int8 address:bits256 = MsgAddressInt;\n  addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)\n    workchain_id:int32 address:(bits addr_len) = MsgAddressInt;\n  _ _:MsgAddressInt = MsgAddress;\n  _ _:MsgAddressExt = MsgAddress;\n\n  int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool\n    src:MsgAddress dest:MsgAddressInt\n    value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams\n    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;\n  ext_out_msg_info$11 src:MsgAddress dest:MsgAddressExt\n    created_lt:uint64 created_at:uint32 = CommonMsgInfoRelaxed;\n  ```\n  A deserialized `MsgAddress` is represented by a tuple `t` as follows:\n\n  - `addr_none` is represented by `t = (0)`,\n    i.e., a tuple containing exactly one integer equal to zero.\n  - `addr_extern` is represented by `t = (1, s)`,\n    where slice `s` contains the field `external_address`. In other words, `\n    t` is a pair (a tuple consisting of two entries), containing an integer equal to one and slice `s`.\n  - `addr_std` is represented by `t = (2, u, x, s)`,\n    where `u` is either a `null` (if `anycast` is absent) or a slice `s'` containing `rewrite_pfx` (if anycast is present).\n    Next, integer `x` is the `workchain_id`, and slice `s` contains the address.\n  - `addr_var` is represented by `t = (3, u, x, s)`,\n    where `u`, `x`, and `s` have the same meaning as for `addr_std`.\n-}\n\n;;; Loads from slice [s] the only prefix that is a valid `MsgAddress`,\n;;; and returns both this prefix `s'` and the remainder `s''` of [s] as slices.\n(slice, slice) load_msg_addr(slice s) asm( -> 1 0) \"LDMSGADDR\";\n\n;;; Decomposes slice [s] containing a valid `MsgAddress` into a `tuple t` with separate fields of this `MsgAddress`.\n;;; If [s] is not a valid `MsgAddress`, a cell deserialization exception is thrown.\ntuple parse_addr(slice s) asm \"PARSEMSGADDR\";\n\n;;; Parses slice [s] containing a valid `MsgAddressInt` (usually a `msg_addr_std`),\n;;; applies rewriting from the anycast (if present) to the same-length prefix of the address,\n;;; and returns both the workchain and the 256-bit address as integers.\n;;; If the address is not 256-bit, or if [s] is not a valid serialization of `MsgAddressInt`,\n;;; throws a cell deserialization exception.\n(int, int) parse_std_addr(slice s) asm \"REWRITESTDADDR\";\n\n;;; A variant of [parse_std_addr] that returns the (rewritten) address as a slice [s],\n;;; even if it is not exactly 256 bit long (represented by a `msg_addr_var`).\n(int, slice) parse_var_addr(slice s) asm \"REWRITEVARADDR\";\n\n{-\n  # Dictionary primitives\n-}\n\n\n;;; Sets the value associated with [key_len]-bit key signed index in dictionary [dict] to [value] (cell),\n;;; and returns the resulting dictionary.\ncell idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\n(cell, ()) ~idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\n\n;;; Sets the value associated with [key_len]-bit key unsigned index in dictionary [dict] to [value] (cell),\n;;; and returns the resulting dictionary.\ncell udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\n(cell, ()) ~udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\n\ncell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETOPTREF\";\n(cell, int) idict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETREF\" \"NULLSWAPIFNOT\";\n(cell, int) udict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGETREF\" \"NULLSWAPIFNOT\";\n(cell, cell) idict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETGETOPTREF\";\n(cell, cell) udict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETGETOPTREF\";\n(cell, int) idict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDEL\";\n(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDEL\";\n(slice, int) idict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGET\" \"NULLSWAPIFNOT\";\n(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\ncell udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\n(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\ncell idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\n(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\ncell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUADD\";\n(cell, int) udict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUREPLACE\";\n(cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIADD\";\n(cell, int) idict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIREPLACE\";\ncell udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\n(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\ncell idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\n(cell, ()) ~idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\ncell dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, int) udict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUADDB\";\n(cell, int) udict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUREPLACEB\";\n(cell, int) idict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIADDB\";\n(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIREPLACEB\";\n(cell, int, slice, int) udict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) udict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREVEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREVEQ\" \"NULLSWAPIFNOT2\";\n\n;;; Creates an empty dictionary, which is actually a null value. Equivalent to PUSHNULL\ncell new_dict() asm \"NEWDICT\";\n;;; Checks whether a dictionary is empty. Equivalent to cell_null?.\nint dict_empty?(cell c) asm \"DICTEMPTY\";\n\n\n{- Prefix dictionary primitives -}\n(slice, slice, slice, int) pfxdict_get?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTGETQ\" \"NULLSWAPIFNOT2\";\n(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) asm(value key dict key_len) \"PFXDICTSET\";\n(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTDEL\";\n\n;;; Returns the value of the global configuration parameter with integer index `i` as a `cell` or `null` value.\ncell config_param(int x) asm \"CONFIGOPTPARAM\";\n;;; Checks whether c is a null. Note, that FunC also has polymorphic null? built-in.\nint cell_null?(cell c) asm \"ISNULL\";\n\n;;; Creates an output action which would reserve exactly amount nanotoncoins (if mode = 0), at most amount nanotoncoins (if mode = 2), or all but amount nanotoncoins (if mode = 1 or mode = 3), from the remaining balance of the account. It is roughly equivalent to creating an outbound message carrying amount nanotoncoins (or b − amount nanotoncoins, where b is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder. Bit +2 in mode means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved. Bit +8 in mode means `amount <- -amount` before performing any further actions. Bit +4 in mode means that amount is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions. Currently, amount must be a non-negative integer, and mode must be in the range 0..15.\n() raw_reserve(int amount, int mode) impure asm \"RAWRESERVE\";\n;;; Similar to raw_reserve, but also accepts a dictionary extra_amount (represented by a cell or null) with extra currencies. In this way currencies other than TonCoin can be reserved.\n() raw_reserve_extra(int amount, cell extra_amount, int mode) impure asm \"RAWRESERVEX\";\n;;; Sends a raw message contained in msg, which should contain a correctly serialized object Message X, with the only exception that the source address is allowed to have dummy value addr_none (to be automatically replaced with the current smart contract address), and ihr_fee, fwd_fee, created_lt and created_at fields can have arbitrary values (to be rewritten with correct values during the action phase of the current transaction). Integer parameter mode contains the flags. Currently mode = 0 is used for ordinary messages; mode = 128 is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message); mode = 64 is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount); mode' = mode + 1 means that the sender wants to pay transfer fees separately; mode' = mode + 2 means that any errors arising while processing this message during the action phase should be ignored. Finally, mode' = mode + 32 means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with +128.\n() send_raw_message(cell msg, int mode) impure asm \"SENDRAWMSG\";\n;;; Creates an output action that would change this smart contract code to that given by cell new_code. Notice that this change will take effect only after the successful termination of the current run of the smart contract\n() set_code(cell new_code) impure asm \"SETCODE\";\n\n;;; Generates a new pseudo-random unsigned 256-bit integer x. The algorithm is as follows: if r is the old value of the random seed, considered as a 32-byte array (by constructing the big-endian representation of an unsigned 256-bit integer), then its sha512(r) is computed; the first 32 bytes of this hash are stored as the new value r' of the random seed, and the remaining 32 bytes are returned as the next random value x.\nint random() impure asm \"RANDU256\";\n;;; Generates a new pseudo-random integer z in the range 0..range−1 (or range..−1, if range < 0). More precisely, an unsigned random value x is generated as in random; then z := x * range / 2^256 is computed.\nint rand(int range) impure asm \"RAND\";\n;;; Returns the current random seed as an unsigned 256-bit Integer.\nint get_seed() impure asm \"RANDSEED\";\n;;; Sets the random seed to unsigned 256-bit seed.\n() set_seed(int x) impure asm \"SETRAND\";\n;;; Mixes unsigned 256-bit integer x into the random seed r by setting the random seed to sha256 of the concatenation of two 32-byte strings: the first with the big-endian representation of the old seed r, and the second with the big-endian representation of x.\n() randomize(int x) impure asm \"ADDRAND\";\n;;; Equivalent to randomize(cur_lt());.\n() randomize_lt() impure asm \"LTIME\" \"ADDRAND\";\n\n;;; Checks whether the data parts of two slices coinside\nint equal_slice_bits(slice a, slice b) asm \"SDEQ\";\nint equal_slices(slice a, slice b) asm \"SDEQ\";\n\n;;; Concatenates two builders\nbuilder store_builder(builder to, builder from) asm \"STBR\";\n",
        "is_entrypoint": false,
        "is_std_lib": true,
        "include_in_command": true
      },
      {
        "name": "pool/errors.func",
        "content": "const NO_LIQUIDITY = 80;\nconst ZERO_OUTPUT = 81;\nconst INVALID_CALLER = 82;\nconst INSUFFICIENT_GAS = 83;\nconst FEE_OUT_RANGE = 85;\nconst INVALID_TOKEN = 86;\nconst LOW_AMOUNT = 87;\nconst LOW_LIQUIDITY = 88;\nconst WRONG_K = 89;\nconst MATH_ERROR = 90;\nconst INVALID_RECIPIENT = 91;\n\nconst WRONG_OP = 0xffff;",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/utils1.func",
        "content": "int sqrt(int x) inline {\n  if (x == 0) { return x; }\n\n  int r = 181;\n  int xx = x;\n  if (xx >= 0x100000000000000000000000000000000) {\n    xx >>= 128;\n    r <<= 64;\n  }\n  if (xx >= 0x10000000000000000) {\n    xx >>= 64;\n    r <<= 32;\n  }\n  if (xx >= 0x100000000) {\n    xx >>= 32;\n    r <<= 16;\n  }\n  if (xx >= 0x10000) {\n    xx >>= 16;\n    r <<= 8;\n  }\n\n  r = (r * (xx + 65536)) >> 18;\n\n  repeat(7) {\n    r = (r + x / r) >> 1;\n  }\n\n  int r1 = x / r;\n\n  return (r < r1 ? r : r1);\n}\n\n() call_pay_to(int amount, int mode, int query_id, slice to_address, int exit_code, int amount0_out, int amount1_out) impure inline_ref {\n  var body = begin_cell()\n    .store_uint(pay_to, 32)\n    .store_uint(query_id, 64)\n    .store_slice(to_address)\n    .store_uint(exit_code, 32)\n    .store_uint(1, 1)\n    .store_ref(begin_cell()\n      .store_coins(amount0_out) \n      .store_slice(storage::token0_address)\n      .store_coins(amount1_out)\n      .store_slice(storage::token1_address)\n    .end_cell());\n  send_message_nobounce(amount, storage::router_address, body.end_cell(), mode);\n}\n\nint is_resolvable?(slice addr) inline {\n    (int wc, _) = parse_std_addr(addr);\n    return wc == WORKCHAIN;\n}\n\nslice address_to_hex_string(int value) inline {\n  if (value == 0) {\n    builder buffer = begin_cell();\n    int i = 0;\n    while (i < 64){\n      buffer = buffer.store_uint(\"0\"u, 8);\n      i += 1;\n    }\n    return buffer.end_cell().begin_parse().preload_bits(i * 8);\n  } else {\n\n    int j = value;\n    int length = 0;\n    while (j != 0) {\n      length += 1;\n      j = j >> 4;\n    }\n    \n    int mask = 15;\n    builder buffer = begin_cell();\n\n    while (value != 0) {\n      int curr = (value & mask);\n      if(curr > 9){\n        buffer = buffer.store_uint(55 + curr, 8);\n      } else {\n        buffer = buffer.store_uint(48 + curr, 8);\n      }\n      value = value >> 4;\n    }\n\n    builder final_cell = begin_cell();\n\n    slice reversed_buffer = buffer.end_cell().begin_parse();\n    int i = 64;\n    while(i > 0){\n      i -= 1;\n      slice chr = reversed_buffer.preload_bits_offset(i * 8, 8);\n      final_cell = final_cell.store_slice(chr);\n    }\n    return final_cell.end_cell().begin_parse().preload_bits(512);\n  }\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/op.func",
        "content": "const transfer = 0xf8a7ea5;\nconst transfer_notification = 0x7362d09c;\nconst internal_transfer = 0x178d4519;\nconst excesses = 0xd53276db;\nconst burn = 0x595f07bc;\nconst burn_notification = 0x7bdd97de;\n\nconst provide_wallet_address = 0x2c76b973;\nconst take_wallet_address = 0xd1735400;\n\n\nconst swap = \"swap\"c;\nconst provide_lp = \"provide_lp\"c;\nconst pay_to = \"pay_to\"c;\n\n;; swap callbacks opcodes\nconst swap_refund_no_liq = \"swap_refund_no_liq\"c;\nconst swap_refund_reserve_err = \"swap_refund_reserve_err\"c;\n\nconst swap_ok_ref = \"swap_ok_ref\"c;\nconst swap_ok = \"swap_ok\"c;\nconst burn_ok = \"burn_ok\"c;\nconst refund_ok = \"refund_ok\"c;\n\nconst collect_fees = \"collect_fees\"c;\nconst set_fees = \"set_fees\"c;\nconst reset_gas = \"reset_gas\"c;\nconst add_liquidity = \"add_liquidity\"c;\nconst cb_add_liquidity = \"cb_add_liquidity\"c;\nconst cb_refund_me = \"cb_refund_me\"c;\n\n;; async \"get\" calls\nconst getter_pool_data = \"getter_pool_data\"c;\nconst getter_expected_outputs = \"getter_expected_outputs\"c;\nconst getter_lp_account_address = \"getter_lp_account_address\"c;\nconst getter_expected_tokens = \"getter_expected_tokens\"c;\nconst getter_expected_liquidity = \"getter_expected_liquidity\"c;",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/jetton-utils.func",
        "content": "cell pack_jetton_lp_wallet_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {\n  return begin_cell()\n    .store_coins(balance)\n    .store_slice(owner_address)\n    .store_slice(jetton_master_address)\n    .store_ref(jetton_wallet_code)\n  .end_cell();\n}\n\ncell calculate_jetton_lp_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {\n  return begin_cell()\n    .store_uint(0, 2)\n    .store_dict(jetton_wallet_code)\n    .store_dict(pack_jetton_lp_wallet_data(0, owner_address, jetton_master_address, jetton_wallet_code))\n    .store_uint(0, 1)\n  .end_cell();\n}\n\nslice calculate_jetton_lp_wallet_address(cell state_init) inline {\n  return begin_cell().store_uint(4, 3)\n    .store_int(WORKCHAIN, 8)\n    .store_uint(cell_hash(state_init), 256)\n  .end_cell().begin_parse();\n}\n\nslice calculate_user_jetton_lp_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {\n  return calculate_jetton_lp_wallet_address(calculate_jetton_lp_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/get.func",
        "content": ";; get methods\n(int, int, slice, slice, int, int, int, slice, int, int) get_pool_data() method_id {\n    load_storage();\n    return (\n        storage::reserve0,\n        storage::reserve1,\n        storage::token0_address,\n        storage::token1_address,\n        storage::lp_fee,\n        storage::protocol_fee, \n        storage::ref_fee,\n        storage::protocol_fee_address,\n        storage::collected_token0_protocol_fee, \n        storage::collected_token1_protocol_fee\n    );\n}\n\n(int, int, int) get_expected_outputs(int amount, slice token_wallet) method_id {\n    load_storage();\n    throw_unless(NO_LIQUIDITY, storage::total_supply_lp > REQUIRED_MIN_LIQUIDITY);\n    int out = 0;\n    int protocol_fee_out = 0;\n    int ref_fee_out = 0;\n\n    if (equal_slices(token_wallet, storage::token0_address)) {\n            (out, protocol_fee_out, ref_fee_out) =  get_amount_out(\n            false, \n            amount, \n            storage::reserve0, \n            storage::reserve1\n        );\n    }\n    if (equal_slices(token_wallet, storage::token1_address)) {\n            (out, protocol_fee_out, ref_fee_out) =  get_amount_out(\n            false, \n            amount, \n            storage::reserve1, \n            storage::reserve0\n        );\n    }\n    return ((out < 0 ? 0 : out), protocol_fee_out, ref_fee_out);\n}\n\n;; estimate expected lp tokens minted when providing liquidity\n(int) get_expected_tokens(int amount0, int amount1) method_id {\n    load_storage();\n    return min(amount0 * storage::total_supply_lp / storage::reserve0, amount1 * storage::total_supply_lp / storage::reserve1);\n}\n\n(int, int) get_expected_liquidity(int jetton_amount) method_id {\n    load_storage();\n    throw_unless(ZERO_OUTPUT, jetton_amount > 0); \n\n    int amount0_out = (jetton_amount * storage::reserve0) / storage::total_supply_lp; \n    int amount1_out = (jetton_amount * storage::reserve1) / storage::total_supply_lp; \n    \n    throw_unless(ZERO_OUTPUT, (amount0_out > 0) & (amount1_out > 0));\n\n    return (amount0_out, amount1_out);\n}\n\nslice get_lp_account_address(slice owner_address) method_id {\n    load_storage();\n    return calculate_user_lp_account_address(owner_address, my_address(), storage::lp_account_code); \n}\n\n;; standard jetton 'get' methods \n(int, int, slice, cell, cell) get_jetton_data() method_id {\n    load_storage();\n    (_, int hashpart) = parse_std_addr(my_address());\n\n    cell content_lp = begin_cell()\n        .store_uint(0x01, 8)\n        .store_slice(URI_BASE)\n        .store_slice(address_to_hex_string(hashpart))\n        .store_slice(URI_END)\n    .end_cell();\n\n    return (storage::total_supply_lp, -1, storage::router_address, content_lp, storage::jetton_lp_wallet_code);\n}\n\nslice get_wallet_address(slice owner_address) method_id {\n    load_storage();\n    return calculate_user_jetton_lp_wallet_address(owner_address, my_address(), storage::jetton_lp_wallet_code); \n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "common/messages.func",
        "content": "const NORMAL = 0;\nconst PAID_EXTERNALLY = 1;\nconst IGNORE_ERRORS = 2;\n\nconst DESTROY_IF_ZERO = 32;\nconst CARRY_REMAINING_GAS = 64;\nconst CARRY_ALL_BALANCE = 128;\n\n() send_empty_message(int amount, slice to, int mode) impure inline_ref {\n    cell msg = begin_cell()\n        .store_uint(0x18, 6)\n        .store_slice(to)\n        .store_coins(amount)\n        .store_uint(0, 107)\n    .end_cell();\n    send_raw_message(msg, mode);\n}\n\n() send_simple_message(int amount, slice to, cell body, int mode) impure inline_ref {\n    cell msg = begin_cell()\n        .store_uint(0x18, 6)\n        .store_slice(to)\n        .store_coins(amount)\n        .store_uint(1, 107)\n        .store_ref(body)\n    .end_cell();\n    send_raw_message(msg, mode);\n}\n\n() send_message_nobounce(int amount, slice to, cell body, int mode) impure inline_ref {\n    cell msg = begin_cell()\n        .store_uint(0x10, 6)\n        .store_slice(to)\n        .store_coins(amount)\n        .store_uint(1, 107)\n        .store_ref(body)\n    .end_cell();\n    send_raw_message(msg, mode);\n}\n\n() send_message_with_stateinit(int amount, slice to, cell state_init, cell body, int mode) impure inline_ref {\n    cell msg = begin_cell()\n        .store_uint(0x18, 6)\n        .store_slice(to)\n        .store_coins(amount)\n        .store_uint(7, 108)\n        .store_ref(state_init)\n        .store_ref(body)\n    .end_cell();\n    send_raw_message(msg, mode);\n}",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "common/utils1.func",
        "content": "const FWD_GAS = 35000000; ;; 0.04 TON\n\n() send_payload(slice caller, cell payload) impure inline_ref {\n  cell msg = begin_cell()\n    .store_uint(0x18, 6)\n    .store_slice(caller) \n    .store_coins(0) \n    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n    .store_ref(payload)\n  .end_cell();\n  send_raw_message(msg, 128); ;; CARRY_ALL_BALANCE\n}\n\n(int) get_workchain(slice address) inline {\n  (int wc, _) = parse_std_addr(address);\n  return wc;\n}\n\n() force_chain(int workchain, slice address, int error_code) impure inline {\n  (int wc) = get_workchain(address);\n  throw_unless(error_code, wc == workchain);\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/amm.func",
        "content": "(int, int, int) get_amount_out(int has_ref, int amount_in, int reserve_in, int reserve_out) inline {\n  int amount_in_with_fee = amount_in * (FEE_DIVIDER - storage::lp_fee);\n  int base_out = (amount_in_with_fee * reserve_out) / (reserve_in * FEE_DIVIDER + amount_in_with_fee);\n  \n  int protocol_fee_out = 0;\n  int ref_fee_out = 0;\n\n  if (storage::protocol_fee > 0) {\n    protocol_fee_out = divc(base_out * storage::protocol_fee, FEE_DIVIDER);\n  }\n  \n  if (has_ref & (storage::ref_fee > 0)) {\n    ref_fee_out = divc(base_out * storage::ref_fee, FEE_DIVIDER);\n  }\n  \n  base_out -= protocol_fee_out + ref_fee_out;\n  return (base_out, protocol_fee_out, ref_fee_out);\n}\n\n\n() _mint_lp(int query_id, slice to, int amount) impure inline {\n  cell state_init = calculate_jetton_lp_wallet_state_init(to, my_address(), storage::jetton_lp_wallet_code);\n  slice to_wallet_address = calculate_jetton_lp_wallet_address(state_init);\n  var body = begin_cell()\n    .store_uint(internal_transfer, 32)\n    .store_uint(query_id, 64)\n    .store_coins(amount)\n    .store_slice(my_address())\n    .store_slice(to)\n    .store_coins(0) \n    .store_uint(0, 1);\n  send_message_with_stateinit(0, to_wallet_address, state_init, body.end_cell(), CARRY_REMAINING_GAS);\n}\n\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/lp_account-utils.func",
        "content": "cell pack_lp_account_data(slice user_address, slice pool_address, int amount0, int amount1) inline {\n  return begin_cell()\n    .store_slice(user_address)\n    .store_slice(pool_address)\n    .store_coins(amount0)\n    .store_coins(amount1)\n  .end_cell();\n}\n\ncell calculate_lp_account_state_init(slice user_address, slice pool_address, cell lp_account_code) inline {\n  return begin_cell()\n    .store_uint(0, 2)\n    .store_dict(lp_account_code)\n    .store_dict(pack_lp_account_data(user_address, pool_address, 0, 0))\n    .store_uint(0, 1)\n  .end_cell();\n}\n\nslice calculate_lp_account_address(cell state_init) inline {\n  return begin_cell().store_uint(4, 3)\n    .store_int(WORKCHAIN, 8)\n    .store_uint(cell_hash(state_init), 256)\n  .end_cell().begin_parse();\n}\n\nslice calculate_user_lp_account_address(slice user_address, slice pool_address, cell lp_account_code) inline {\n  return calculate_lp_account_address(calculate_lp_account_state_init(user_address, pool_address, lp_account_code));\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      },
      {
        "name": "pool/params.func",
        "content": "const WORKCHAIN = 0;\n\nconst REQUIRED_TON_RESERVE = 10000000;\nconst REQUIRED_FEES_MINT = 30000000;\nconst REQUIRED_MIN_LIQUIDITY = 1000;\nconst REQUIRED_MIN_COLLECT_FEES = 1000000;\n;; according to https://ton.org/docs/#/smart-contracts/tvm-instructions/instructions, coins are in the range 0...2^120 - 1\nconst MAX_COINS = 1329227995784915872903807060280344575; ;; 2^120 - 1\nconst PROVIDE_ADD_GAS_CONSUMPTION = 10000000;\nconst FEE_DIVIDER = 10000;\nconst MIN_FEE = 0; ;; 0%\nconst MAX_FEE = 100; ;; 1%\n\nconst HOLE_ADDRESS = \"EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c\"a;\nslice addr_none() asm \"<b b{00} s, b> <s PUSHSLICE\";\nconst URI_BASE = \"https://lp.ston.fi/0:\";\nconst URI_END = \".json\";\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": false
      }
    ]
  }
}