{
  "code": "b5ee9c7201022b01000905000114ff00f4a413f4bcf2c80b01020120020302014804050064f230f8276f10ed44d0d4f404d1d0fa40d4f404d4d14533237ff02732034414c85004cf1612ccf400ccc901c8ccf400c9ed540202ca06070201201f2004f5d7b7efe09dbc400b434c0c05c6c2497c1383e903e900c7e800c7d010c7e800c7e800c1cea6d0008b1c0245c2540b4c7d40cf8bb5134353d0134487434fffe903454c1b1c178c0889bbcb43480b43e90353d01353449e0841a4f4e542eb8c089e0840bf2c9a8aeb8c08d0d0970000a62d88dd1bdc1d5c231c16c0a608090a0b020148131400be5b333335048210299a3e15baf2e0d5036e8e1466f02a206e9b3101c8ccf400c9ed54db31e13031926c21e2fa4030708210a43227e1f8256d8040708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb00007a3b5f0833d33f30708210a8cb00adc804d014cf1643308040708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb0000845f0450785f0501d33f307082108b77173505c8cbff5004cf1610248040708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb0003f4d74ac000b0925f0be0236e8e2c519aa140132370f027206e8e1954719026c85004cf1612ccf400ccc9525001c8ccf400c9ed54de512aa04319df258210371638aebae302236e8e2a363703c000f2e0d610364470f02841302370f027324313c85004cf1612ccf400ccc901c8ccf400c9ed54e13a24c000e302240c0d0e00ee35353737266ef2d0db5dc705f2e0dc04d33f3006d0d4d4d130d0f404fa00d31fd15b6ef2e0dd586d5005c85004cf1612ccf400ccc9238e3312708210a37a098358056d8040708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb0001926c22e201c8ccf400c9ed540014375f053331c705f2e0d702fe8210487a8e81ba8e68323333355321c705f2e0dc03d33fd430f029206ef2d0df10234604c85004cf1612ccf400ccc9218e3213708210a37a098358056d8040708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb00923330e20101c8ccf400c9ed54e02482105fcc3d14bae3023537020f1002cc345153c705f2e0d806505301d33ffa40fa40f404fa003223fa4430c000f2e14d0782103b9aca00a127945375a0a1de22d70b01c300209206a19136e220c2fff2e0ce27941027365be30d0293135f03e30d4433c85004cf1612ccf400ccc901c8ccf400c9ed54111200ea82104eb1f0f9ba8e6604d33f5343c705f2e0d907d0d4f404d4d109f02c410802c8ccf400ccc9401305c85004cf1612ccf400ccc912708210a37a098358056d8040708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb000101c8ccf400c9ed54e05f07f2c0d0007e821005138d91c85008cf1658cf1671245146104a10395092708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb001034007223fa4430c000f2e14d43308210d53276db016d71708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb000201f415160201201819008f08a0840ee6b28028406d82083080238d20840dc3fb147e0948840d165b5c9c20043232c15401f3c594017e808572da84b2c7f2cfc89ba44ca51633c5c0788072407ec0286456f8a001d908b435353440743d013e8034c7f47e08ccae6497c1380d0064be0037889ba4d7c0db78343e903e803e8034c1f4c7f4c7f457c140b43e903e8034c7f440f434c3f4c3fe90345c20840144e3647e0960840e049f7848f2140373c587328006f2c7c9be808632c7c990c5122a9c601700a2708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb0020c20026c200b05345c705b3b08e12544116a9845240b6085144a14554f026431393303233e21023f026016d0201201a1b0031d69ff906ba561004bea18014183fa0bcb9800c183fa2d987140201201c1d00714fa40fa00d4d4d4d43001f029206e935f076de010364540f0288b02511370f02732136d500502c8ccf400ccc959c85004cf1612ccf400ccc9801eb3435353440743d013e8034c7f45490ae7cb434c8b43e903e803e8034c1f4c7f4c7f44c0cccd45dbe08f21400f3c5807e80b2c7f27e08d62804ed8249b080149a2f85ec249c0db78920840ee6b28028006999056a2998e0192a41052d82485ba44c78c39400c0b23d00007e80b2c7f2404072333332601e00a308343e903e803e8034c1f4c7f4c7f44d48e0841dcd65002e48f0c014516e452c04ec4070406c406082024ea02f2c48a082784ce02f2c64d7c0db781b7e08d400e800b23d00007e80b2c7f24040723333326000a601d0fa40fa00d31fd1302682103b9aca00a101b60820c2008e368210557cea20f825221034596d71708010c8cb055007cf165005fa0215cb6a12cb1fcb3f226e91329458cf1701e201c901fb0015a104915be20201202122020120252602016223240039b8ed7ed44d0d4f404d131d0fa40d4f404d4d16c31d0d30fd30ffa40d18007dae65f6a2686a7a026898e87d206a7a026a688811af81e86a7a026a68b610e8698380d5016b8c0080e98380d5016b8c0080e8b8642c678b2c678b6503e4e8400067afc176a2686a7a026898e87d206a7a026a688811af81e86a7a026a68b610e8698380d5016b8c0080e98380d5016b8c0080e89840005db8fcfed44d0d4f404d101d0d3fffa40d1226e9632708b02136de002d0fa40d4f404d4d15bd0d4f404d4d15b7f444480201202728007fb7d05da89a1a9e809a263a1f481a9e809a9a226be0640dde5a1b7a1a9a9a261a1e809f401a63fa2dae0a608dd226b3abe0605a1f481f401a63fa28889c4aa430020120292a00ddb0c33b5134353d01344c743e90353d0135344408d7c0f4353d0135344c0c48b5d2482a4e00b0003cb81180f5c281f0003cb86740b0822388cc20bc067c09107b9623f6c9bb892c95a3740d70f2481b846ae5e6f98b9555628745fff788300024cc1e00780060c1fd03dbe84c1e00600067b294fb5134353d01344c743e90353d01353444d7c0c81ba5cc1b5c151c000838343535344c743e903e803e8034c1f4c7f4c7f460",
  "disassembled_code": "0 SETCP\n19 (xC_) DICTPUSHCONST\nDICTIGETJMPZ {\n      -1 => <{\n            DROP\n            BALANCE\n            0 INDEX\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            s5 s3 s3 XCHG3\n            s3 PUSH\n            -1 PUSHINT\n            39 CALLDICT\n            s2 POP\n            s0 s3 XCHG\n            s4 s1 s4 XCHG3\n            NEWC\n            s0 s4 XCHG2\n            STSLICER\n            s1 s2 XCHG\n            STREF\n            STDICT\n            STREF\n            ENDC\n            SWAP\n            NEWC\n            STREF\n            STDICT\n            ENDC\n            c4 POP\n      }>\n      0 => <{\n            SAMEALTSAVE\n            BALANCE\n            0 INDEX\n            s0 s2 XCHG\n            CTOS\n            4 LDU\n            SWAP\n            1 PUSHINT\n            AND\n            IFJMP:<{\n                  4 BLKDROP\n            }>\n            LDMSGADDR\n            LDMSGADDR\n            NIP\n            LDGRAMS\n            NIP\n            LDDICT\n            NIP\n            LDGRAMS\n            NIP\n            LDGRAMS\n            DROP\n            3 PUSHINT\n            1 MULRSHIFT\n            s2 PUSH\n            SEMPTY\n            IF:<{\n                  0 PUSHINT\n            }>ELSE<{\n                  s0 s2 XCHG\n                  32 LDU\n                  s3 s3 XCHG2\n            }>\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            OVER\n            CTOS\n            256 LDU\n            LDMSGADDR\n            ENDS\n            s0 s6 PUSH2\n            SDEQ\n            IFJMP:<{\n                  2DROP\n                  s3 POP\n                  s3 POP\n                  s5 POP\n                  s0 s4 XCHG\n                  697974293 PUSHINT\n                  EQUAL\n                  213 THROWIFNOT\n                  s0 s3 XCHG\n                  ISNULL\n                  IF:<{\n                        TUCK\n                        42 CALLDICT\n                        DUP\n                        ISNULL\n                        IFNOTJMP:<{\n                              NIP\n                              SWAP\n                              NEWC\n                              STREF\n                              STDICT\n                              ENDC\n                              c4 POP\n                              RETALT\n                        }>\n                        DROP\n                        NIP\n                  }>ELSE<{\n                        2 1 BLKDROP2\n                  }>\n                  LDMSGADDR\n                  DROP\n                  0 PUSHINT\n                  2754750433 PUSHINT\n                  LTIME\n                  PUSHNULL\n                  64 PUSHINT\n                  0 PUSHINT\n                  16 PUSHINT\n                  NEWC\n                  6 STU\n                  s0 s7 XCHG2\n                  STSLICER\n                  s0 s5 XCHG2\n                  STGRAMS\n                  s1 s5 XCHG\n                  107 STU\n                  s1 s2 XCHG\n                  32 STU\n                  64 STU\n                  s2 PUSH\n                  ISNULL\n                  IF:<{\n                        s2 POP\n                  }>ELSE<{\n                        ROT\n                        STBR\n                        SWAP\n                  }>\n                  SWAP\n                  ENDC\n                  SWAP\n                  SENDRAWMSG\n            }>\n            s2 PUSH\n            ISNULL\n            210 THROWIF\n            s0 s2 XCHG\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            s7 PUSH\n            1765620048 PUSHINT\n            EQUAL\n            IFJMP:<{\n                  s11 POP\n                  8 BLKDROP\n                  s3 POP\n                  64 LDU\n                  DROP\n                  0 PUSHINT\n                  2831876269 PUSHINT\n                  NEWC\n                  s0 s4 XCHG\n                  CTOS\n                  s1 s4 XCHG\n                  STSLICER\n                  s3 s3 s0 XCHG3\n                  64 PUSHINT\n                  0 PUSHINT\n                  16 PUSHINT\n                  NEWC\n                  6 STU\n                  s0 s7 XCHG2\n                  STSLICER\n                  s0 s5 XCHG2\n                  STGRAMS\n                  s1 s5 XCHG\n                  107 STU\n                  s1 s2 XCHG\n                  32 STU\n                  64 STU\n                  s2 PUSH\n                  ISNULL\n                  IF:<{\n                        s2 POP\n                  }>ELSE<{\n                        ROT\n                        STBR\n                        SWAP\n                  }>\n                  SWAP\n                  ENDC\n                  SWAP\n                  SENDRAWMSG\n            }>\n            s7 PUSH\n            801842850 PUSHINT\n            EQUAL\n            IFJMP:<{\n                  4 BLKDROP\n                  s7 s8 XCHG2\n                  5 BLKDROP\n                  SWAP\n                  64 LDU\n                  DROP\n                  0 PUSHINT\n                  2339837749 PUSHINT\n                  s0 s5 XCHG\n                  NEWC\n                  256 STU\n                  s0 s4 XCHG2\n                  STSLICER\n                  s2 s4 XCHG\n                  64 PUSHINT\n                  0 PUSHINT\n                  16 PUSHINT\n                  NEWC\n                  6 STU\n                  s0 s7 XCHG2\n                  STSLICER\n                  s0 s5 XCHG2\n                  STGRAMS\n                  s1 s5 XCHG\n                  107 STU\n                  s1 s2 XCHG\n                  32 STU\n                  64 STU\n                  s2 PUSH\n                  ISNULL\n                  IF:<{\n                        s2 POP\n                  }>ELSE<{\n                        ROT\n                        STBR\n                        SWAP\n                  }>\n                  SWAP\n                  ENDC\n                  SWAP\n                  SENDRAWMSG\n            }>\n            s4 POP\n            s4 POP\n            s5 PUSH\n            0 EQINT\n            s9 PUSH\n            x{23746F707570} PUSHSLICE\n            SDEQ\n            AND\n            s9 PUSH\n            SREFS\n            0 EQINT\n            AND\n            IFJMP:<{\n                  11 BLKDROP\n            }>\n            s3 PUSH\n            ISNULL\n            IFNOT:<{\n                  s9 s10 XCPU\n                  SUB\n                  s0 s1 s3 XCHG3\n                  s3 PUSH\n                  0 PUSHINT\n                  39 CALLDICT\n                  DUP\n                  ISNULL\n                  IF:<{\n                        s1 s9 s0 PUSH3\n                        s6 PUSH\n                        NEWC\n                        s0 s4 XCHG2\n                        STSLICER\n                        s1 s2 XCHG\n                        STREF\n                        STDICT\n                        STREF\n                        ENDC\n                        s5 s(-1) PUXC\n                        SWAP\n                        NEWC\n                        STREF\n                        STDICT\n                        ENDC\n                        c4 POP\n                  }>\n                  s2 s10 XCPU\n                  ADD\n                  s3 s1 s9 XCHG3\n            }>\n            s5 PUSH\n            924203182 PUSHINT\n            EQUAL\n            IFJMP:<{\n                  s5 POP\n                  s5 POP\n                  s7 POP\n                  s7 POP\n                  s6 PUSH\n                  ISNULL\n                  219 THROWIF\n                  2OVER\n                  SDEQ\n                  220 THROWIFNOT\n                  s0 s4 XCHG\n                  64 LDU\n                  DROP\n                  s0 s6 XCHG\n                  CTOS\n                  LDREF\n                  LDREF\n                  ENDS\n                  DROP\n                  CTOS\n                  LDDICT\n                  LDGRAMS\n                  32 LDU\n                  ENDS\n                  2DROP\n                  ISNULL\n                  221 THROWIFNOT\n                  ROT\n                  PUSHNULL\n                  s0 s5 XCHG2\n                  NEWC\n                  s0 s4 XCHG2\n                  STSLICER\n                  s1 s2 XCHG\n                  STREF\n                  STDICT\n                  STREF\n                  ENDC\n                  s3 PUSH\n                  IF:<{\n                        s1 s2 XCHG\n                        0 PUSHINT\n                        2742684035 PUSHINT\n                        ROT\n                        s0 s5 XCHG\n                        PUSHNULL\n                        64 PUSHINT\n                        0 PUSHINT\n                        16 PUSHINT\n                        NEWC\n                        6 STU\n                        s0 s7 XCHG2\n                        STSLICER\n                        s0 s5 XCHG2\n                        STGRAMS\n                        s1 s5 XCHG\n                        107 STU\n                        s1 s2 XCHG\n                        32 STU\n                        64 STU\n                        s2 PUSH\n                        ISNULL\n                        IF:<{\n                              s2 POP\n                        }>ELSE<{\n                              ROT\n                              STBR\n                              SWAP\n                        }>\n                        SWAP\n                        ENDC\n                        SWAP\n                        SENDRAWMSG\n                        SWAP\n                  }>ELSE<{\n                        2 2 BLKDROP2\n                  }>\n                  SWAP\n                  NEWC\n                  STREF\n                  STDICT\n                  ENDC\n                  c4 POP\n            }>\n            s3 PUSH\n            ISNULL\n            IFNOTJMP:<{\n                  s6 POP\n                  s7 POP\n                  s0 s3 XCHG\n                  0 EQINT\n                  214 THROWIFNOT\n                  s3 s6 XCHG\n                  s4 s7 s0 XCHG3\n                  40 CALLDICT\n                  s1 s3 s0 XCHG3\n                  s3 PUSH\n                  0 PUSHINT\n                  39 CALLDICT\n                  s2 POP\n                  s3 s1 s3 XCHG3\n                  NEWC\n                  s0 s4 XCHG2\n                  STSLICER\n                  s1 s2 XCHG\n                  STREF\n                  STDICT\n                  STREF\n                  ENDC\n                  SWAP\n                  NEWC\n                  STREF\n                  STDICT\n                  ENDC\n                  c4 POP\n            }>\n            s10 POP\n            s4 PUSH\n            0 EQINT\n            IFJMP:<{\n                  s7 POP\n                  5 BLKDROP\n                  s3 POP\n                  NIP\n                  SDEQ\n                  215 THROWIFNOT\n            }>\n            s4 PUSH\n            1215991425 PUSHINT\n            EQUAL\n            IFJMP:<{\n                  s2 POP\n                  s3 POP\n                  s3 POP\n                  s5 POP\n                  s2 s1 PUSH2\n                  SDEQ\n                  220 THROWIFNOT\n                  s0 s3 XCHG\n                  64 LDU\n                  LDREF\n                  DROP\n                  41 CALLDICT\n                  DUP\n                  ISNULL\n                  223 THROWIF\n                  s2 s3 XCHG\n                  s6 s0 s4 XCHG3\n                  NEWC\n                  s0 s4 XCHG2\n                  STSLICER\n                  s1 s2 XCHG\n                  STREF\n                  STDICT\n                  STREF\n                  ENDC\n                  OVER\n                  IF:<{\n                        s1 s3 XCHG\n                        0 PUSHINT\n                        2742684035 PUSHINT\n                        ROT\n                        s0 s5 XCHG\n                        PUSHNULL\n                        64 PUSHINT\n                        0 PUSHINT\n                        16 PUSHINT\n                        NEWC\n                        6 STU\n                        s0 s7 XCHG2\n                        STSLICER\n                        s0 s5 XCHG2\n                        STGRAMS\n                        s1 s5 XCHG\n                        107 STU\n                        s1 s2 XCHG\n                        32 STU\n                        64 STU\n                        s2 PUSH\n                        ISNULL\n                        IF:<{\n                              s2 POP\n                        }>ELSE<{\n                              ROT\n                              STBR\n                              SWAP\n                        }>\n                        SWAP\n                        ENDC\n                        SWAP\n                        SENDRAWMSG\n                  }>ELSE<{\n                        s3 POP\n                        DROP\n                  }>\n                  SWAP\n                  SWAP\n                  NEWC\n                  STREF\n                  STDICT\n                  ENDC\n                  c4 POP\n            }>\n            s4 PUSH\n            1607220500 PUSHINT\n            EQUAL\n            IFJMP:<{\n                  s4 POP\n                  s5 s3 XCPU\n                  SDEQ\n                  216 THROWIFNOT\n                  s0 s6 XCHG\n                  s5 s3 XCHG2\n                  SWAP\n                  64 LDU\n                  LDMSGADDR\n                  LDMSGADDR\n                  LDDICT\n                  LDGRAMS\n                  s2 POP\n                  s3 PUSH\n                  REWRITESTDADDR\n                  DROP\n                  0 EQINT\n                  333 THROWIFNOT\n                  s0 s7 XCHG\n                  1000000000 PUSHINT\n                  SUB\n                  s7 PUSH\n                  IF:<{\n                        s7 s5 PUSH2\n                        ADD\n                        SUB\n                  }>\n                  s2 PUSH\n                  2 PLDU\n                  0 NEQINT\n                  DUP\n                  IF:<{\n                        s0 s6 XCHG\n                        SUB\n                  }>ELSE<{\n                        s6 POP\n                  }>\n                  DUP\n                  -1 GTINT\n                  206 THROWIFNOT\n                  s7 PUSH\n                  IF:<{\n                        85167505 PUSHINT\n                        NEWC\n                        s0 s8 XCHG2\n                        STSLICER\n                        ROT\n                        STSLICER\n                        1 PUSHINT\n                        s4 PUSH\n                        s4 s6 XCPU\n                        s4 s10 XCHG\n                        s3 s9 XCHG\n                        s9 s2 XCHG2\n                        0 PUSHINT\n                        16 PUSHINT\n                        NEWC\n                        6 STU\n                        s0 s7 XCHG2\n                        STSLICER\n                        s0 s5 XCHG2\n                        STGRAMS\n                        s1 s5 XCHG\n                        107 STU\n                        s1 s2 XCHG\n                        32 STU\n                        64 STU\n                        s2 PUSH\n                        ISNULL\n                        IF:<{\n                              s2 POP\n                        }>ELSE<{\n                              ROT\n                              STBR\n                              SWAP\n                        }>\n                        SWAP\n                        ENDC\n                        SWAP\n                        SENDRAWMSG\n                        s3 s4 XCHG\n                  }>ELSE<{\n                        s2 s7 XCHG\n                        s6 POP\n                        2DROP\n                  }>\n                  s0 s2 XCHG\n                  IF:<{\n                        s3 PUSH\n                        REWRITESTDADDR\n                        DROP\n                        0 EQINT\n                        333 THROWIFNOT\n                        s3 s3 s0 XCHG3\n                        3576854235 PUSHINT\n                        SWAP\n                        PUSHNULL\n                        1 PUSHINT\n                        0 PUSHINT\n                        16 PUSHINT\n                        NEWC\n                        6 STU\n                        s0 s7 XCHG2\n                        STSLICER\n                        s0 s5 XCHG2\n                        STGRAMS\n                        s1 s5 XCHG\n                        107 STU\n                        s1 s2 XCHG\n                        32 STU\n                        64 STU\n                        s2 PUSH\n                        ISNULL\n                        IF:<{\n                              s2 POP\n                        }>ELSE<{\n                              ROT\n                              STBR\n                              SWAP\n                        }>\n                        SWAP\n                        ENDC\n                        SWAP\n                        SENDRAWMSG\n                  }>ELSE<{\n                        s1 s3 XCHG\n                        3 BLKDROP\n                  }>\n                  s4 s3 s3 XCHG3\n                  NEWC\n                  s0 s4 XCHG2\n                  STSLICER\n                  s1 s2 XCHG\n                  STREF\n                  STDICT\n                  STREF\n                  ENDC\n                  SWAP\n                  NEWC\n                  STREF\n                  STDICT\n                  ENDC\n                  c4 POP\n            }>\n            s5 POP\n            s7 POP\n            s0 s2 XCHG\n            1320284409 PUSHINT\n            EQUAL\n            IFJMP:<{\n                  s0 s4 XCHG\n                  64 LDU\n                  s4 s3 PUSH2\n                  SDEQ\n                  217 THROWIFNOT\n                  s0 s7 XCHG\n                  CTOS\n                  LDREF\n                  LDDICT\n                  LDREF\n                  ENDS\n                  s0 s9 XCHG\n                  44 CALLDICT\n                  s1 s0 s8 XCHG3\n                  s0 s2 XCHG\n                  NEWC\n                  STREF\n                  STDICT\n                  STREF\n                  ENDC\n                  s0 s1 s3 XCHG3\n                  s0 s5 XCHG\n                  NEWC\n                  s0 s4 XCHG2\n                  STSLICER\n                  s1 s2 XCHG\n                  STREF\n                  STDICT\n                  STREF\n                  ENDC\n                  s1 s2 XCHG\n                  0 PUSHINT\n                  2742684035 PUSHINT\n                  ROT\n                  s0 s5 XCHG\n                  PUSHNULL\n                  64 PUSHINT\n                  0 PUSHINT\n                  16 PUSHINT\n                  NEWC\n                  6 STU\n                  s0 s7 XCHG2\n                  STSLICER\n                  s0 s5 XCHG2\n                  STGRAMS\n                  s1 s5 XCHG\n                  107 STU\n                  s1 s2 XCHG\n                  32 STU\n                  64 STU\n                  s2 PUSH\n                  ISNULL\n                  IF:<{\n                        s2 POP\n                  }>ELSE<{\n                        ROT\n                        STBR\n                        SWAP\n                  }>\n                  SWAP\n                  ENDC\n                  SWAP\n                  SENDRAWMSG\n                  SWAP\n                  SWAP\n                  NEWC\n                  STREF\n                  STDICT\n                  ENDC\n                  c4 POP\n            }>\n            7 BLKDROP\n            208 THROW\n      }>\n      38 => <{\n            s2 PUSH\n            1000000000 PUSHINT\n            SUB\n            SWAP\n            MIN\n            DUP\n            0 GTINT\n            IF:<{\n                  923790417 PUSHINT\n                  LTIME\n                  s2 PUSH\n                  s3 s4 XCHG\n                  ROTREV\n                  PUSHNULL\n                  2 PUSHINT\n                  0 PUSHINT\n                  16 PUSHINT\n                  NEWC\n                  6 STU\n                  s0 s7 XCHG2\n                  STSLICER\n                  s0 s5 XCHG2\n                  STGRAMS\n                  s1 s5 XCHG\n                  107 STU\n                  s1 s2 XCHG\n                  32 STU\n                  64 STU\n                  s2 PUSH\n                  ISNULL\n                  IF:<{\n                        s2 POP\n                  }>ELSE<{\n                        ROT\n                        STBR\n                        SWAP\n                  }>\n                  SWAP\n                  ENDC\n                  SWAP\n                  SENDRAWMSG\n                  SUB\n            }>ELSE<{\n                  2DROP\n            }>\n      }>\n      39 => <{\n            s2 PUSH\n            CTOS\n            LDREF\n            LDREF\n            ENDS\n            SWAP\n            CTOS\n            LDDICT\n            LDGRAMS\n            32 LDU\n            ENDS\n            NOW\n            s2 POP\n            LESS\n            IFJMP:<{\n                  4 BLKDROP\n            }>\n            s4 POP\n            SWAP\n            IF:<{\n                  ACCEPT\n            }>\n            s2 PUSH\n            ISNULL\n            IFJMP:<{\n                  3 BLKDROP\n                  PUSHNULL\n            }>\n            CTOS\n            LDMSGADDR\n            LDGRAMS\n            LDGRAMS\n            8 LDU\n            32 LDU\n            32 LDU\n            ENDS\n            5 BLKDROP\n            s0 s2 XCHG\n            CTOS\n            LDMSGADDR\n            LDGRAMS\n            32 LDU\n            ENDS\n            s0 s3 XCHG\n            CTOS\n            16 LDU\n            16 LDU\n            LDMSGADDR\n            ENDS\n            0 PUSHINT\n            85167505 PUSHINT\n            LTIME\n            940735969 PUSHINT\n            s3 PUSH\n            NEWC\n            s0 s13 XCHG2\n            STSLICER\n            s1 s12 XCHG\n            1 STI\n            s1 s11 XCHG\n            32 STU\n            s6 PUSH\n            STGRAMS\n            s1 s8 XCHG\n            32 STU\n            s6 PUSH\n            s3 s1 s4 XCHG3\n            s8 s10 s10 XCHG3\n            1 PUSHINT\n            0 PUSHINT\n            16 PUSHINT\n            NEWC\n            6 STU\n            s0 s7 XCHG2\n            STSLICER\n            s0 s5 XCHG2\n            STGRAMS\n            s1 s5 XCHG\n            107 STU\n            s1 s2 XCHG\n            32 STU\n            64 STU\n            s2 PUSH\n            ISNULL\n            IF:<{\n                  s2 POP\n            }>ELSE<{\n                  ROT\n                  STBR\n                  SWAP\n            }>\n            SWAP\n            ENDC\n            SWAP\n            SENDRAWMSG\n            DUP\n            0 GTINT\n            s6 PUSH\n            0 GTINT\n            AND\n            s4 s5 PUSH2\n            SDEQ\n            NOT\n            AND\n            IF:<{\n                  s1 s0 s5 PUXC2\n                  MULDIV\n                  s4 s(-1) PUXC\n                  MIN\n                  s4 s4 XCPU\n                  SUB\n                  s5 s5 s4 XCHG3\n                  38 CALLDICT\n                  s3 s1 s3 XCHG3\n            }>ELSE<{\n                  DROP\n                  s2 POP\n                  s3 POP\n            }>\n            s2 s3 XCHG\n            38 CALLDICT\n            SWAP\n            PUSHNULL\n      }>\n      40 => <{\n            CTOS\n            LDREF\n            LDREF\n            ENDS\n            SWAP\n            CTOS\n            LDDICT\n            LDGRAMS\n            32 LDU\n            ENDS\n            s4 s1 PUXC\n            LESS\n            211 THROWIF\n            s2 PUSH\n            CTOS\n            LDMSGADDR\n            LDGRAMS\n            LDGRAMS\n            8 LDU\n            32 LDU\n            32 LDU\n            ENDS\n            DROP\n            s3 POP\n            s3 POP\n            s7 s6 XCPU\n            NOW\n            NEWC\n            s0 s3 XCHG2\n            STSLICER\n            SWAP\n            STGRAMS\n            32 STU\n            ENDC\n            NOW\n            ROT\n            ADD\n            s1 s3 XCHG\n            MAX\n            s6 PUSH\n            0 GTINT\n            s6 s7 PUXC\n            GEQ\n            s1 s7 XCHG\n            AND\n            IF:<{\n                  0 PUSHINT\n                  s6 POP\n            }>\n            s4 PUSH\n            1000000000 PUSHINT\n            ADD\n            SWAP\n            100 ADDINT\n            s1 s5 XCHG\n            MUL\n            99 ADDINT\n            100 PUSHINT\n            DIV\n            s1 s4 XCHG\n            MAX\n            OVER\n            ISNULL\n            IF:<{\n                  NIP\n            }>ELSE<{\n                  SWAP\n                  CTOS\n                  LDMSGADDR\n                  LDGRAMS\n                  32 LDU\n                  ENDS\n                  DROP\n                  s6 PUSH\n                  1000000000 PUSHINT\n                  SUB\n                  SWAP\n                  MIN\n                  DUP\n                  0 GTINT\n                  IF:<{\n                        1434249760 PUSHINT\n                        LTIME\n                        s2 PUSH\n                        s3 s4 XCHG\n                        ROTREV\n                        PUSHNULL\n                        1 PUSHINT\n                        0 PUSHINT\n                        16 PUSHINT\n                        NEWC\n                        6 STU\n                        s0 s7 XCHG2\n                        STSLICER\n                        s0 s5 XCHG2\n                        STGRAMS\n                        s1 s5 XCHG\n                        107 STU\n                        s1 s2 XCHG\n                        32 STU\n                        64 STU\n                        s2 PUSH\n                        ISNULL\n                        IF:<{\n                              s2 POP\n                        }>ELSE<{\n                              ROT\n                              STBR\n                              SWAP\n                        }>\n                        SWAP\n                        ENDC\n                        SWAP\n                        SENDRAWMSG\n                        s1 s5 XCHG\n                        SUB\n                        s0 s4 XCHG\n                  }>ELSE<{\n                        2DROP\n                  }>\n            }>\n            s0 s3 XCHG2\n            s0 s2 XCHG\n            NEWC\n            STDICT\n            SWAP\n            STGRAMS\n            32 STU\n            ENDC\n            SWAP\n            SWAP\n            NEWC\n            STREF\n            STREF\n            ENDC\n      }>\n      41 => <{\n            DUP\n            CTOS\n            LDMSGADDR\n            LDGRAMS\n            LDGRAMS\n            8 LDU\n            32 LDU\n            32 LDU\n            ENDS\n            s5 POP\n            s3 PUSH\n            2000000000 PUSHINT\n            LESS\n            s3 PUSH\n            0 NEQINT\n            s4 s5 XCPU\n            LESS\n            s1 s4 XCHG\n            AND\n            s1 s3 XCHG\n            OR\n            SWAP\n            1 LESSINT\n            OR\n            SWAP\n            604800 PUSHINT\n            GREATER\n            OR\n            s2 PUSH\n            31536000 PUSHINT\n            GREATER\n            OR\n            IFJMP:<{\n                  3 BLKDROP\n                  PUSHNULL\n            }>\n            PUSHNULL\n            NOW\n            s0 s3 XCHG2\n            ADD\n            s0 s2 XCHG\n            NEWC\n            STDICT\n            SWAP\n            STGRAMS\n            32 STU\n            ENDC\n            SWAP\n            SWAP\n            NEWC\n            STREF\n            STREF\n            ENDC\n      }>\n      42 => <{\n            LDMSGADDR\n            LDGRAMS\n            LDREF\n            LDREF\n            LDREF\n            LDREF\n            DROP\n            SWAP\n            41 CALLDICT\n            DUP\n            ISNULL\n            IFJMP:<{\n                  7 BLKDROP\n                  PUSHNULL\n            }>\n            s3 s6 XCHG\n            s5 s4 s0 XCHG3\n            40 CALLDICT\n            x{2_} PUSHSLICE\n            s1 s3 XCPU\n            0 PUSHINT\n            39 CALLDICT\n            s2 POP\n            s1 s3 XCHG\n            PUSHNULL\n            s0 s5 XCHG2\n            s0 s2 XCHG\n            NEWC\n            STREF\n            STDICT\n            STREF\n            ENDC\n            ROTREV\n            NEWC\n            s0 s4 XCHG2\n            STSLICER\n            s1 s2 XCHG\n            STREF\n            STDICT\n            STREF\n            ENDC\n      }>\n      44 => <{\n            256 LDU\n            DUP\n            SREFS\n            0 GTINT\n            IF:<{\n                  LDREF\n                  DROP\n                  s0 s2 XCHG\n                  8 PUSHPOW2\n                  DICTUSETREF\n            }>ELSE<{\n                  DROP\n                  SWAP\n                  8 PUSHPOW2\n                  DICTUDEL\n                  DROP\n            }>\n      }>\n      66763 => <{\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            NIP\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            s2 s3 XCHG\n            3 BLKDROP\n            CTOS\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            2 1 BLKDROP2\n            CTOS\n            8 LDU\n            SWAP\n            3 LSHIFT#\n            LDSLICEX\n            SWAP\n            SWAP\n            8 LDU\n            SWAP\n            3 LSHIFT#\n            LDSLICEX\n            SWAP\n            SWAP\n            ENDS\n            0 PUSHINT\n            NEWC\n            ROT\n            STSLICER\n            ROT\n            STSLICER\n            8 STI\n            ENDC\n            CTOS\n      }>\n      69506 => <{\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            NIP\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            s2 s3 XCHG\n            3 BLKDROP\n            CTOS\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            2 1 BLKDROP2\n            CTOS\n            8 LDU\n            SWAP\n            3 LSHIFT#\n            LDSLICEX\n            SWAP\n            SWAP\n            8 LDU\n            SWAP\n            3 LSHIFT#\n            LDSLICEX\n            SWAP\n            SWAP\n            ENDS\n            DROP\n      }>\n      85719 => <{\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            NIP\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            3 1 BLKDROP2\n            CTOS\n            16 LDU\n            16 LDU\n            LDMSGADDR\n            ENDS\n      }>\n      102351 => <{\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            SWAP\n            CTOS\n            256 LDU\n            LDMSGADDR\n            ENDS\n            s2 PUSH\n            ISNULL\n            IFJMP:<{\n                  s2 POP\n                  0 PUSHINT\n                  x{2_} PUSHSLICE\n                  s1 s3 XCHG\n                  PUSHNULL\n            }>\n            s0 s2 XCHG\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            2DROP\n            CTOS\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            2DROP\n            -1 PUSHINT\n            s4 s4 s4 XCHG3\n      }>\n      122498 => <{\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            NIP\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            s1 s3 XCHG\n            3 BLKDROP\n            DUP\n            ISNULL\n            219 THROWIF\n            CTOS\n            LDREF\n            LDREF\n            ENDS\n            DROP\n            CTOS\n            LDDICT\n            LDGRAMS\n            32 LDU\n            ENDS\n            PUSHNULL\n            0 PUSHINT\n            s0 s4 PUSH2\n            ISNULL\n            IF:<{\n                  s5 POP\n            }>ELSE<{\n                  3 BLKDROP\n                  s0 s2 XCHG\n                  CTOS\n                  LDMSGADDR\n                  LDGRAMS\n                  32 LDU\n                  ENDS\n                  s4 s4 s4 XCHG3\n            }>\n            3 2 BLKSWAP\n      }>\n      123660 => <{\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            NIP\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            s2 s3 XCHG\n            3 BLKDROP\n            CTOS\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            DROP\n            NIP\n            s2 PUSH\n            SBITS\n            DUP\n            3 MODPOW2\n            0 EQINT\n            70 THROWIFNOT\n            s0 s3 XCHG\n            8 PLDI\n            0 EQINT\n            413 THROWIFNOT\n            s0 s2 XCHG\n            8 GTINT\n            IF:<{\n                  DROP\n                  11732114750494247458678882651681748623800183221773167493832867265755123357695 PUSHINT\n            }>\n            DUP\n            0 EQINT\n            IFJMP:<{\n                  DROP\n                  8 PUSHINT\n                  SWAP\n            }>\n            SWAP\n            8 PUSHPOW2\n            DICTUGETREF\n            NULLSWAPIFNOT\n            DROP\n            8 PUSHINT\n            SWAP\n      }>\n      129619 => <{\n            c4 PUSH\n            CTOS\n            LDREF\n            LDDICT\n            ENDS\n            NIP\n            CTOS\n            LDMSGADDR\n            LDREF\n            LDDICT\n            LDREF\n            ENDS\n            s1 s3 XCHG\n            3 BLKDROP\n            DUP\n            ISNULL\n            IFJMP:<{\n                  DROP\n                  PUSHNULL\n                  0 PUSHINT\n                  s0 s0 s0 PUSH3\n                  DUP\n            }>\n            CTOS\n            LDREF\n            LDREF\n            ENDS\n            NIP\n            CTOS\n            LDMSGADDR\n            LDGRAMS\n            LDGRAMS\n            8 LDU\n            32 LDU\n            32 LDU\n            ENDS\n      }>\n}\n11 THROWARG",
  "code_hash": "a7a2616a4d639a076c2f67e7cce0423fd2a1c2ee550ad651c1eda16ee13bcaca",
  "methods": [
    {
      "id": 69506,
      "method": "get_telemint_token_name"
    },
    {
      "id": 122498,
      "method": "get_telemint_auction_state"
    },
    {
      "id": 66763,
      "method": "get_full_domain"
    },
    {
      "id": 85719,
      "method": "royalty_params"
    },
    {
      "id": 123660,
      "method": "dnsresolve"
    },
    {
      "id": 102351,
      "method": "get_nft_data"
    },
    {
      "id": 129619,
      "method": "get_telemint_auction_config"
    }
  ],
  "compiler": "func",
  "source": {
    "files": [
      {
        "name": "stdlib.fc",
        "content": ";; Standard library for funC\n;;\n\nforall X -> tuple cons(X head, tuple tail) asm \"CONS\";\nforall X -> (X, tuple) uncons(tuple list) asm \"UNCONS\";\nforall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) \"UNCONS\";\nforall X -> X car(tuple list) asm \"CAR\";\ntuple cdr(tuple list) asm \"CDR\";\ntuple empty_tuple() asm \"NIL\";\nforall X -> tuple tpush(tuple t, X value) asm \"TPUSH\";\nforall X -> (tuple, ()) ~tpush(tuple t, X value) asm \"TPUSH\";\nforall X -> [X] single(X x) asm \"SINGLE\";\nforall X -> X unsingle([X] t) asm \"UNSINGLE\";\nforall X, Y -> [X, Y] pair(X x, Y y) asm \"PAIR\";\nforall X, Y -> (X, Y) unpair([X, Y] t) asm \"UNPAIR\";\nforall X, Y, Z -> [X, Y, Z] triple(X x, Y y, Z z) asm \"TRIPLE\";\nforall X, Y, Z -> (X, Y, Z) untriple([X, Y, Z] t) asm \"UNTRIPLE\";\nforall X, Y, Z, W -> [X, Y, Z, W] tuple4(X x, Y y, Z z, W w) asm \"4 TUPLE\";\nforall X, Y, Z, W -> (X, Y, Z, W) untuple4([X, Y, Z, W] t) asm \"4 UNTUPLE\";\nforall X -> X first(tuple t) asm \"FIRST\";\nforall X -> X second(tuple t) asm \"SECOND\";\nforall X -> X third(tuple t) asm \"THIRD\";\nforall X -> X fourth(tuple t) asm \"3 INDEX\";\nforall X, Y -> X pair_first([X, Y] p) asm \"FIRST\";\nforall X, Y -> Y pair_second([X, Y] p) asm \"SECOND\";\nforall X, Y, Z -> X triple_first([X, Y, Z] p) asm \"FIRST\";\nforall X, Y, Z -> Y triple_second([X, Y, Z] p) asm \"SECOND\";\nforall X, Y, Z -> Z triple_third([X, Y, Z] p) asm \"THIRD\";\nforall X -> X null() asm \"PUSHNULL\";\nforall X -> (X, ()) ~impure_touch(X x) impure asm \"NOP\";\n\nint now() asm \"NOW\";\nslice my_address() asm \"MYADDR\";\n[int, cell] get_balance() asm \"BALANCE\";\nint cur_lt() asm \"LTIME\";\nint block_lt() asm \"BLOCKLT\";\n\nint cell_hash(cell c) asm \"HASHCU\";\nint slice_hash(slice s) asm \"HASHSU\";\nint string_hash(slice s) asm \"SHA256U\";\n\nint check_signature(int hash, slice signature, int public_key) asm \"CHKSIGNU\";\nint check_data_signature(slice data, slice signature, int public_key) asm \"CHKSIGNS\";\n\n(int, int, int) compute_data_size(cell c, int max_cells) impure asm \"CDATASIZE\";\n(int, int, int) slice_compute_data_size(slice s, int max_cells) impure asm \"SDATASIZE\";\n(int, int, int, int) compute_data_size?(cell c, int max_cells) asm \"CDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n(int, int, int, int) slice_compute_data_size?(cell c, int max_cells) asm \"SDATASIZEQ NULLSWAPIFNOT2 NULLSWAPIFNOT\";\n\n;; () throw_if(int excno, int cond) impure asm \"THROWARGIF\";\n\n() dump_stack() impure asm \"DUMPSTK\";\n\ncell get_data() asm \"c4 PUSH\";\n() set_data(cell c) impure asm \"c4 POP\";\ncont get_c3() impure asm \"c3 PUSH\";\n() set_c3(cont c) impure asm \"c3 POP\";\ncont bless(slice s) impure asm \"BLESS\";\n\n() accept_message() impure asm \"ACCEPT\";\n() set_gas_limit(int limit) impure asm \"SETGASLIMIT\";\n() commit() impure asm \"COMMIT\";\n() buy_gas(int gram) impure asm \"BUYGAS\";\n\nint min(int x, int y) asm \"MIN\";\nint max(int x, int y) asm \"MAX\";\n(int, int) minmax(int x, int y) asm \"MINMAX\";\nint abs(int x) asm \"ABS\";\n\nslice begin_parse(cell c) asm \"CTOS\";\n() end_parse(slice s) impure asm \"ENDS\";\n(slice, cell) load_ref(slice s) asm( -> 1 0) \"LDREF\";\ncell preload_ref(slice s) asm \"PLDREF\";\n;; (slice, int) ~load_int(slice s, int len) asm(s len -> 1 0) \"LDIX\";\n;; (slice, int) ~load_uint(slice s, int len) asm( -> 1 0) \"LDUX\";\n;; int preload_int(slice s, int len) asm \"PLDIX\";\n;; int preload_uint(slice s, int len) asm \"PLDUX\";\n;; (slice, slice) load_bits(slice s, int len) asm(s len -> 1 0) \"LDSLICEX\";\n;; slice preload_bits(slice s, int len) asm \"PLDSLICEX\";\n(slice, int) load_grams(slice s) asm( -> 1 0) \"LDGRAMS\";\nslice skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\n(slice, ()) ~skip_bits(slice s, int len) asm \"SDSKIPFIRST\";\nslice first_bits(slice s, int len) asm \"SDCUTFIRST\";\nslice skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\n(slice, ()) ~skip_last_bits(slice s, int len) asm \"SDSKIPLAST\";\nslice slice_last(slice s, int len) asm \"SDCUTLAST\";\n(slice, cell) load_dict(slice s) asm( -> 1 0) \"LDDICT\";\ncell preload_dict(slice s) asm \"PLDDICT\";\nslice skip_dict(slice s) asm \"SKIPDICT\";\n\n(slice, cell) load_maybe_ref(slice s) asm( -> 1 0) \"LDOPTREF\";\ncell preload_maybe_ref(slice s) asm \"PLDOPTREF\";\nbuilder store_maybe_ref(builder b, cell c) asm(c b) \"STOPTREF\";\n\nint cell_depth(cell c) asm \"CDEPTH\";\n\nint slice_refs(slice s) asm \"SREFS\";\nint slice_bits(slice s) asm \"SBITS\";\n(int, int) slice_bits_refs(slice s) asm \"SBITREFS\";\nint slice_empty?(slice s) asm \"SEMPTY\";\nint slice_data_empty?(slice s) asm \"SDEMPTY\";\nint slice_refs_empty?(slice s) asm \"SREMPTY\";\nint slice_depth(slice s) asm \"SDEPTH\";\n\nint builder_refs(builder b) asm \"BREFS\";\nint builder_bits(builder b) asm \"BBITS\";\nint builder_depth(builder b) asm \"BDEPTH\";\n\nbuilder begin_cell() asm \"NEWC\";\ncell end_cell(builder b) asm \"ENDC\";\nbuilder store_ref(builder b, cell c) asm(c b) \"STREF\";\n;; builder store_uint(builder b, int x, int len) asm(x b len) \"STUX\";\n;; builder store_int(builder b, int x, int len) asm(x b len) \"STIX\";\nbuilder store_slice(builder b, slice s) asm \"STSLICER\";\nbuilder store_grams(builder b, int x) asm \"STGRAMS\";\nbuilder store_dict(builder b, cell c) asm(c b) \"STDICT\";\n\n(slice, slice) load_msg_addr(slice s) asm( -> 1 0) \"LDMSGADDR\";\ntuple parse_addr(slice s) asm \"PARSEMSGADDR\";\n(int, int) parse_std_addr(slice s) asm \"REWRITESTDADDR\";\n(int, slice) parse_var_addr(slice s) asm \"REWRITEVARADDR\";\n\ncell idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\n(cell, ()) ~idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETREF\";\ncell udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\n(cell, ()) ~udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETREF\";\ncell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETOPTREF\";\n(cell, int) idict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGETREF\" \"NULLSWAPIFNOT\";\n(cell, int) udict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGETREF\" \"NULLSWAPIFNOT\";\n(cell, cell) idict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTISETGETOPTREF\";\n(cell, cell) udict_set_get_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) \"DICTUSETGETOPTREF\";\n(cell, int) idict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDEL\";\n(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDEL\";\n(slice, int) idict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIGET\" \"NULLSWAPIFNOT\";\n(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, slice, int) udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~idict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTIDELGET\" \"NULLSWAPIFNOT\";\n(cell, (slice, int)) ~udict_delete_get?(cell dict, int key_len, int index) asm(index dict key_len) \"DICTUDELGET\" \"NULLSWAPIFNOT\";\ncell udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\n(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUSET\";\ncell idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\n(cell, ()) ~idict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTISET\";\ncell dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, ()) ~dict_set(cell dict, int key_len, slice index, slice value) asm(value index dict key_len) \"DICTSET\";\n(cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUADD\";\n(cell, int) udict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTUREPLACE\";\n(cell, int) idict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIADD\";\n(cell, int) idict_replace?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) \"DICTIREPLACE\";\ncell udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\n(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUSETB\";\ncell idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\n(cell, ()) ~idict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTISETB\";\ncell dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, ()) ~dict_set_builder(cell dict, int key_len, slice index, builder value) asm(value index dict key_len) \"DICTSETB\";\n(cell, int) udict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUADDB\";\n(cell, int) udict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTUREPLACEB\";\n(cell, int) idict_add_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIADDB\";\n(cell, int) idict_replace_builder?(cell dict, int key_len, int index, builder value) asm(value index dict key_len) \"DICTIREPLACEB\";\n(cell, int, slice, int) udict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_min(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMIN\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) udict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~udict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTUREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, int, slice, int) idict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (int, slice, int)) ~idict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTIREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, slice, slice, int) dict_delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(cell, (slice, slice, int)) ~dict::delete_get_max(cell dict, int key_len) asm(-> 0 2 1 3) \"DICTREMMAX\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) udict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTUMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMIN\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAX\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMINREF\" \"NULLSWAPIFNOT2\";\n(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) \"DICTIMAXREF\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) udict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTUGETPREVEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_next?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXT\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_nexteq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETNEXTEQ\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_prev?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREV\" \"NULLSWAPIFNOT2\";\n(int, slice, int) idict_get_preveq?(cell dict, int key_len, int pivot) asm(pivot dict key_len -> 1 0 2) \"DICTIGETPREVEQ\" \"NULLSWAPIFNOT2\";\ncell new_dict() asm \"NEWDICT\";\nint dict_empty?(cell c) asm \"DICTEMPTY\";\n\n(slice, slice, slice, int) pfxdict_get?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTGETQ\" \"NULLSWAPIFNOT2\";\n(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) asm(value key dict key_len) \"PFXDICTSET\";\n(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) asm(key dict key_len) \"PFXDICTDEL\";\n\ncell config_param(int x) asm \"CONFIGOPTPARAM\";\nint cell_null?(cell c) asm \"ISNULL\";\n\n() raw_reserve(int amount, int mode) impure asm \"RAWRESERVE\";\n() raw_reserve_extra(int amount, cell extra_amount, int mode) impure asm \"RAWRESERVEX\";\n() send_raw_message(cell msg, int mode) impure asm \"SENDRAWMSG\";\n() set_code(cell new_code) impure asm \"SETCODE\";\n\nint random() impure asm \"RANDU256\";\nint rand(int range) impure asm \"RAND\";\nint get_seed() impure asm \"RANDSEED\";\nint set_seed() impure asm \"SETRAND\";\n() randomize(int x) impure asm \"ADDRAND\";\n() randomize_lt() impure asm \"LTIME\" \"ADDRAND\";\n",
        "is_entrypoint": false,
        "is_std_lib": true,
        "include_in_command": true
      },
      {
        "name": "common.fc",
        "content": "const int one_ton = 1000000000;\nconst int dns_next_resolver_prefix = 0xba93; ;; dns_next_resolver prefix - https://github.com/ton-blockchain/ton/blob/7e3df93ca2ab336716a230fceb1726d81bac0a06/crypto/block/block.tlb#L819\n\nconst int op::fill_up = 0x370fec51;\nconst int op::outbid_notification = 0x557cea20;\nconst int op::change_dns_record = 0x4eb1f0f9;\nconst int op::dns_balance_release = 0x4ed14b65;\n\nconst int op::telemint_msg_deploy = 0x4637289a;\nconst int op::teleitem_msg_deploy = 0x299a3e15;\nconst int op::teleitem_start_auction = 0x487a8e81;\nconst int op::teleitem_cancel_auction = 0x371638ae;\nconst int op::teleitem_bid_info = 0x38127de1;\nconst int op::teleitem_return_bid = 0xa43227e1;\nconst int op::teleitem_ok = 0xa37a0983;\n\nconst int op::nft_cmd_transfer = 0x5fcc3d14;\nconst int op::nft_cmd_get_static_data = 0x2fcb26a2;\nconst int op::nft_cmd_edit_content = 0x1a0b9d51;\nconst int op::nft_answer_ownership_assigned = 0x05138d91;\nconst int op::nft_answer_excesses = 0xd53276db;\n\nconst int op::ownership_assigned = 0x05138d91;\nconst int op::excesses = 0xd53276db;\nconst int op::get_static_data = 0x2fcb26a2;\nconst int op::report_static_data = 0x8b771735;\nconst int op::get_royalty_params = 0x693d3950;\nconst int op::report_royalty_params = 0xa8cb00ad;\n\nconst int err::invalid_length = 201;\nconst int err::invalid_signature = 202;\nconst int err::wrong_subwallet_id = 203;\nconst int err::not_yet_valid_signature = 204;\nconst int err::expired_signature = 205;\nconst int err::not_enough_funds = 206;\nconst int err::wrong_topup_comment = 207;\nconst int err::unknown_op = 208;\nconst int err::uninited = 210;\nconst int err::too_small_stake = 211;\nconst int err::expected_onchain_content = 212;\nconst int err::forbidden_not_deploy = 213;\nconst int err::forbidden_not_stake = 214;\nconst int err::forbidden_topup = 215;\nconst int err::forbidden_transfer = 216;\nconst int err::forbidden_change_dns = 217;\nconst int err::forbidden_touch = 218;\nconst int err::no_auction = 219;\nconst int err::forbidden_auction = 220;\nconst int err::already_has_stakes = 221;\nconst int err::auction_already_started = 222;\nconst int err::invalid_auction_config = 223;\nconst int err::incorrect_workchain = 333;\nconst int err::no_first_zero_byte = 413;\nconst int err::bad_subdomain_length = 70;\n\nconst int min_tons_for_storage = one_ton;\nconst int workchain = 0;\n\nint equal_slices(slice a, slice b) asm \"SDEQ\";\nint builder_null?(builder b) asm \"ISNULL\";\nbuilder store_builder(builder to, builder from) asm \"STBR\";\nslice zero_address() asm \"b{00} PUSHSLICE\";\n(slice, int) skip_first_zero_byte?(slice cs) asm \"x{00} SDBEGINSQ\";\n\n() force_chain(slice addr) impure inline {\n    (int wc, _) = parse_std_addr(addr);\n    throw_unless(err::incorrect_workchain, wc == workchain);\n}\n\n\n;; \"ton\\0test\\0\" -> \"ton\"\nint get_top_domain_bits(slice domain) inline {\n    int i = -8;\n    int char = 1;\n    while (char) {\n        i += 8;\n        char = domain~load_uint(8); ;; we do not check domain.length because it MUST contains \\0 character\n    }\n    throw_unless(201, i); ;; should not start with \\0\n    return i;\n}\n\n_ load_text(slice cs) inline {\n    int len = cs~load_uint(8);\n    slice text = cs~load_bits(len * 8);\n    return (cs, text);\n}\n\n_ load_text_ref(slice cs) inline {\n    slice text_cs = cs~load_ref().begin_parse();\n    slice text = text_cs~load_text();\n    return (cs, text);\n}\n\nbuilder store_text(builder b, slice text) inline {\n    int len = slice_bits(text);\n    (int bytes, int rem) = len /% 8;\n    throw_if(err::invalid_length, rem);\n    return b.store_uint(bytes, 8)\n            .store_slice(text);\n}\n\n(slice, slice) unpack_token_info(cell c) inline {\n    slice cs = c.begin_parse();\n    var res = (\n            cs~load_text(),\n            cs~load_text()\n    );\n    cs.end_parse();\n    return res;\n}\n\ncell pack_token_info(slice name, slice domain) {\n    return begin_cell()\n            .store_text(name)\n            .store_text(domain)\n            .end_cell();\n}\n\ncell pack_state_init(cell code, cell data) inline {\n    return begin_cell()\n            .store_uint(0, 2)\n            .store_maybe_ref(code)\n            .store_maybe_ref(data)\n            .store_uint(0, 1)\n            .end_cell();\n}\n\ncell pack_init_int_message(slice dest, cell state_init, cell body) inline {\n    return begin_cell()\n            .store_uint(0x18, 6) ;; 011000 tag=0, ihr_disabled=1, allow_bounces=1, bounced=0, add_none\n            .store_slice(dest)\n            .store_grams(0) ;; grams\n            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)\n            .store_ref(state_init)\n            .store_ref(body)\n            .end_cell();\n}\n\n() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int mode) impure inline {\n    var msg = begin_cell()\n            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000\n            .store_slice(to_address)\n            .store_grams(amount)\n            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)\n            .store_uint(op, 32)\n            .store_uint(query_id, 64);\n\n    ifnot (builder_null?(payload)) {\n        msg = msg.store_builder(payload);\n    }\n\n    send_raw_message(msg.end_cell(), mode);\n}\n\nslice calculate_address(int wc, cell state_init) inline {\n    slice res = begin_cell()\n            .store_uint(4, 3)\n            .store_int(wc, 8)\n            .store_uint(cell_hash(state_init), 256)\n            .end_cell()\n            .begin_parse();\n    return res;\n}\n\n(int, slice) unpack_item_config(cell c) inline {\n    slice cs = c.begin_parse();\n    var res = (\n            cs~load_uint(256),\n            cs~load_msg_addr()\n    );\n    cs.end_parse();\n    return res;\n}\n\ncell pack_item_config(int item_index, slice collection_address) inline {\n    return begin_cell()\n            .store_uint(item_index, 256)\n            .store_slice(collection_address)\n            .end_cell();\n}\n\n(cell, cell) unpack_item_data() inline {\n    var cs = get_data().begin_parse();\n    var res = (cs~load_ref(), cs~load_maybe_ref());\n    cs.end_parse();\n    return res;\n}\n\ncell pack_nft_royalty_params(int numerator, int denominator, slice destination) inline {\n    return begin_cell()\n            .store_uint(numerator, 16)\n            .store_uint(denominator, 16)\n            .store_slice(destination)\n            .end_cell();\n}\n\n(int, int, slice) unpack_nft_royalty_params(cell c) inline {\n    var cs = c.begin_parse();\n    var res = (\n            cs~load_uint(16),\n            cs~load_uint(16),\n            cs~load_msg_addr()\n    );\n    cs.end_parse();\n    return res;\n}\n\ncell pack_item_data(cell config, cell state) inline {\n    return begin_cell()\n            .store_ref(config)\n            .store_maybe_ref(state)\n            .end_cell();\n}\n\ncell pack_item_content(cell nft_content, cell dns, cell token_info) inline {\n    return begin_cell()\n            .store_ref(nft_content)\n            .store_dict(dns)\n            .store_ref(token_info)\n            .end_cell();\n}\n\n(cell, cell, cell) unpack_item_content(cell c) inline {\n    var cs = c.begin_parse();\n    var res = (\n            cs~load_ref(),\n            cs~load_dict(),\n            cs~load_ref()\n    );\n    cs.end_parse();\n    return res;\n}\n\n(slice, cell, cell, cell) unpack_item_state(cell c) inline {\n    var cs = c.begin_parse();\n    var res = (\n            cs~load_msg_addr(),\n            cs~load_ref(),\n            cs~load_maybe_ref(),\n            cs~load_ref()\n    );\n    cs.end_parse();\n    return res;\n}\n\ncell pack_item_state(slice owner_address, cell content, cell auction, cell royalty_params) inline {\n    return begin_cell()\n            .store_slice(owner_address)\n            .store_ref(content)\n            .store_maybe_ref(auction)\n            .store_ref(royalty_params)\n            .end_cell();\n}\n\n_ save_item_data(config, state) impure inline {\n    set_data(pack_item_data(config, state));\n}\n\ncell pack_item_state_init(int item_index, cell item_code) inline {\n    var item_config = pack_item_config(item_index, my_address());\n    var item_data = pack_item_data(item_config, null());\n    return pack_state_init(item_code, item_data);\n}\n\ncell pack_teleitem_msg_deploy(slice sender_address, int bid, cell info, cell content, cell auction_config, cell royalty_params) inline {\n    return begin_cell()\n            .store_uint(op::teleitem_msg_deploy, 32)\n            .store_slice(sender_address)\n            .store_grams(bid)\n            .store_ref(info)\n            .store_ref(content)\n            .store_ref(auction_config)\n            .store_ref(royalty_params)\n            .end_cell();\n}\n\n(slice, int, cell, cell, cell, cell) unpack_teleitem_msg_deploy(slice cs) inline {\n    return (cs~load_msg_addr(),\n            cs~load_grams(),\n            cs~load_ref(),\n            cs~load_ref(),\n            cs~load_ref(),\n            cs~load_ref());\n}\n\n(int, int, int, cell, cell, slice, cell) unpack_collection_data() inline {\n    var cs = get_data().begin_parse();\n    var res = (\n            cs~load_int(1), ;; touched\n            cs~load_uint(32), ;; subwallet_id\n            cs~load_uint(256), ;; owner_key\n            cs~load_ref(), ;; content\n            cs~load_ref(), ;; item_code\n            cs~load_text_ref(), ;; full_domain\n            cs~load_ref() ;; royalty_params\n    );\n    cs.end_parse();\n    return res;\n}\n\n_ save_collection_data(int touched, int subwallet_id, int owner_key, cell content, cell item_code, slice full_domain, cell royalty_params) impure inline {\n    cell data = begin_cell()\n            .store_int(touched, 1)\n            .store_uint(subwallet_id, 32)\n            .store_uint(owner_key, 256)\n            .store_ref(content)\n            .store_ref(item_code)\n            .store_ref(begin_cell().store_text(full_domain).end_cell())\n            .store_ref(royalty_params)\n            .end_cell();\n    set_data(data);\n}\n\n_ unpack_signed_cmd(slice cs) inline {\n    return (\n            cs~load_bits(512), ;; signature\n            slice_hash(cs), ;; hash\n            cs~load_uint(32), ;; subwallet_id\n            cs~load_uint(32), ;; valid_since\n            cs~load_uint(32), ;; valid_till\n            cs ;; cmd\n    );\n}\n\n_ unpack_deploy_msg(slice cs) inline {\n    var res = (\n            cs~load_text(), ;; token_name\n            cs~load_ref(), ;; content\n            cs~load_ref(), ;; auction_config\n            cs~load_maybe_ref() ;; royalty\n    );\n    cs.end_parse();\n    return res;\n}\n\n;;teleitem_last_bid bidder_address:MsgAddressInt bid:Grams bid_ts:uint32 = TeleitemLastBid;\n(slice, int, int) unpack_last_bid(cell c) inline {\n    slice cs = c.begin_parse();\n    var res = (\n            cs~load_msg_addr(), ;; bidder_address\n            cs~load_grams(), ;; bid\n            cs~load_uint(32) ;; bid_ts\n    );\n    cs.end_parse();\n    return res;\n}\ncell pack_last_bid(slice bidder_address, int bid, int bid_ts) inline {\n    return begin_cell()\n            .store_slice(bidder_address)\n            .store_grams(bid)\n            .store_uint(bid_ts, 32)\n            .end_cell();\n}\n\n;;teleitem_auction_state$_ last_bid:(Maybe ^TeleitemLastBid) min_bid:Grams end_time:uint32 = TeleitemAuctionState;\n(cell, int, int) unpack_auction_state(cell c) inline {\n    slice cs = c.begin_parse();\n    var res = (\n            cs~load_maybe_ref(), ;; maybe last_bid\n            cs~load_grams(), ;; min_bid\n            cs~load_uint(32) ;; end_time\n    );\n    cs.end_parse();\n    return res;\n}\ncell pack_auction_state(cell last_bid, int min_bid, int end_time) inline {\n    return begin_cell()\n            .store_maybe_ref(last_bid)\n            .store_grams(min_bid)\n            .store_uint(end_time, 32)\n            .end_cell();\n}\n\n(slice, int, int, int, int, int) unpack_auction_config(cell c) inline {\n    slice cs = c.begin_parse();\n    var res = (\n            cs~load_msg_addr(), ;; beneficiary address\n            cs~load_grams(), ;; initial_min_bid\n            cs~load_grams(), ;; max_bid\n            cs~load_uint(8), ;; min_bid_step\n            cs~load_uint(32), ;; min_extend_time\n            cs~load_uint(32) ;; duration\n    );\n    cs.end_parse();\n    return res;\n}\n\n;;teleitem_auction$_ state:^TeleitemAuctionState config:^TeleitemConfig = TeleitemAuction;\n(cell, cell) unpack_auction(cell c) inline {\n    slice cs = c.begin_parse();\n    var res = (\n            cs~load_ref(),\n            cs~load_ref()\n    );\n    cs.end_parse();\n    return res;\n}\n\ncell pack_auction(cell state, cell config) inline {\n    return begin_cell()\n            .store_ref(state)\n            .store_ref(config)\n            .end_cell();\n}\n\n(int, slice, slice, cell, int, slice) unpack_nft_cmd_transfer(slice cs) inline {\n    return (\n            cs~load_uint(64),\n            cs~load_msg_addr(),\n            cs~load_msg_addr(),\n            cs~load_maybe_ref(),\n            cs~load_grams(),\n            cs\n    );\n}\n",
        "is_entrypoint": false,
        "is_std_lib": false,
        "include_in_command": true
      },
      {
        "name": "nft-item.fc",
        "content": "int send_money(int my_balance, slice address, int value) impure {\n    int amount_to_send = min(my_balance - min_tons_for_storage, value);\n    if (amount_to_send > 0) {\n        send_msg(address, amount_to_send, op::fill_up, cur_lt(), null(), 2); ;; ignore errors\n        my_balance -= amount_to_send;\n    }\n    return my_balance;\n}\n\n(int, slice, cell) maybe_end_auction(int my_balance, slice owner, cell auction, cell royalty_params, int is_external) impure {\n    (cell auction_state, cell auction_config) = unpack_auction(auction);\n    (cell last_bid, int min_bid, int end_time) = unpack_auction_state(auction_state);\n    if (now() < end_time) {\n        return (my_balance, owner, auction);\n    }\n    if (is_external) {\n        accept_message();\n    }\n    ;; should end auction\n    if (null?(last_bid)) {\n        ;; no stakes were made\n        ;; NB: owner is not null now\n        return (my_balance, owner, null());\n    }\n    (slice beneficiary_address, _, _, _, _, _) = unpack_auction_config(auction_config);\n    (slice bidder_address, int bid, int bid_ts) = unpack_last_bid(last_bid);\n    (int royalty_num, int royalty_denom, slice royalty_address) = unpack_nft_royalty_params(royalty_params);\n\n    send_msg(bidder_address, 0, op::ownership_assigned, cur_lt(),\n            begin_cell()\n                    .store_slice(owner)\n                    .store_int(0, 1)\n                    .store_uint(op::teleitem_bid_info, 32)\n                    .store_grams(bid)\n                    .store_uint(bid_ts, 32),\n            1); ;; paying fees, revert on errors\n\n    if ((royalty_num > 0) & (royalty_denom > 0) & ~ equal_slices(royalty_address, beneficiary_address)) {\n        int royalty_value = min(bid, muldiv(bid, royalty_num, royalty_denom));\n        bid -= royalty_value;\n        my_balance = send_money(my_balance, royalty_address, royalty_value);\n    }\n\n    my_balance = send_money(my_balance, beneficiary_address, bid);\n\n    return (my_balance, bidder_address, null());\n}\n\n(int, cell) process_new_bid(int my_balance, slice new_bid_address, int new_bid, cell auction) impure {\n    (cell auction_state, cell auction_config) = unpack_auction(auction);\n    (cell old_last_bid, int min_bid, int end_time) = unpack_auction_state(auction_state);\n    throw_if(err::too_small_stake, new_bid < min_bid);\n    (slice beneficiary_address, int initial_min_bid, int max_bid, int min_bid_step, int min_extend_time, _) = unpack_auction_config(auction_config);\n    cell new_last_bid = pack_last_bid(new_bid_address, new_bid, now());\n    int new_end_time = max(end_time, now() + min_extend_time);\n    if ((max_bid > 0) & (new_bid >= max_bid)) {\n        ;; for maybe_end_auction\n        new_end_time = 0;\n    }\n    ;; step is at least GR$1\n    int new_min_bid = max(new_bid + one_ton, (new_bid * (100 + min_bid_step) + 99) / 100);\n    ifnot (cell_null?(old_last_bid)) {\n        (slice old_bidder_address, int old_bid, _) = unpack_last_bid(old_last_bid);\n        int to_send = min(my_balance - min_tons_for_storage, old_bid);\n        if (to_send > 0) {\n            send_msg(old_bidder_address, to_send, op::outbid_notification, cur_lt(), null(), 1);\n            my_balance -= to_send;\n        }\n    }\n    cell new_auction_state = pack_auction_state(new_last_bid, new_min_bid, new_end_time);\n    return (my_balance, pack_auction(new_auction_state, auction_config));\n}\n\ncell prepare_auction(cell auction_config) {\n    (slice beneficiary_address, int initial_min_bid, int max_bid, int min_bid_step, int min_extend_time, int duration) = unpack_auction_config(auction_config);\n    ;; check beneficiary address\n    parse_std_addr(beneficiary_address);\n    if ((initial_min_bid < 2 * min_tons_for_storage) | ((max_bid != 0) & (max_bid < initial_min_bid)) |\n            (min_bid_step <= 0) | (min_extend_time > 60 * 60 * 24 * 7) | (duration > 60 * 60 * 24 * 365)) {\n        return null();\n    }\n    cell auction_state = pack_auction_state(null(), initial_min_bid, now() + duration);\n    return pack_auction(auction_state, auction_config);\n}\n\ncell deploy_item(int my_balance, slice msg) {\n    ;; Do not throw errors here!\n    (slice bidder_address, int bid, cell token_info, cell nft_content, cell auction_config, cell royalty_params) = unpack_teleitem_msg_deploy(msg);\n    cell auction = prepare_auction(auction_config);\n    if (cell_null?(auction)) {\n        return null();\n    }\n    (my_balance, cell new_auction) = process_new_bid(my_balance, bidder_address, bid, auction);\n    (my_balance, slice owner, new_auction) = maybe_end_auction(my_balance, zero_address(), new_auction, royalty_params, 0);\n    cell content = pack_item_content(nft_content, null(), token_info);\n    return pack_item_state(owner, content, new_auction, royalty_params);\n\n}\n\nslice transfer_ownership(int my_balance, slice owner_address, slice in_msg_body, int fwd_fees) impure inline {\n    (int query_id, slice new_owner_address, slice response_destination, cell custom_payload, int forward_amount, slice forward_payload)\n            = unpack_nft_cmd_transfer(in_msg_body);\n\n    force_chain(new_owner_address);\n\n    int rest_amount = my_balance - min_tons_for_storage;\n    if (forward_amount) {\n        rest_amount -= (forward_amount + fwd_fees);\n    }\n    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00\n    if (need_response) {\n        rest_amount -= fwd_fees;\n    }\n\n    throw_unless(err::not_enough_funds, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response\n\n    if (forward_amount) {\n        send_msg(new_owner_address, forward_amount, op::ownership_assigned, query_id,\n                begin_cell().store_slice(owner_address).store_slice(forward_payload), 1); ;; paying fees, revert on errors\n\n    }\n    if (need_response) {\n        force_chain(response_destination);\n        send_msg(response_destination, rest_amount, op::excesses, query_id, null(), 1); ;; paying fees, revert on errors\n    }\n\n    return new_owner_address;\n}\n\ncell change_dns_record(cell dns, slice in_msg_body) {\n    int key = in_msg_body~load_uint(256);\n    int has_value = in_msg_body.slice_refs() > 0;\n\n    if (has_value) {\n        cell value = in_msg_body~load_ref();\n        dns~udict_set_ref(256, key, value);\n    } else {\n        dns~udict_delete?(256, key);\n    }\n\n    return dns;\n}\n\n() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {\n    int my_balance = pair_first(get_balance());\n    slice cs = in_msg_full.begin_parse();\n    int flags = cs~load_uint(4);\n\n    if (flags & 1) { ;; ignore all bounced messages\n        return ();\n    }\n    slice sender_address = cs~load_msg_addr();\n\n    cs~load_msg_addr(); ;; skip dst\n    cs~load_grams(); ;; skip value\n    cs~load_maybe_ref(); ;; skip extracurrency collection\n    cs~load_grams(); ;; skip ihr_fee\n    int fwd_fee = muldiv(cs~load_grams(), 3, 2); ;; we use message fwd_:fee for estimation of forward_payload costs\n\n    int op = in_msg_body.slice_empty?() ? 0 : in_msg_body~load_uint(32);\n\n    (cell config, cell state) = unpack_item_data();\n    (int index, slice collection_address) = unpack_item_config(config);\n\n    if (equal_slices(collection_address, sender_address)) {\n        throw_unless(err::forbidden_not_deploy, op == op::teleitem_msg_deploy);\n        if (cell_null?(state)) {\n            cell new_state = deploy_item(my_balance, in_msg_body);\n            ifnot (cell_null?(new_state)) {\n                return save_item_data(config, new_state);\n            }\n        }\n        slice bidder_address = in_msg_body~load_msg_addr(); ;; first field in teleitem_msg_deploy\n        send_msg(bidder_address, 0, op::teleitem_return_bid, cur_lt(), null(), 64); ;; carry all the remaining value of the inbound message\n        return ();\n    }\n\n    throw_if(err::uninited, cell_null?(state));\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n\n    if (op == op::get_royalty_params) {\n        int query_id = in_msg_body~load_uint(64);\n        send_msg(sender_address, 0, op::report_royalty_params, query_id, begin_cell().store_slice(royalty_params.begin_parse()), 64); ;; carry all the remaining value of the inbound message\n        return ();\n    }\n\n    if (op == op::nft_cmd_get_static_data) {\n        int query_id = in_msg_body~load_uint(64);\n        send_msg(sender_address, 0, op::report_static_data, query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64); ;; carry all the remaining value of the inbound message\n        return ();\n    }\n\n    int is_topup = (op == 0) & equal_slices(in_msg_body, \"#topup\") & (in_msg_body.slice_refs() == 0);\n    if (is_topup) {\n        return ();\n    }\n\n    ifnot (cell_null?(auction)) {\n        ;; sender do not pay for auction with its message\n        my_balance -= msg_value;\n        (my_balance, owner_address, auction) = maybe_end_auction(my_balance, owner_address, auction, royalty_params, 0);\n        if (cell_null?(auction)) {\n            cell new_state = pack_item_state(owner_address, content, auction, royalty_params);\n            save_item_data(config, new_state);\n        }\n        my_balance += msg_value;\n    }\n\n    if (op == op::teleitem_cancel_auction) {\n        throw_if(err::no_auction, cell_null?(auction));\n        throw_unless(err::forbidden_auction, equal_slices(sender_address, owner_address));\n        int query_id = in_msg_body~load_uint(64);\n        (cell auction_state, cell auction_config) = unpack_auction(auction);\n        (cell last_bid, int min_bid, int end_time) = unpack_auction_state(auction_state);\n        throw_unless(err::already_has_stakes, cell_null?(last_bid));\n        cell new_state = pack_item_state(owner_address, content, null(), royalty_params);\n        if (query_id) {\n            send_msg(sender_address, 0, op::teleitem_ok, query_id, null(), 64); ;; carry all the remaining value of the inbound message\n        }\n        return save_item_data(config, new_state);\n    }\n\n    ifnot (cell_null?(auction)) {\n        throw_unless(err::forbidden_not_stake, op == 0);\n        (my_balance, auction) = process_new_bid(my_balance, sender_address, msg_value, auction);\n        (my_balance, owner_address, auction) = maybe_end_auction(my_balance, owner_address, auction, royalty_params, 0);\n        cell new_state = pack_item_state(owner_address, content, auction, royalty_params);\n        return save_item_data(config, new_state);\n    }\n\n    if (op == 0) {\n        throw_unless(err::forbidden_topup, equal_slices(sender_address, owner_address)); ;; only owner can fill-up balance, prevent coins lost right after the auction\n        ;; if owner send bid right after auction he can restore it by transfer response message\n        return ();\n    }\n\n    if (op == op::teleitem_start_auction) {\n        throw_unless(err::forbidden_auction, equal_slices(sender_address, owner_address));\n        int query_id = in_msg_body~load_uint(64);\n        cell new_auction_config = in_msg_body~load_ref();\n        cell new_auction = prepare_auction(new_auction_config);\n        throw_if(err::invalid_auction_config, cell_null?(new_auction));\n        cell new_state = pack_item_state(owner_address, content, new_auction, royalty_params);\n        if (query_id) {\n            send_msg(sender_address, 0, op::teleitem_ok, query_id, null(), 64); ;; carry all the remaining value of the inbound message\n        }\n        return save_item_data(config, new_state);\n    }\n\n    if (op == op::nft_cmd_transfer) {\n        throw_unless(err::forbidden_transfer, equal_slices(sender_address, owner_address));\n        slice new_owner_address = transfer_ownership(my_balance, owner_address, in_msg_body, fwd_fee);\n        cell new_state = pack_item_state(new_owner_address, content, auction, royalty_params);\n        return save_item_data(config, new_state);\n    }\n\n    if (op == op::change_dns_record) { ;; change dns record\n        int query_id = in_msg_body~load_uint(64);\n        throw_unless(err::forbidden_change_dns, equal_slices(sender_address, owner_address));\n        (cell nft_content, cell dns, cell token_info) = unpack_item_content(content);\n        cell new_dns = change_dns_record(dns, in_msg_body);\n        cell new_content = pack_item_content(nft_content, new_dns, token_info);\n        cell new_state = pack_item_state(owner_address, new_content, auction, royalty_params);\n        send_msg(sender_address, 0, op::teleitem_ok, query_id, null(), 64); ;; carry all the remaining value of the inbound message\n        return save_item_data(config, new_state);\n    }\n    throw(err::unknown_op);\n}\n\n() recv_external(slice in_msg) impure {\n    int my_balance = pair_first(get_balance());\n    (cell config, cell state) = unpack_item_data();\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    (my_balance, owner_address, auction) = maybe_end_auction(my_balance, owner_address, auction, royalty_params, -1);\n    cell new_state = pack_item_state(owner_address, content, auction, royalty_params);\n    return save_item_data(config, new_state);\n}\n\n;;\n;;  GET Methods\n;;\n\n(int, int, slice, slice, cell) get_nft_data() method_id {\n    (cell config, cell state) = unpack_item_data();\n    (int item_index, slice collection_address) = unpack_item_config(config);\n    if (cell_null?(state)) {\n        return (0, item_index, collection_address, zero_address(), null());\n    }\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    (cell nft_content, cell dns, cell token_info) = unpack_item_content(content);\n    return (-1, item_index, collection_address, owner_address, nft_content);\n}\n\nslice get_full_domain() method_id {\n    (cell config, cell state) = unpack_item_data();\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    (cell nft_content, cell dns, cell token_info) = unpack_item_content(content);\n    (slice token_name, slice domain) = unpack_token_info(token_info);\n    return begin_cell().store_slice(domain).store_slice(token_name).store_int(0, 8).end_cell().begin_parse();\n}\n\nslice get_telemint_token_name() method_id {\n    (cell config, cell state) = unpack_item_data();\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    (cell nft_content, cell dns, cell token_info) = unpack_item_content(content);\n    (slice token_name, slice domain) = unpack_token_info(token_info);\n    return token_name;\n}\n\n(slice, int, int, int, int) get_telemint_auction_state() method_id {\n    (cell config, cell state) = unpack_item_data();\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    throw_if (err::no_auction, cell_null?(auction));\n    (cell auction_state, cell auction_config) = unpack_auction(auction);\n    (cell last_bid, int min_bid, int end_time) = unpack_auction_state(auction_state);\n    (slice bidder_address, int bid, int bid_ts) = (null(), 0, 0);\n    ifnot (cell_null?(last_bid)) {\n        (bidder_address, bid, bid_ts) = unpack_last_bid(last_bid);\n    }\n    return (bidder_address, bid, bid_ts, min_bid, end_time);\n}\n\n(slice, int, int, int, int, int) get_telemint_auction_config() method_id {\n    (cell config, cell state) = unpack_item_data();\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    if (cell_null?(auction)) {\n        ;; Do not throw error, so it is easy to check if get_telemint_auction_config method exists\n        return (null(), 0, 0, 0, 0, 0);\n    }\n    (cell auction_state, cell auction_config) = unpack_auction(auction);\n    (slice beneficiary_address, int initial_min_bid, int max_bid, int min_bid_step, int min_extend_time, int duration) =\n            unpack_auction_config(auction_config);\n    return (beneficiary_address, initial_min_bid, max_bid, min_bid_step, min_extend_time, duration);\n}\n\n(int, int, slice) royalty_params() method_id {\n    (cell config, cell state) = unpack_item_data();\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    (int numerator, int denominator, slice destination) = unpack_nft_royalty_params(royalty_params);\n    return (numerator, denominator, destination);\n}\n\n(int, cell) dnsresolve(slice subdomain, int category) method_id {\n    (cell config, cell state) = unpack_item_data();\n    (slice owner_address, cell content, cell auction, cell royalty_params) = unpack_item_state(state);\n    (cell nft_content, cell dns, cell token_info) = unpack_item_content(content);\n\n    int subdomain_bits = slice_bits(subdomain);\n    throw_unless(err::bad_subdomain_length, subdomain_bits % 8 == 0);\n\n    int starts_with_zero_byte = subdomain.preload_int(8) == 0;\n    throw_unless(err::no_first_zero_byte, starts_with_zero_byte);\n\n    if (subdomain_bits > 8) { ;; more than \".\" requested\n        category = \"dns_next_resolver\"H;\n    }\n\n    if (category == 0) { ;;  all categories are requested\n        return (8, dns);\n    }\n\n    (cell value, int found) = dns.udict_get_ref?(256, category);\n    return (8, value);\n}",
        "is_entrypoint": true,
        "is_std_lib": false,
        "include_in_command": true
      }
    ]
  }
}